/src/test/java/junit/tests/AllTests.java
========================================
 [L 12] suite()
 [L 12] junit.textui.TestRunner.run(suite())
 [L 17] junit.tests.framework.AllTests.suite()
 [L 17] suite.addTest(junit.tests.framework.AllTests.suite())
 [L 18] junit.tests.runner.AllTests.suite()
 [L 18] suite.addTest(junit.tests.runner.AllTests.suite())
 [L 19] junit.tests.extensions.AllTests.suite()
 [L 19] suite.addTest(junit.tests.extensions.AllTests.suite())

/src/test/java/junit/tests/framework/AllTests.java
==================================================
 [L 12] suite()
 [L 12] junit.textui.TestRunner.run(suite())
 [L 17] suite.addTestSuite(TestCaseTest.class)
 [L 18] SuiteTest.suite()
 [L 18] suite.addTest(SuiteTest.suite())
 [L 19] suite.addTestSuite(TestListenerTest.class)
 [L 20] suite.addTestSuite(AssertionFailedErrorTest.class)
 [L 21] suite.addTestSuite(AssertTest.class)
 [L 22] suite.addTestSuite(TestImplementorTest.class)
 [L 23] suite.addTestSuite(NoArgTestCaseTest.class)
 [L 24] suite.addTestSuite(ComparisonCompactorTest.class)
 [L 25] suite.addTestSuite(ComparisonFailureTest.class)
 [L 26] suite.addTestSuite(DoublePrecisionAssertTest.class)
 [L 27] suite.addTestSuite(FloatAssertTest.class)

/src/test/java/junit/tests/framework/OverrideTestCase.java
==========================================================

/src/test/java/junit/tests/framework/AssertionFailedErrorTest.java
==================================================================
 [L 11] error.getMessage()
 [L 11] assertNull(error.getMessage())
 [L 16] error.getMessage()
 [L 16] assertEquals(ARBITRARY_MESSAGE, error.getMessage())
 [L 21] error.getMessage()
 [L 21] assertEquals("", error.getMessage())

/src/test/java/junit/tests/framework/Failure.java
=================================================
 [L 11] fail()

/src/test/java/junit/tests/framework/AssertTest.java
====================================================
 [L 22] fail()
 [L 35] e.toString()
 [L 35] assertEquals("junit.framework.AssertionFailedError", e.toString())
 [L 33] fail()
 [L 47] e.toString()
 [L 47] assertEquals("junit.framework.AssertionFailedError: woops!", e.toString())
 [L 45] fail("woops!")
 [L 55] assertEquals(o, o)
 [L 57] assertEquals(new Object(), new Object())
 [L 61] fail()
 [L 65] assertEquals((Object) null, (Object) null)
 [L 69] assertEquals("a", "a")
 [L 74] assertEquals(null, "foo")
 [L 75] fail()
 [L 85] e.getMessage()
 [L 82] assertEquals("foo", null)
 [L 83] fail()
 [L 93] e.getMessage()
 [L 91] assertEquals(null, new Object())
 [L 96] fail()
 [L 100] assertNull(null)
 [L 102] assertNull(new Object())
 [L 106] fail()
 [L 110] assertNotNull(new Object())
 [L 112] assertNotNull(null)
 [L 116] fail()
 [L 120] assertTrue(true)
 [L 122] assertTrue(false)
 [L 126] fail()
 [L 130] assertFalse(false)
 [L 132] assertFalse(true)
 [L 136] fail()
 [L 141] assertSame(o, o)
 [L 143] assertSame(new Integer(1), new Integer(1))
 [L 147] fail()
 [L 151] assertNotSame(new Integer(1), null)
 [L 152] assertNotSame(null, new Integer(1))
 [L 153] assertNotSame(new Integer(1), new Integer(1))
 [L 156] assertNotSame(obj, obj)
 [L 160] fail()
 [L 165] assertNotSame(null, null)
 [L 169] fail()

/src/test/java/junit/tests/framework/NoTestCases.java
=====================================================

/src/test/java/junit/tests/framework/ComparisonFailureTest.java
===============================================================
 [L 11] failure.getMessage()
 [L 11] assertEquals("warning expected:<Mary had [a] little lamb> but was:<Mary had [the] little lamb>", failure.getMessage())
 [L 17] assertEquals("a", "b")
 [L 21] fail()
 [L 28] e.toString()
 [L 28] e.toString().startsWith("junit.framework.ComparisonFailure: woops! expected:<")
 [L 29] fail("Unexpected message: " + e)
 [L 26] assertEquals("woops!", "a", "b")
 [L 33] fail()
 [L 40] e.toString()
 [L 40] e.toString().startsWith("junit.framework.ComparisonFailure: expected:<")
 [L 41] fail("Unexpected message: " + e)
 [L 38] assertEquals("a", "b")
 [L 45] fail()

/src/test/java/junit/tests/framework/ThreeTestCases.java
========================================================

/src/test/java/junit/tests/framework/NotPublicTestCase.java
===========================================================

/src/test/java/junit/tests/framework/TestCaseTest.java
======================================================
 [L 33] toString()
 [L 33] assertEquals("testCaseToString(junit.tests.framework.TestCaseTest)", toString())
 [L 43] verifyError(error)
 [L 50] super.tearDown()
 [L 59] verifyError(fails)
 [L 60] assertTrue(fails.fTornDown)
 [L 74] verifyError(fails)
 [L 83] verifySuccess(success)
 [L 90] fail()
 [L 93] verifyFailure(failure)
 [L 98] verifyError(fails)
 [L 99] assertTrue(fails.fTornDown)
 [L 113] verifyError(fails)
 [L 123] verifyError(fails)
 [L 124] assertTrue(!fails.fTornDown)
 [L 129] test.run()
 [L 130] assertTrue(test.fWasRun)
 [L 144] t.run(result)
 [L 145] result.errors()
 [L 145] result.errors().nextElement()
 [L 146] failure.thrownException()
 [L 146] failure.thrownException().getMessage()
 [L 146] assertEquals("running", failure.thrownException().getMessage())
 [L 165] assertSame(running, thrown)
 [L 163] t.runBare()
 [L 172] t.run(result)
 [L 173] result.runCount()
 [L 173] assertTrue(result.runCount() == 1)
 [L 174] result.failureCount()
 [L 174] assertTrue(result.failureCount() == 0)
 [L 175] result.errorCount()
 [L 175] assertTrue(result.errorCount() == 0)
 [L 181] t.run()
 [L 182] result.failureCount()
 [L 182] assertEquals(1, result.failureCount())
 [L 186] test.run()
 [L 187] result.runCount()
 [L 187] assertTrue(result.runCount() == 1)
 [L 188] result.failureCount()
 [L 188] assertTrue(result.failureCount() == 0)
 [L 189] result.errorCount()
 [L 189] assertTrue(result.errorCount() == 1)
 [L 193] test.run()
 [L 194] result.runCount()
 [L 194] assertTrue(result.runCount() == 1)
 [L 195] result.failureCount()
 [L 195] assertTrue(result.failureCount() == 1)
 [L 196] result.errorCount()
 [L 196] assertTrue(result.errorCount() == 0)
 [L 200] test.run()
 [L 201] result.runCount()
 [L 201] assertTrue(result.runCount() == 1)
 [L 202] result.failureCount()
 [L 202] assertTrue(result.failureCount() == 0)
 [L 203] result.errorCount()
 [L 203] assertTrue(result.errorCount() == 0)

/src/test/java/junit/tests/framework/InheritedTestCase.java
===========================================================

/src/test/java/junit/tests/framework/OneTestCase.java
=====================================================

/src/test/java/junit/tests/framework/TestListenerTest.java
==========================================================
 [L 34] fResult.addListener(this)
 [L 53] test.run(fResult)
 [L 54] assertEquals(1, fErrorCount)
 [L 55] assertEquals(1, fEndCount)
 [L 62] fail()
 [L 65] test.run(fResult)
 [L 66] assertEquals(1, fFailureCount)
 [L 67] assertEquals(1, fEndCount)
 [L 76] test.run(fResult)
 [L 77] assertEquals(1, fStartCount)
 [L 78] assertEquals(1, fEndCount)

/src/test/java/junit/tests/framework/SuiteTest.java
===================================================
 [L 29] suite.addTest(new SuiteTest("testNoTestCases"))
 [L 30] suite.addTest(new SuiteTest("testOneTestCase"))
 [L 31] suite.addTest(new SuiteTest("testNotPublicTestCase"))
 [L 32] suite.addTest(new SuiteTest("testNotVoidTestCase"))
 [L 33] suite.addTest(new SuiteTest("testNotExistingTestCase"))
 [L 34] suite.addTest(new SuiteTest("testInheritedTests"))
 [L 35] suite.addTest(new SuiteTest("testOneTestCaseEclipseSeesSameStructureAs381"))
 [L 36] suite.addTest(new SuiteTest("testNoTestCaseClass"))
 [L 37] suite.addTest(new SuiteTest("testShadowedTests"))
 [L 38] suite.addTest(new SuiteTest("testAddTestSuite"))
 [L 39] suite.addTest(new SuiteTest("testCreateSuiteFromArray"))
 [L 46] suite.run(fResult)
 [L 47] fResult.wasSuccessful()
 [L 47] assertTrue(fResult.wasSuccessful())
 [L 48] fResult.runCount()
 [L 48] assertEquals(2, fResult.runCount())
 [L 53] t.run(fResult)
 [L 54] fResult.runCount()
 [L 54] assertEquals(1, fResult.runCount())
 [L 55] fResult.wasSuccessful()
 [L 55] assertTrue(!fResult.wasSuccessful())
 [L 60] t.run(fResult)
 [L 61] fResult.runCount()
 [L 61] assertTrue(fResult.runCount() == 1)
 [L 62] fResult.failureCount()
 [L 62] assertTrue(fResult.failureCount() == 1)
 [L 63] fResult.wasSuccessful()
 [L 63] assertTrue(!fResult.wasSuccessful())
 [L 68] t.run(fResult)
 [L 69] fResult.runCount()
 [L 69] assertTrue(fResult.runCount() == 1)
 [L 70] fResult.failureCount()
 [L 70] assertTrue(fResult.failureCount() == 1)
 [L 71] fResult.errorCount()
 [L 71] assertTrue(fResult.errorCount() == 0)
 [L 77] suite.countTestCases()
 [L 77] assertEquals(2, suite.countTestCases())
 [L 82] suite.countTestCases()
 [L 82] assertTrue(suite.countTestCases() == 1)
 [L 87] t.run(fResult)
 [L 88] fResult.runCount()
 [L 88] assertTrue(fResult.runCount() == 1)
 [L 89] fResult.failureCount()
 [L 89] assertTrue(fResult.failureCount() == 0)
 [L 90] fResult.errorCount()
 [L 90] assertTrue(fResult.errorCount() == 0)
 [L 91] fResult.wasSuccessful()
 [L 91] assertTrue(fResult.wasSuccessful())
 [L 96] t.tests()
 [L 96] Collections.list(t.tests())
 [L 96] Collections.list(t.tests()).size()
 [L 96] assertEquals(3, Collections.list(t.tests()).size())
 [L 101] suite.run(fResult)
 [L 102] fResult.runCount()
 [L 102] assertEquals(1, fResult.runCount())
 [L 107] suite.addTestSuite(OneTestCase.class)
 [L 108] suite.run(fResult)
 [L 109] fResult.runCount()
 [L 109] assertEquals(1, fResult.runCount())
 [L 114] suite.testCount()
 [L 114] assertEquals(2, suite.testCount())
 [L 115] suite.testAt(1)
 [L 115] ((TestSuite) suite.testAt(1)).getName()
 [L 115] assertEquals("junit.tests.framework.DoublePrecisionAssertTest", ((TestSuite) suite.testAt(1)).getName())
 [L 116] suite.testAt(0)
 [L 116] ((TestSuite) suite.testAt(0)).getName()
 [L 116] assertEquals("junit.tests.framework.OneTestCase", ((TestSuite) suite.testAt(0)).getName())

/src/test/java/junit/tests/framework/FloatAssertTest.java
=========================================================
 [L 13] assertEquals(1.234f, Float.NaN, 0.0)
 [L 14] fail()
 [L 21] assertEquals(Float.NaN, 1.234f, 0.0)
 [L 22] fail()
 [L 28] assertEquals(Float.NaN, Float.NaN, 0.0)
 [L 33] assertEquals(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.0)
 [L 34] fail()
 [L 41] assertEquals(Float.POSITIVE_INFINITY, 1.23f, 0.0)
 [L 42] fail()
 [L 48] assertEquals(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, 0.0)
 [L 52] assertEquals(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.0)
 [L 57] assertEquals(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY)
 [L 58] fail()

/src/test/java/junit/tests/framework/NotVoidTestCase.java
=========================================================

/src/test/java/junit/tests/framework/TestImplementorTest.java
=============================================================
 [L 24] result.startTest(this)
 [L 27] fTestCase.runBare()
 [L 28] fTestCase.runBare()
 [L 31] result.runProtected(this, p)
 [L 32] result.endTest(this)
 [L 49] fTest.run(result)
 [L 50] fTest.countTestCases()
 [L 50] result.runCount()
 [L 50] assertEquals(fTest.countTestCases(), result.runCount())
 [L 51] result.errorCount()
 [L 51] assertEquals(0, result.errorCount())
 [L 52] result.failureCount()
 [L 52] assertEquals(0, result.failureCount())

/src/test/java/junit/tests/framework/NoArgTestCaseTest.java
===========================================================

/src/test/java/junit/tests/framework/ComparisonCompactorTest.java
=================================================================
 [L 9] new ComparisonCompactor(0, "b", "c").compact("a")
 [L 10] "a expected:<[b]> but was:<[c]>".equals(failure)
 [L 10] assertTrue("a expected:<[b]> but was:<[c]>".equals(failure))
 [L 14] new ComparisonCompactor(1, "ba", "bc").compact(null)
 [L 15] assertEquals("expected:<b[a]> but was:<b[c]>", failure)
 [L 19] new ComparisonCompactor(1, "ab", "cb").compact(null)
 [L 20] assertEquals("expected:<[a]b> but was:<[c]b>", failure)
 [L 24] new ComparisonCompactor(1, "ab", "ab").compact(null)
 [L 25] assertEquals("expected:<ab> but was:<ab>", failure)
 [L 29] new ComparisonCompactor(0, "abc", "adc").compact(null)
 [L 30] assertEquals("expected:<...[b]...> but was:<...[d]...>", failure)
 [L 34] new ComparisonCompactor(1, "abc", "adc").compact(null)
 [L 35] assertEquals("expected:<a[b]c> but was:<a[d]c>", failure)
 [L 39] new ComparisonCompactor(1, "abcde", "abfde").compact(null)
 [L 40] assertEquals("expected:<...b[c]d...> but was:<...b[f]d...>", failure)
 [L 44] new ComparisonCompactor(2, "ab", "abc").compact(null)
 [L 45] assertEquals("expected:<ab[]> but was:<ab[c]>", failure)
 [L 49] new ComparisonCompactor(0, "bc", "abc").compact(null)
 [L 50] assertEquals("expected:<[]...> but was:<[a]...>", failure)
 [L 54] new ComparisonCompactor(2, "bc", "abc").compact(null)
 [L 55] assertEquals("expected:<[]bc> but was:<[a]bc>", failure)
 [L 59] new ComparisonCompactor(0, "abc", "abbc").compact(null)
 [L 60] assertEquals("expected:<...[]...> but was:<...[b]...>", failure)
 [L 64] new ComparisonCompactor(2, "abc", "abbc").compact(null)
 [L 65] assertEquals("expected:<ab[]c> but was:<ab[b]c>", failure)
 [L 69] new ComparisonCompactor(0, "abcdde", "abcde").compact(null)
 [L 70] assertEquals("expected:<...[d]...> but was:<...[]...>", failure)
 [L 74] new ComparisonCompactor(2, "abcdde", "abcde").compact(null)
 [L 75] assertEquals("expected:<...cd[d]e> but was:<...cd[]e>", failure)
 [L 79] new ComparisonCompactor(0, "a", null).compact(null)
 [L 80] assertEquals("expected:<a> but was:<null>", failure)
 [L 84] new ComparisonCompactor(2, "a", null).compact(null)
 [L 85] assertEquals("expected:<a> but was:<null>", failure)
 [L 89] new ComparisonCompactor(0, null, "a").compact(null)
 [L 90] assertEquals("expected:<null> but was:<a>", failure)
 [L 94] new ComparisonCompactor(2, null, "a").compact(null)
 [L 95] assertEquals("expected:<null> but was:<a>", failure)
 [L 99] new ComparisonCompactor(10, "S&P500", "0").compact(null)
 [L 100] assertEquals("expected:<[S&P50]0> but was:<[]0>", failure)

/src/test/java/junit/tests/framework/Success.java
=================================================

/src/test/java/junit/tests/framework/NoTestCaseClass.java
=========================================================

/src/test/java/junit/tests/framework/package-info.java
======================================================

/src/test/java/junit/tests/framework/DoublePrecisionAssertTest.java
===================================================================
 [L 13] assertEquals(1.234, Double.NaN, 0.0)
 [L 14] fail()
 [L 21] assertEquals(Double.NaN, 1.234, 0.0)
 [L 22] fail()
 [L 28] assertEquals(Double.NaN, Double.NaN, 0.0)
 [L 33] assertEquals(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0)
 [L 34] fail()
 [L 41] assertEquals(Double.POSITIVE_INFINITY, 1.23, 0.0)
 [L 42] fail()
 [L 48] assertEquals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0)
 [L 52] assertEquals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0)

/src/test/java/junit/tests/runner/AllTests.java
===============================================
 [L 12] suite()
 [L 12] junit.textui.TestRunner.run(suite())
 [L 17] suite.addTestSuite(StackFilterTest.class)
 [L 18] suite.addTestSuite(ResultTest.class)
 [L 19] suite.addTestSuite(BaseTestRunnerTest.class)
 [L 20] suite.addTestSuite(TextFeedbackTest.class)
 [L 21] suite.addTestSuite(TextRunnerSingleMethodTest.class)
 [L 22] suite.addTestSuite(TextRunnerTest.class)
 [L 27] System.getProperty("java.version")
 [L 28] version.startsWith("1.1")

/src/test/java/junit/tests/runner/BaseTestRunnerTest.java
=========================================================
 [L 38] runner.getTest("junit.tests.runner.BaseTestRunnerTest$NonStatic")
 [L 49] DoesntExtendTestCase.class.getName()
 [L 49] runner.getTest(DoesntExtendTestCase.class.getName())
 [L 50] assertFalse(runner.fRunFailed)

/src/test/java/junit/tests/runner/TextFeedbackTest.java
=======================================================
 [L 32] TestRunner.run(TextFeedbackTest.class)
 [L 42] expected(new String[] { "", "Time: 0", "", "OK (0 tests)", "" })
 [L 43] runner.doRun(new TestSuite())
 [L 44] output.toString()
 [L 44] assertEquals(expected, output.toString())
 [L 49] expected(new String[] { ".", "Time: 0", "", "OK (1 test)", "" })
 [L 51] suite.addTest(new TestCase() {

    @Override
    public void runTest() {
    }
})
 [L 56] runner.doRun(suite)
 [L 57] output.toString()
 [L 57] assertEquals(expected, output.toString())
 [L 61] expected(new String[] { "..", "Time: 0", "", "OK (2 tests)", "" })
 [L 63] suite.addTest(new TestCase() {

    @Override
    public void runTest() {
    }
})
 [L 68] suite.addTest(new TestCase() {

    @Override
    public void runTest() {
    }
})
 [L 73] runner.doRun(suite)
 [L 74] output.toString()
 [L 74] assertEquals(expected, output.toString())
 [L 78] expected(new String[] { ".F", "Time: 0", "Failures here", "", "FAILURES!!!", "Tests run: 1,  Failures: 1,  Errors: 0", "" })
 [L 82] getWriter()
 [L 82] getWriter().println("Failures here")
 [L 85] runner.setPrinter(printer)
 [L 87] suite.addTest(new TestCase() {

    @Override
    public void runTest() {
        throw new AssertionFailedError();
    }
})
 [L 93] runner.doRun(suite)
 [L 94] output.toString()
 [L 94] assertEquals(expected, output.toString())
 [L 98] expected(new String[] { ".E", "Time: 0", "Errors here", "", "FAILURES!!!", "Tests run: 1,  Failures: 0,  Errors: 1", "" })
 [L 102] getWriter()
 [L 102] getWriter().println("Errors here")
 [L 105] runner.setPrinter(printer)
 [L 107] suite.addTest(new TestCase() {

    @Override
    public void runTest() throws Exception {
        throw new Exception();
    }
})
 [L 113] runner.doRun(suite)
 [L 114] output.toString()
 [L 114] assertEquals(expected, output.toString())
 [L 121] expectedWriter.println(lines[i])
 [L 123] expected.toString()

/src/test/java/junit/tests/runner/StackFilterTest.java
======================================================
 [L 17] pwin.println("junit.framework.AssertionFailedError")
 [L 18] pwin.println("	at junit.framework.Assert.fail(Assert.java:144)")
 [L 19] pwin.println("	at junit.framework.Assert.assert(Assert.java:19)")
 [L 20] pwin.println("	at junit.framework.Assert.assert(Assert.java:26)")
 [L 21] pwin.println("	at MyTest.f(MyTest.java:13)")
 [L 22] pwin.println("	at MyTest.testStackTrace(MyTest.java:8)")
 [L 23] pwin.println("	at java.lang.reflect.Method.invoke(Native Method)")
 [L 24] pwin.println("	at junit.framework.TestCase.runTest(TestCase.java:156)")
 [L 25] pwin.println("	at junit.framework.TestCase.runBare(TestCase.java:130)")
 [L 26] pwin.println("	at junit.framework.TestResult$1.protect(TestResult.java:100)")
 [L 27] pwin.println("	at junit.framework.TestResult.runProtected(TestResult.java:118)")
 [L 28] pwin.println("	at junit.framework.TestResult.run(TestResult.java:103)")
 [L 29] pwin.println("	at junit.framework.TestCase.run(TestCase.java:121)")
 [L 30] pwin.println("	at junit.framework.TestSuite.runTest(TestSuite.java:157)")
 [L 31] pwin.println("	at junit.framework.TestSuite.run(TestSuite.java, Compiled Code)")
 [L 32] pwin.println("	at junit.swingui.TestRunner$17.run(TestRunner.java:669)")
 [L 33] swin.toString()
 [L 37] pwout.println("junit.framework.AssertionFailedError")
 [L 38] pwout.println("	at MyTest.f(MyTest.java:13)")
 [L 39] pwout.println("	at MyTest.testStackTrace(MyTest.java:8)")
 [L 40] swout.toString()
 [L 44] BaseTestRunner.getFilteredTrace(fUnfiltered)
 [L 44] assertEquals(fFiltered, BaseTestRunner.getFilteredTrace(fUnfiltered))

/src/test/java/junit/tests/runner/ResultTest.java
=================================================
 [L 22] runner.run(AnnotationTest.FailureTest.class)
 [L 23] assertResultSerializable(result)
 [L 28] runner.run(Success.class)
 [L 29] assertResultSerializable(result)
 [L 34] new ObjectOutputStream(byteArrayOutputStream).writeObject(result)
 [L 35] byteArrayOutputStream.toByteArray()
 [L 37] objectInputStream.readObject()
 [L 38] assertSerializedCorrectly(result, fromStream)
 [L 40] getName()
 [L 40] getClass()
 [L 40] getClass().getResourceAsStream(getName())
 [L 41] getName()
 [L 41] assertNotNull("Could not read resource " + getName(), resource)
 [L 43] objectInputStream.readObject()
 [L 45] assertSerializedCorrectly(new ResultWithFixedRunTime(result), fromStream)
 [L 64] delegate.getRunCount()
 [L 69] delegate.getFailureCount()
 [L 79] delegate.getFailures()
 [L 84] delegate.getIgnoreCount()
 [L 89] assertNotNull(fromStream)
 [L 92] result.getFailureCount()
 [L 92] fromStream.getFailureCount()
 [L 92] assertEquals("failureCount", result.getFailureCount(), fromStream.getFailureCount())
 [L 93] result.getIgnoreCount()
 [L 93] fromStream.getIgnoreCount()
 [L 93] assertEquals("ignoreCount", result.getIgnoreCount(), fromStream.getIgnoreCount())
 [L 94] result.getRunTime()
 [L 94] fromStream.getRunTime()
 [L 94] assertEquals("runTime", result.getRunTime(), fromStream.getRunTime())
 [L 95] result.getFailures()
 [L 95] result.getFailures().size()
 [L 95] fromStream.getFailures()
 [L 95] fromStream.getFailures().size()
 [L 95] assertEquals("failures", result.getFailures().size(), fromStream.getFailures().size())
 [L 98] fromStream.getFailures()
 [L 98] fromStream.getFailures().get(index)
 [L 99] String.format("failures[%d]", index++)
 [L 101] failure.getDescription()
 [L 101] failureFromStream.getDescription()
 [L 100] assertEquals(messagePrefix + ".description", failure.getDescription(), failureFromStream.getDescription())
 [L 102] failure.getException()
 [L 103] failureFromStream.getException()
 [L 105] exception.getClass()
 [L 105] exceptionFromStream.getClass()
 [L 104] assertEquals(messagePrefix + ".exception", exception.getClass(), exceptionFromStream.getClass())
 [L 107] exception.getMessage()
 [L 107] exceptionFromStream.getMessage()
 [L 106] assertEquals(messagePrefix + ".exception", exception.getMessage(), exceptionFromStream.getMessage())
 [L 97] result.getFailures()

/src/test/java/junit/tests/runner/TextRunnerSingleMethodTest.java
=================================================================
 [L 24] fail("Shouldn't get here.")
 [L 30] t.setPrinter(new ResultPrinter(new PrintStream(new ByteArrayOutputStream())))
 [L 35] t.start(args)
 [L 36] assertTrue(fgWasInvoked)

/src/test/java/junit/tests/runner/TextRunnerTest.java
=====================================================
 [L 16] execTest("junit.tests.framework.Failure", false)
 [L 20] execTest("junit.tests.framework.Success", true)
 [L 24] execTest("junit.tests.BogusDude", false)
 [L 28] System.getProperty("java.home")
 [L 29] System.getProperty("java.class.path")
 [L 32] Runtime.getRuntime()
 [L 32] Runtime.getRuntime().exec(cmd)
 [L 33] p.getInputStream()
 [L 34] i.read()
 [L 36] p.waitFor()
 [L 36] assertTrue((p.waitFor() == 0) == success)
 [L 40] p.exitValue()
 [L 40] assertFalse(p.exitValue() == 0)
 [L 38] p.exitValue()
 [L 38] assertTrue(p.exitValue() == 0)
 [L 46] System.setOut(new PrintStream(new OutputStream() {

    @Override
    public void write(int arg0) throws IOException {
    }
}))
 [L 57] System.setOut(oldOut)
 [L 54] junit.textui.TestRunner.run(new TestSuite())
 [L 55] result.wasSuccessful()
 [L 55] assertTrue(result.wasSuccessful())

/src/test/java/junit/tests/runner/package-info.java
===================================================

/src/test/java/junit/tests/extensions/AllTests.java
===================================================
 [L 12] suite()
 [L 12] junit.textui.TestRunner.run(suite())
 [L 17] suite.addTestSuite(ExtensionTest.class)
 [L 18] suite.addTestSuite(ActiveTestTest.class)
 [L 19] suite.addTestSuite(RepeatedTestTest.class)

/src/test/java/junit/tests/extensions/ActiveTestTest.java
=========================================================
 [L 21] createActiveTestSuite()
 [L 23] test.run(result)
 [L 24] result.runCount()
 [L 24] assertEquals(100, result.runCount())
 [L 25] result.failureCount()
 [L 25] assertEquals(0, result.failureCount())
 [L 26] result.errorCount()
 [L 26] assertEquals(0, result.errorCount())
 [L 30] createActiveTestSuite()
 [L 32] test.run(result)
 [L 33] result.runCount()
 [L 33] assertEquals(500, result.runCount())
 [L 34] result.failureCount()
 [L 34] assertEquals(0, result.failureCount())
 [L 35] result.errorCount()
 [L 35] assertEquals(0, result.errorCount())
 [L 39] createActiveTestSuite()
 [L 41] test.run(result)
 [L 42] result.runCount()
 [L 42] assertEquals(0, result.runCount())
 [L 43] result.failureCount()
 [L 43] assertEquals(0, result.failureCount())
 [L 44] result.errorCount()
 [L 44] assertEquals(0, result.errorCount())
 [L 48] createActiveTestSuite()
 [L 50] test.run(result)
 [L 51] result.runCount()
 [L 51] assertEquals(100, result.runCount())
 [L 52] result.failureCount()
 [L 52] assertEquals(0, result.failureCount())
 [L 53] result.errorCount()
 [L 53] assertEquals(0, result.errorCount())
 [L 59] suite.addTest(new SuccessTest())

/src/test/java/junit/tests/extensions/RepeatedTestTest.java
===========================================================
 [L 25] fSuite.addTest(new SuccessTest())
 [L 26] fSuite.addTest(new SuccessTest())
 [L 31] test.countTestCases()
 [L 31] assertEquals(2, test.countTestCases())
 [L 33] test.run(result)
 [L 34] result.runCount()
 [L 34] assertEquals(2, result.runCount())
 [L 39] test.countTestCases()
 [L 39] assertEquals(6, test.countTestCases())
 [L 41] test.run(result)
 [L 42] result.runCount()
 [L 42] assertEquals(6, result.runCount())
 [L 47] test.countTestCases()
 [L 47] assertEquals(0, test.countTestCases())
 [L 49] test.run(result)
 [L 50] result.runCount()
 [L 50] assertEquals(0, result.runCount())
 [L 57] e.getMessage()
 [L 57] e.getMessage().contains(">=")
 [L 57] assertTrue(e.getMessage().contains(">="))
 [L 60] fail("Should throw an IllegalArgumentException")

/src/test/java/junit/tests/extensions/ExtensionTest.java
========================================================
 [L 31] fail()
 [L 38] wrapper.run(result)
 [L 39] result.wasSuccessful()
 [L 39] assertTrue(!result.wasSuccessful())
 [L 46] fail()
 [L 58] suite.addTest(failure)
 [L 59] suite.addTest(error)
 [L 64] wrapper.run(result)
 [L 66] result.failureCount()
 [L 66] assertEquals(1, result.failureCount())
 [L 67] result.errorCount()
 [L 67] assertEquals(1, result.errorCount())
 [L 77] fail()
 [L 82] wrapper.run(result)
 [L 84] assertTrue(!wrapper.fTornDown)
 [L 94] fail()
 [L 99] wrapper.run(result)
 [L 101] assertTrue(!test.fWasRun)
 [L 102] result.wasSuccessful()
 [L 102] assertTrue(!result.wasSuccessful())

/src/test/java/junit/tests/extensions/package-info.java
=======================================================

/src/test/java/junit/tests/WasRun.java
======================================

/src/test/java/junit/tests/package-info.java
============================================

/src/test/java/junit/samples/AllTests.java
==========================================
 [L 12] suite()
 [L 12] junit.textui.TestRunner.run(suite())
 [L 17] ListTest.suite()
 [L 17] suite.addTest(ListTest.suite())
 [L 18] suite.addTest(new TestSuite(junit.samples.money.MoneyTest.class))
 [L 19] junit.tests.AllTests.suite()
 [L 19] suite.addTest(junit.tests.AllTests.suite())

/src/test/java/junit/samples/ListTest.java
==========================================
 [L 18] suite()
 [L 18] junit.textui.TestRunner.run(suite())
 [L 25] fFull.add(1)
 [L 26] fFull.add(2)
 [L 27] fFull.add(3)
 [L 35] fFull.size()
 [L 37] fFull.add(new Integer(i))
 [L 39] fFull.size()
 [L 39] assertTrue(fFull.size() == 100 + size)
 [L 43] fFull.contains(1)
 [L 43] assertTrue(fFull.contains(1))
 [L 44] fEmpty.contains(1)
 [L 44] assertTrue(!fEmpty.contains(1))
 [L 48] fFull.get(0)
 [L 49] assertTrue(i == 1)
 [L 52] fFull.size()
 [L 52] fFull.get(fFull.size())
 [L 56] fail("Should raise an ArrayIndexOutOfBoundsException")
 [L 60] fFull.removeAll(fFull)
 [L 61] fEmpty.removeAll(fEmpty)
 [L 62] fFull.isEmpty()
 [L 62] assertTrue(fFull.isEmpty())
 [L 63] fEmpty.isEmpty()
 [L 63] assertTrue(fEmpty.isEmpty())
 [L 67] fFull.remove(new Integer(3))
 [L 68] fFull.contains(3)
 [L 68] assertTrue(!fFull.contains(3))

/src/test/java/junit/samples/SimpleTest.java
============================================
 [L 49] assertTrue(result == 6)
 [L 61] assertEquals(12, 12)
 [L 62] assertEquals(12L, 12L)
 [L 63] assertEquals(new Long(12), new Long(12))
 [L 65] assertEquals("Size", 12, 13)
 [L 66] assertEquals("Capacity", 12.0, 11.99, 0.0)
 [L 70] suite()
 [L 70] junit.textui.TestRunner.run(suite())

/src/test/java/junit/samples/money/MoneyTest.java
=================================================
 [L 15] junit.textui.TestRunner.run(MoneyTest.class)
 [L 25] MoneyBag.create(f12CHF, f7USD)
 [L 26] MoneyBag.create(f14CHF, f21USD)
 [L 31] MoneyBag.create(new Money(24, "CHF"), new Money(14, "USD"))
 [L 32] fMB1.multiply(2)
 [L 32] assertEquals(expected, fMB1.multiply(2))
 [L 33] fMB1.multiply(1)
 [L 33] assertEquals(fMB1, fMB1.multiply(1))
 [L 34] fMB1.multiply(0)
 [L 34] fMB1.multiply(0).isZero()
 [L 34] assertTrue(fMB1.multiply(0).isZero())
 [L 39] MoneyBag.create(new Money(-12, "CHF"), new Money(-7, "USD"))
 [L 40] fMB1.negate()
 [L 40] assertEquals(expected, fMB1.negate())
 [L 45] MoneyBag.create(new Money(26, "CHF"), new Money(7, "USD"))
 [L 46] fMB1.add(f14CHF)
 [L 46] assertEquals(expected, fMB1.add(f14CHF))
 [L 51] MoneyBag.create(new Money(-2, "CHF"), new Money(-14, "USD"))
 [L 52] fMB1.subtract(fMB2)
 [L 52] assertEquals(expected, fMB1.subtract(fMB2))
 [L 57] MoneyBag.create(new Money(26, "CHF"), new Money(28, "USD"))
 [L 58] fMB1.add(fMB2)
 [L 58] assertEquals(expected, fMB1.add(fMB2))
 [L 62] fMB1.subtract(fMB1)
 [L 62] fMB1.subtract(fMB1).isZero()
 [L 62] assertTrue(fMB1.subtract(fMB1).isZero())
 [L 63] MoneyBag.create(new Money(0, "CHF"), new Money(0, "USD"))
 [L 63] MoneyBag.create(new Money(0, "CHF"), new Money(0, "USD")).isZero()
 [L 63] assertTrue(MoneyBag.create(new Money(0, "CHF"), new Money(0, "USD")).isZero())
 [L 68] MoneyBag.create(f12CHF, f7USD)
 [L 69] f12CHF.add(f7USD)
 [L 69] assertEquals(expected, f12CHF.add(f7USD))
 [L 73] MoneyBag.create(f12CHF, f7USD)
 [L 74] new Money(12, "DEM").add(f7USD)
 [L 74] bag.equals(new Money(12, "DEM").add(f7USD))
 [L 74] assertFalse(bag.equals(new Money(12, "DEM").add(f7USD)))
 [L 78] fMB1.equals(null)
 [L 78] assertTrue(!fMB1.equals(null))
 [L 80] assertEquals(fMB1, fMB1)
 [L 81] MoneyBag.create(new Money(12, "CHF"), new Money(7, "USD"))
 [L 82] fMB1.equals(equal)
 [L 82] assertTrue(fMB1.equals(equal))
 [L 83] fMB1.equals(f12CHF)
 [L 83] assertTrue(!fMB1.equals(f12CHF))
 [L 84] f12CHF.equals(fMB1)
 [L 84] assertTrue(!f12CHF.equals(fMB1))
 [L 85] fMB1.equals(fMB2)
 [L 85] assertTrue(!fMB1.equals(fMB2))
 [L 89] MoneyBag.create(new Money(12, "CHF"), new Money(7, "USD"))
 [L 90] fMB1.hashCode()
 [L 90] equal.hashCode()
 [L 90] assertEquals(fMB1.hashCode(), equal.hashCode())
 [L 94] f12CHF.equals(null)
 [L 94] assertTrue(!f12CHF.equals(null))
 [L 96] assertEquals(f12CHF, f12CHF)
 [L 97] assertEquals(f12CHF, equalMoney)
 [L 98] f12CHF.hashCode()
 [L 98] equalMoney.hashCode()
 [L 98] assertEquals(f12CHF.hashCode(), equalMoney.hashCode())
 [L 99] f12CHF.equals(f14CHF)
 [L 99] assertTrue(!f12CHF.equals(f14CHF))
 [L 103] f12CHF.equals(null)
 [L 103] assertTrue(!f12CHF.equals(null))
 [L 105] f12CHF.hashCode()
 [L 105] equal.hashCode()
 [L 105] assertEquals(f12CHF.hashCode(), equal.hashCode())
 [L 109] MoneyBag.create(new Money(26, "CHF"), new Money(28, "CHF"))
 [L 110] assertEquals(new Money(54, "CHF"), money)
 [L 116] fMB1.subtract(f12CHF)
 [L 116] assertEquals(expected, fMB1.subtract(f12CHF))
 [L 121] MoneyBag.create(new Money(12, "CHF"), new Money(3, "USD"))
 [L 123] fMB1.subtract(ms1)
 [L 123] assertEquals(expected, fMB1.subtract(ms1))
 [L 128] MoneyBag.create(new Money(12, "CHF"), new Money(3, "USD"))
 [L 130] f12CHF.subtract(ms1)
 [L 130] assertEquals(expected, f12CHF.subtract(ms1))
 [L 134] f12CHF.toString()
 [L 134] assertEquals("[12 CHF]", f12CHF.toString())
 [L 140] f12CHF.add(f14CHF)
 [L 140] assertEquals(expected, f12CHF.add(f14CHF))
 [L 145] MoneyBag.create(new Money(26, "CHF"), new Money(7, "USD"))
 [L 146] f14CHF.add(fMB1)
 [L 146] assertEquals(expected, f14CHF.add(fMB1))
 [L 152] f14CHF.multiply(2)
 [L 152] assertEquals(expected, f14CHF.multiply(2))
 [L 158] f14CHF.negate()
 [L 158] assertEquals(expected, f14CHF.negate())
 [L 164] f14CHF.subtract(f12CHF)
 [L 164] assertEquals(expected, f14CHF.subtract(f12CHF))

/src/test/java/junit/samples/money/MoneyBag.java
================================================
 [L 22] m1.appendTo(result)
 [L 23] m2.appendTo(result)
 [L 24] result.simplify()
 [L 28] m.addMoneyBag(this)
 [L 32] MoneyBag.create(m, this)
 [L 36] MoneyBag.create(s, this)
 [L 41] appendMoney(each)
 [L 46] aMoney.isZero()
 [L 47] aMoney.currency()
 [L 47] findMoney(aMoney.currency())
 [L 49] fMonies.add(aMoney)
 [L 52] fMonies.remove(old)
 [L 53] old.add(aMoney)
 [L 54] sum.isZero()
 [L 57] fMonies.add(sum)
 [L 62] isZero()
 [L 64] ((IMoney) anObject).isZero()
 [L 70] aMoneyBag.fMonies.size()
 [L 70] fMonies.size()
 [L 75] aMoneyBag.contains(each)
 [L 86] each.currency()
 [L 86] each.currency().equals(currency)
 [L 94] m.currency()
 [L 94] findMoney(m.currency())
 [L 96] found.amount()
 [L 96] m.amount()
 [L 103] each.hashCode()
 [L 109] fMonies.size()
 [L 116] each.multiply(factor)
 [L 116] result.appendMoney((Money) each.multiply(factor))
 [L 125] each.negate()
 [L 125] result.appendMoney((Money) each.negate())
 [L 131] fMonies.size()
 [L 132] fMonies.iterator()
 [L 132] fMonies.iterator().next()
 [L 138] m.negate()
 [L 138] add(m.negate())
 [L 144] sb.append("{")
 [L 146] sb.append(each)
 [L 148] sb.append("}")
 [L 149] sb.toString()
 [L 153] m.appendBag(this)

/src/test/java/junit/samples/money/Money.java
=============================================
 [L 23] m.addMoney(this)
 [L 27] currency()
 [L 27] m.currency()
 [L 27] m.currency().equals(currency())
 [L 28] amount()
 [L 28] m.amount()
 [L 28] currency()
 [L 30] MoneyBag.create(this, m)
 [L 34] s.addMoney(this)
 [L 47] isZero()
 [L 49] ((IMoney) anObject).isZero()
 [L 54] currency()
 [L 54] aMoney.currency()
 [L 54] aMoney.currency().equals(currency())
 [L 55] amount()
 [L 55] aMoney.amount()
 [L 65] fCurrency.hashCode()
 [L 69] amount()
 [L 73] amount()
 [L 73] currency()
 [L 77] amount()
 [L 77] currency()
 [L 81] m.negate()
 [L 81] add(m.negate())
 [L 86] amount()
 [L 86] currency()
 [L 90] m.appendMoney(this)

/src/test/java/junit/samples/money/IMoney.java
==============================================

/src/test/java/junit/samples/money/package-info.java
====================================================

/src/test/java/junit/samples/package-info.java
==============================================

/src/test/java/org/junit/experimental/categories/CategoryFilterFactoryTest.java
===============================================================================
 [L 20] ExpectedException.none()
 [L 30] testName.getMethodName()
 [L 30] createSuiteDescription(testName.getMethodName())
 [L 31] CategoryFilterFactoryStub.class.getName()
 [L 32] categoryFilterFactory.createFilter(params)
 [L 34] instanceOf(DummyFilter.class)
 [L 34] assertThat(filter, instanceOf(DummyFilter.class))
 [L 40] testName.getMethodName()
 [L 40] createSuiteDescription(testName.getMethodName())
 [L 43] expectedException.expect(FilterFactory.FilterNotCreatedException.class)
 [L 45] categoryFilterFactory.createFilter(params)

/src/test/java/org/junit/validator/AnnotationsValidatorTest.java
================================================================
 [L 28] asList(new Exception(ANNOTATED_CLASS_CALLED))
 [L 33] asList(new Exception(ANNOTATED_FIELD_CALLED))
 [L 38] asList(new Exception(ANNOTATED_METHOD_CALLED))
 [L 73] assertClassHasFailureMessage(AnnotationValidatorClassTest.class, ExampleAnnotationValidator.ANNOTATED_CLASS_CALLED)
 [L 79] assertClassHasFailureMessage(AnnotationValidatorMethodTest.class, ExampleAnnotationValidator.ANNOTATED_METHOD_CALLED)
 [L 85] assertClassHasFailureMessage(AnnotationValidatorFieldTest.class, ExampleAnnotationValidator.ANNOTATED_FIELD_CALLED)
 [L 92] validator.validateTestClass(new TestClass(klass))
 [L 94] errors.size()
 [L 94] is(1)
 [L 94] assertThat(errors.size(), is(1))
 [L 95] errors.iterator()
 [L 95] errors.iterator().next()
 [L 95] errors.iterator().next().getMessage()
 [L 96] is(expectedFailure)
 [L 95] assertThat(errors.iterator().next().getMessage(), is(expectedFailure))

/src/test/java/org/junit/validator/PublicClassValidatorTest.java
================================================================
 [L 23] validator.validateTestClass(testClass)
 [L 26] Collections.<Exception>emptyList()
 [L 26] equalTo(Collections.<Exception>emptyList())
 [L 26] is(equalTo(Collections.<Exception>emptyList()))
 [L 25] assertThat(validationErrors, is(equalTo(Collections.<Exception>emptyList())))
 [L 36] validator.validateTestClass(testClass)
 [L 38] validationErrors.size()
 [L 39] equalTo(1)
 [L 39] is(equalTo(1))
 [L 38] assertThat("Wrong number of errors.", validationErrors.size(), is(equalTo(1)))

/src/test/java/org/junit/validator/AnnotationValidatorFactoryTest.java
======================================================================
 [L 13] ExpectedException.none()
 [L 17] SampleTestWithValidator.class.getAnnotation(ValidateWith.class)
 [L 18] new AnnotationValidatorFactory().createAnnotationValidator(validateWith)
 [L 19] instanceOf(Validator.class)
 [L 19] is(instanceOf(Validator.class))
 [L 19] assertThat(annotationValidator, is(instanceOf(Validator.class)))
 [L 31] SampleTestWithValidatorThatThrowsException.class.getAnnotation(ValidateWith.class)
 [L 32] exception.expect(RuntimeException.class)
 [L 33] exception.expectMessage("Exception received when creating AnnotationValidator class " + "org.junit.validator.AnnotationValidatorFactoryTest$ValidatorThatThrowsException")
 [L 35] new AnnotationValidatorFactory().createAnnotationValidator(validateWith)

/src/test/java/org/junit/runner/JUnitCommandLineParseResultTest.java
====================================================================
 [L 18] ExpectedException.none()
 [L 24] jUnitCommandLineParseResult.parseOptions("--0", "--1", "--", "--2", "--3")
 [L 27] is(new String[] { "--2", "--3" })
 [L 27] assertThat(restOfArgs, is(new String[] { "--2", "--3" }))
 [L 32] IncludeCategories.class.getName()
 [L 32] DummyCategory0.class.getName()
 [L 33] jUnitCommandLineParseResult.parseOptions("--filter=" + value)
 [L 35] jUnitCommandLineParseResult.getFilterSpecs()
 [L 37] hasItems(value)
 [L 37] assertThat(specs, hasItems(value))
 [L 42] jUnitCommandLineParseResult.parseOptions("--filter")
 [L 44] jUnitCommandLineParseResult.createRequest(new Computer())
 [L 44] jUnitCommandLineParseResult.createRequest(new Computer()).getRunner()
 [L 45] runner.getDescription()
 [L 45] runner.getDescription().getChildren()
 [L 45] runner.getDescription().getChildren().get(0)
 [L 47] description.toString()
 [L 47] containsString("initializationError")
 [L 47] assertThat(description.toString(), containsString("initializationError"))
 [L 52] IncludeCategories.class.getName()
 [L 52] DummyCategory0.class.getName()
 [L 53] jUnitCommandLineParseResult.parseOptions("--filter", value)
 [L 55] jUnitCommandLineParseResult.getFilterSpecs()
 [L 57] hasItems(value)
 [L 57] assertThat(specs, hasItems(value))
 [L 62] jUnitCommandLineParseResult.parseOptions(new String[] { "--0", "--1", "2", "3" })
 [L 66] is(new String[] { "2", "3" })
 [L 66] assertThat(restOfArgs, is(new String[] { "2", "3" }))
 [L 72] jUnitCommandLineParseResult.parseOptions(new String[] { unknownOption })
 [L 76] jUnitCommandLineParseResult.createRequest(new Computer())
 [L 76] jUnitCommandLineParseResult.createRequest(new Computer()).getRunner()
 [L 77] runner.getDescription()
 [L 77] runner.getDescription().getChildren()
 [L 77] runner.getDescription().getChildren().get(0)
 [L 79] description.toString()
 [L 79] containsString("initializationError")
 [L 79] assertThat(description.toString(), containsString("initializationError"))
 [L 85] FilterFactoryStub.class.getName()
 [L 84] jUnitCommandLineParseResult.parseOptions(new String[] { "--filter=" + FilterFactoryStub.class.getName() })
 [L 88] jUnitCommandLineParseResult.createRequest(new Computer())
 [L 88] jUnitCommandLineParseResult.createRequest(new Computer()).getRunner()
 [L 89] runner.getDescription()
 [L 89] runner.getDescription().getChildren()
 [L 89] runner.getDescription().getChildren().get(0)
 [L 91] description.toString()
 [L 91] containsString("initializationError")
 [L 91] assertThat(description.toString(), containsString("initializationError"))
 [L 97] jUnitCommandLineParseResult.parseOptions(new String[] { "--filter=" + nonExistentFilterFactory })
 [L 101] jUnitCommandLineParseResult.createRequest(new Computer())
 [L 101] jUnitCommandLineParseResult.createRequest(new Computer()).getRunner()
 [L 102] runner.getDescription()
 [L 102] runner.getDescription().getChildren()
 [L 102] runner.getDescription().getChildren().get(0)
 [L 104] description.toString()
 [L 104] containsString("initializationError")
 [L 104] assertThat(description.toString(), containsString("initializationError"))
 [L 110] DummyTest.class.getName()
 [L 109] jUnitCommandLineParseResult.parseParameters(new String[] { DummyTest.class.getName() })
 [L 113] jUnitCommandLineParseResult.getClasses()
 [L 114] classes.get(0)
 [L 116] testClass.getName()
 [L 116] DummyTest.class.getName()
 [L 116] is(DummyTest.class.getName())
 [L 116] assertThat(testClass.getName(), is(DummyTest.class.getName()))
 [L 122] jUnitCommandLineParseResult.parseParameters(new String[] { unknownTestClass })
 [L 126] jUnitCommandLineParseResult.createRequest(new Computer())
 [L 126] jUnitCommandLineParseResult.createRequest(new Computer()).getRunner()
 [L 127] runner.getDescription()
 [L 127] runner.getDescription().getChildren()
 [L 127] runner.getDescription().getChildren().get(0)
 [L 129] description.toString()
 [L 129] containsString("initializationError")
 [L 129] assertThat(description.toString(), containsString("initializationError"))

/src/test/java/org/junit/runner/notification/ConcurrentRunNotifierTest.java
===========================================================================
 [L 36] fTestStarted.incrementAndGet()
 [L 44] fNotifier.addListener(listener1)
 [L 45] fNotifier.addListener(listener2)
 [L 48] Executors.newFixedThreadPool(numParallelTests)
 [L 52] fNotifier.fireTestStarted(null)
 [L 50] pool.submit(new Runnable() {

    public void run() {
        fNotifier.fireTestStarted(null);
    }
})
 [L 56] pool.shutdown()
 [L 57] pool.awaitTermination(TIMEOUT, TimeUnit.SECONDS)
 [L 57] assertTrue(pool.awaitTermination(TIMEOUT, TimeUnit.SECONDS))
 [L 59] fNotifier.removeListener(listener1)
 [L 60] fNotifier.removeListener(listener2)
 [L 62] listener1.fTestStarted.get()
 [L 62] is(numParallelTests)
 [L 62] assertThat(listener1.fTestStarted.get(), is(numParallelTests))
 [L 63] listener2.fTestStarted.get()
 [L 63] is(numParallelTests)
 [L 63] assertThat(listener2.fTestStarted.get(), is(numParallelTests))
 [L 97] random.nextDouble()
 [L 108] Executors.newFixedThreadPool(4)
 [L 111] trigger.await()
 [L 113] fNotifier.fireTestStarted(null)
 [L 114] latch.countDown()
 [L 112] condition.get()
 [L 116] fNotifier.fireTestStarted(null)
 [L 109] notificationsPool.submit(new Callable<Void>() {

    public Void call() throws Exception {
        trigger.await();
        while (condition.get()) {
            fNotifier.fireTestStarted(null);
            latch.countDown();
        }
        fNotifier.fireTestStarted(null);
        return null;
    }
})
 [L 122] trigger.await(TIMEOUT, TimeUnit.SECONDS)
 [L 125] latch.await(TIMEOUT, TimeUnit.SECONDS)
 [L 128] addListener(examinedListener)
 [L 131] notificationsPool.shutdown()
 [L 132] condition.set(false)
 [L 133] notificationsPool.awaitTermination(TIMEOUT, TimeUnit.SECONDS)
 [L 133] assertTrue(notificationsPool.awaitTermination(TIMEOUT, TimeUnit.SECONDS))
 [L 137] countReportedTestFailures(examinedListeners)
 [L 138] is(countTestFailures)
 [L 138] assertThat(totalListenersFailures, is(countTestFailures))
 [L 152] fNotifier.addListener(listener)
 [L 149] new AbstractConcurrentFailuresTest() {

    @Override
    protected void addListener(ExaminedListener listener) {
        fNotifier.addListener(listener);
    }
}.test()
 [L 166] fNotifier.addFirstListener(listener)
 [L 163] new AbstractConcurrentFailuresTest() {

    @Override
    protected void addListener(ExaminedListener listener) {
        fNotifier.addFirstListener(listener);
    }
}.test()

/src/test/java/org/junit/runner/notification/RunNotifierTest.java
=================================================================
 [L 21] fNotifier.addListener(new CorruptListener())
 [L 22] fNotifier.addListener(failureListener)
 [L 23] fNotifier.fireTestFailure(new Failure(null, null))
 [L 24] assertNotNull("The FailureListener registered no failure.", failureListener.failure)
 [L 30] fNotifier.addListener(new CorruptListener())
 [L 31] fNotifier.addListener(new FailureListener())
 [L 32] fNotifier.addListener(new CorruptListener())
 [L 33] fNotifier.fireTestRunFinished(new Result())
 [L 51] listener.fTestStarted.get()
 [L 51] is(0)
 [L 51] assertThat(listener.fTestStarted.get(), is(0))
 [L 52] fNotifier.addListener(listener)
 [L 53] fNotifier.fireTestStarted(null)
 [L 54] listener.fTestStarted.get()
 [L 54] is(1)
 [L 54] assertThat(listener.fTestStarted.get(), is(1))
 [L 55] fNotifier.removeListener(listener)
 [L 56] fNotifier.fireTestStarted(null)
 [L 57] listener.fTestStarted.get()
 [L 57] is(1)
 [L 57] assertThat(listener.fTestStarted.get(), is(1))
 [L 63] listener.fTestStarted.get()
 [L 63] is(0)
 [L 63] assertThat(listener.fTestStarted.get(), is(0))
 [L 64] fNotifier.addFirstListener(listener)
 [L 65] fNotifier.fireTestStarted(null)
 [L 66] listener.fTestStarted.get()
 [L 66] is(1)
 [L 66] assertThat(listener.fTestStarted.get(), is(1))
 [L 67] fNotifier.removeListener(listener)
 [L 68] fNotifier.fireTestStarted(null)
 [L 69] listener.fTestStarted.get()
 [L 69] is(1)
 [L 69] assertThat(listener.fTestStarted.get(), is(1))
 [L 75] listener.fTestStarted.get()
 [L 75] is(0)
 [L 75] assertThat(listener.fTestStarted.get(), is(0))
 [L 76] fNotifier.addListener(listener)
 [L 77] fNotifier.fireTestStarted(null)
 [L 78] listener.fTestStarted.get()
 [L 78] is(1)
 [L 78] assertThat(listener.fTestStarted.get(), is(1))
 [L 79] fNotifier.removeListener(listener)
 [L 80] fNotifier.fireTestStarted(null)
 [L 81] listener.fTestStarted.get()
 [L 81] is(1)
 [L 81] assertThat(listener.fTestStarted.get(), is(1))
 [L 87] listener.fTestStarted.get()
 [L 87] is(0)
 [L 87] assertThat(listener.fTestStarted.get(), is(0))
 [L 88] fNotifier.addFirstListener(listener)
 [L 89] fNotifier.fireTestStarted(null)
 [L 90] listener.fTestStarted.get()
 [L 90] is(1)
 [L 90] assertThat(listener.fTestStarted.get(), is(1))
 [L 91] fNotifier.removeListener(listener)
 [L 92] fNotifier.fireTestStarted(null)
 [L 93] listener.fTestStarted.get()
 [L 93] is(1)
 [L 93] assertThat(listener.fTestStarted.get(), is(1))
 [L 99] new RunNotifier().wrapIfNotThreadSafe(listener)
 [L 99] assertSame(listener, new RunNotifier().wrapIfNotThreadSafe(listener))
 [L 105] new RunNotifier().wrapIfNotThreadSafe(listener)
 [L 106] instanceOf(SynchronizedRunListener.class)
 [L 106] assertThat(wrappedListener, instanceOf(SynchronizedRunListener.class))
 [L 123] fTestStarted.incrementAndGet()

/src/test/java/org/junit/runner/notification/SynchronizedRunListenerTest.java
=============================================================================
 [L 30] method.getName()
 [L 31] method.getParameterTypes()
 [L 31] Arrays.asList(method.getParameterTypes())
 [L 36] fMethod.toString()
 [L 41] fName.hashCode()
 [L 53] fName.equals(that.fName)
 [L 53] fParameterTypes.equals(that.fParameterTypes)
 [L 60] methods.add(new MethodSignature(method))
 [L 59] type.getDeclaredMethods()
 [L 67] getAllDeclaredMethods(RunListener.class)
 [L 68] getAllDeclaredMethods(SynchronizedRunListener.class)
 [L 71] synchronizedRunListenerMethods.containsAll(runListenerMethods)
 [L 71] assertTrue(synchronizedRunListenerMethods.containsAll(runListenerMethods))
 [L 88] fName.hashCode()
 [L 100] this.fName.equals(that.fName)
 [L 110] listener1.equals(listener1)
 [L 110] assertTrue(listener1.equals(listener1))
 [L 111] listener2.equals(listener2)
 [L 111] assertTrue(listener2.equals(listener2))
 [L 112] listener3.equals(listener3)
 [L 112] assertTrue(listener3.equals(listener3))
 [L 114] listener1.equals(null)
 [L 114] assertFalse(listener1.equals(null))
 [L 115] listener1.equals(new Object())
 [L 115] assertFalse(listener1.equals(new Object()))
 [L 117] listener1.equals(listener2)
 [L 117] assertTrue(listener1.equals(listener2))
 [L 118] listener2.equals(listener1)
 [L 118] assertTrue(listener2.equals(listener1))
 [L 119] listener1.equals(listener3)
 [L 119] assertFalse(listener1.equals(listener3))
 [L 120] listener3.equals(listener1)
 [L 120] assertFalse(listener3.equals(listener1))
 [L 122] listener1.hashCode()
 [L 122] listener2.hashCode()
 [L 122] assertEquals(listener1.hashCode(), listener2.hashCode())
 [L 123] listener1.hashCode()
 [L 123] listener3.hashCode()
 [L 123] assertNotEquals(listener1.hashCode(), listener3.hashCode())
 [L 130] listener.toString()
 [L 130] assertEquals("NamedListener", listener.toString())
 [L 131] wrap(listener)
 [L 131] wrap(listener).toString()
 [L 131] assertEquals("NamedListener (with synchronization wrapper)", wrap(listener).toString())
 [L 140] wrap(listener1)
 [L 140] wrap(listener1)
 [L 140] assertEquals(wrap(listener1), wrap(listener1))
 [L 141] wrap(listener1)
 [L 141] wrap(listener2)
 [L 141] assertEquals(wrap(listener1), wrap(listener2))
 [L 142] wrap(listener1)
 [L 142] wrap(listener3)
 [L 142] assertNotEquals(wrap(listener1), wrap(listener3))
 [L 143] wrap(listener1)
 [L 143] assertNotEquals(wrap(listener1), listener1)
 [L 144] wrap(listener1)
 [L 144] assertNotEquals(listener1, wrap(listener1))
 [L 150] listener.hashCode()
 [L 150] wrap(listener)
 [L 150] wrap(listener).hashCode()
 [L 150] assertEquals(listener.hashCode(), wrap(listener).hashCode())

/src/test/java/org/junit/runner/RunnerSpy.java
==============================================

/src/test/java/org/junit/runner/FilterOptionIntegrationTest.java
================================================================
 [L 21] IncludeCategories.class.getName()
 [L 21] DummyCategory0.class.getName()
 [L 23] ExcludeCategories.class.getName()
 [L 23] DummyCategory1.class.getName()
 [L 30] jUnitCore.addListener(testListener)
 [L 36] DummyTestClass.class.getName()
 [L 37] DummyTestClass0.class.getName()
 [L 38] DummyTestClass1.class.getName()
 [L 39] DummyTestClass01.class.getName()
 [L 40] DummyTestClass0TestMethod1.class.getName()
 [L 35] runJUnit(DummyTestClass.class.getName(), DummyTestClass0.class.getName(), DummyTestClass1.class.getName(), DummyTestClass01.class.getName(), DummyTestClass0TestMethod1.class.getName())
 [L 42] assertWasRun(DummyTestClass.class)
 [L 43] assertWasRun(DummyTestClass0.class)
 [L 44] assertWasRun(DummyTestClass1.class)
 [L 45] assertWasRun(DummyTestClass01.class)
 [L 46] assertWasRun(DummyTestClass0TestMethod1.class)
 [L 47] result.getRunCount()
 [L 47] is(5)
 [L 47] assertThat("runCount does not match", result.getRunCount(), is(5))
 [L 48] result.getFailureCount()
 [L 48] is(0)
 [L 48] assertThat("failureCount does not match", result.getFailureCount(), is(0))
 [L 55] DummyTestClass.class.getName()
 [L 56] DummyTestClass0.class.getName()
 [L 57] DummyTestClass1.class.getName()
 [L 58] DummyTestClass01.class.getName()
 [L 59] DummyTestClass0TestMethod1.class.getName()
 [L 53] runJUnit(EXCLUDES_DUMMY_CATEGORY_1, DummyTestClass.class.getName(), DummyTestClass0.class.getName(), DummyTestClass1.class.getName(), DummyTestClass01.class.getName(), DummyTestClass0TestMethod1.class.getName())
 [L 61] assertWasRun(DummyTestClass.class)
 [L 62] assertWasRun(DummyTestClass0.class)
 [L 63] assertWasNotRun(DummyTestClass1.class)
 [L 64] assertWasNotRun(DummyTestClass01.class)
 [L 65] assertWasNotRun(DummyTestClass0TestMethod1.class)
 [L 66] result.getRunCount()
 [L 66] is(2)
 [L 66] assertThat("runCount does not match", result.getRunCount(), is(2))
 [L 67] result.getFailureCount()
 [L 67] is(0)
 [L 67] assertThat("failureCount does not match", result.getFailureCount(), is(0))
 [L 74] DummyTestClass.class.getName()
 [L 75] DummyTestClass0.class.getName()
 [L 76] DummyTestClass1.class.getName()
 [L 77] DummyTestClass01.class.getName()
 [L 78] DummyTestClass0TestMethod1.class.getName()
 [L 72] runJUnit(INCLUDES_DUMMY_CATEGORY_0, DummyTestClass.class.getName(), DummyTestClass0.class.getName(), DummyTestClass1.class.getName(), DummyTestClass01.class.getName(), DummyTestClass0TestMethod1.class.getName())
 [L 80] assertWasNotRun(DummyTestClass.class)
 [L 81] assertWasRun(DummyTestClass0.class)
 [L 82] assertWasNotRun(DummyTestClass1.class)
 [L 83] assertWasRun(DummyTestClass01.class)
 [L 84] assertWasRun(DummyTestClass0TestMethod1.class)
 [L 85] result.getRunCount()
 [L 85] is(3)
 [L 85] assertThat("runCount does not match", result.getRunCount(), is(3))
 [L 86] result.getFailureCount()
 [L 86] is(0)
 [L 86] assertThat("failureCount does not match", result.getFailureCount(), is(0))
 [L 94] DummyTestClass.class.getName()
 [L 95] DummyTestClass0.class.getName()
 [L 96] DummyTestClass1.class.getName()
 [L 97] DummyTestClass01.class.getName()
 [L 98] DummyTestClass0TestMethod1.class.getName()
 [L 91] runJUnit(INCLUDES_DUMMY_CATEGORY_0, EXCLUDES_DUMMY_CATEGORY_1, DummyTestClass.class.getName(), DummyTestClass0.class.getName(), DummyTestClass1.class.getName(), DummyTestClass01.class.getName(), DummyTestClass0TestMethod1.class.getName())
 [L 100] assertWasNotRun(DummyTestClass.class)
 [L 101] assertWasRun(DummyTestClass0.class)
 [L 102] assertWasNotRun(DummyTestClass1.class)
 [L 103] assertWasNotRun(DummyTestClass01.class)
 [L 104] assertWasNotRun(DummyTestClass0TestMethod1.class)
 [L 105] result.getRunCount()
 [L 105] is(1)
 [L 105] assertThat("runCount does not match", result.getRunCount(), is(1))
 [L 106] result.getFailureCount()
 [L 106] is(0)
 [L 106] assertThat("failureCount does not match", result.getFailureCount(), is(0))
 [L 110] jUnitCore.runMain(new TestSystem(), args)
 [L 114] testClass.getName()
 [L 114] testListener.wasRun(testClass)
 [L 114] assertTrue(testClass.getName() + " expected to finish but did not", testListener.wasRun(testClass))
 [L 119] testClass.getName()
 [L 120] testListener.wasRun(testClass)
 [L 118] assertFalse(testClass.getName() + " expected not to have been started but was", testListener.wasRun(testClass))
 [L 129] description.getClassName()
 [L 129] finishedTests.add(description.getClassName())
 [L 133] testClass.getName()
 [L 133] finishedTests.contains(testClass.getName())
 [L 138] description.getClassName()
 [L 138] startedTests.add(description.getClassName())
 [L 142] testClass.getName()
 [L 142] startedTests.contains(testClass.getName())
 [L 146] testStarted(testClass)
 [L 146] testFinished(testClass)

/src/test/java/org/junit/runner/FilterFactoriesTest.java
========================================================
 [L 19] ExpectedException.none()
 [L 25] Request.aClass(DummySuite.class)
 [L 31] createSuiteRequest()
 [L 32] ExcludeCategories.class.getName()
 [L 32] DummyCategory.class.getName()
 [L 30] FilterFactories.createFilterFromFilterSpec(createSuiteRequest(), ExcludeCategories.class.getName() + "=" + DummyCategory.class.getName())
 [L 34] filter.describe()
 [L 34] startsWith("excludes ")
 [L 34] assertThat(filter.describe(), startsWith("excludes "))
 [L 40] createSuiteRequest()
 [L 40] FilterFactoryStub.class.getName()
 [L 39] FilterFactories.createFilterFromFilterSpec(createSuiteRequest(), FilterFactoryStub.class.getName())
 [L 42] instanceOf(DummyFilter.class)
 [L 42] assertThat(filter, instanceOf(DummyFilter.class))
 [L 47] createSuiteRequest()
 [L 48] request.getRunner()
 [L 48] request.getRunner().getDescription()
 [L 50] FilterFactoryStub.class.getName()
 [L 49] FilterFactories.createFilterFromFilterSpec(request, FilterFactoryStub.class.getName())
 [L 53] instanceOf(DummyFilter.class)
 [L 53] assumeThat(filter, instanceOf(DummyFilter.class))
 [L 56] dummyFilter.getTopLevelDescription()
 [L 56] is(description)
 [L 56] assertThat(dummyFilter.getTopLevelDescription(), is(description))
 [L 64] testName.getMethodName()
 [L 64] Description.createSuiteDescription(testName.getMethodName())
 [L 61] FilterFactories.createFilter(FilterFactoryStub.class, new FilterFactoryParams(Description.createSuiteDescription(testName.getMethodName()), ""))
 [L 67] instanceOf(DummyFilter.class)
 [L 67] assertThat(filter, instanceOf(DummyFilter.class))
 [L 72] expectedException.expect(FilterFactory.FilterNotCreatedException.class)
 [L 74] NonFilterFactory.class.getName()
 [L 74] FilterFactories.createFilterFactory(NonFilterFactory.class.getName())
 [L 79] expectedException.expect(FilterFactory.FilterNotCreatedException.class)
 [L 81] FilterFactories.createFilterFactory(NonInstantiableFilterFactory.class)
 [L 98] params.getTopLevelDescription()

/src/test/java/org/junit/runner/JUnitCoreTest.java
==================================================
 [L 15] jUnitCore.runMain(new TestSystem(), "NonExistentTest")
 [L 17] result.getFailureCount()
 [L 17] is(1)
 [L 17] assertThat(result.getFailureCount(), is(1))
 [L 18] result.getFailures()
 [L 18] result.getFailures().get(0)
 [L 18] result.getFailures().get(0).getException()
 [L 18] instanceOf(IllegalArgumentException.class)
 [L 18] assertThat(result.getFailures().get(0).getException(), instanceOf(IllegalArgumentException.class))

/src/test/java/org/junit/tests/AllTests.java
============================================

/src/test/java/org/junit/tests/running/methods/TimeoutTest.java
===============================================================
 [L 32] fail()
 [L 39] core.run(FailureWithTimeoutTest.class)
 [L 40] result.getRunCount()
 [L 40] assertEquals(1, result.getRunCount())
 [L 41] result.getFailureCount()
 [L 41] assertEquals(1, result.getFailureCount())
 [L 42] result.getFailures()
 [L 42] result.getFailures().get(0)
 [L 42] result.getFailures().get(0).getException()
 [L 42] result.getFailures().get(0).getException().getClass()
 [L 42] assertEquals(AssertionError.class, result.getFailures().get(0).getException().getClass())
 [L 55] core.run(FailureWithTimeoutRunTimeExceptionTest.class)
 [L 56] result.getRunCount()
 [L 56] assertEquals(1, result.getRunCount())
 [L 57] result.getFailureCount()
 [L 57] assertEquals(1, result.getFailureCount())
 [L 58] result.getFailures()
 [L 58] result.getFailures().get(0)
 [L 58] result.getFailures().get(0).getException()
 [L 58] result.getFailures().get(0).getException().getClass()
 [L 58] assertEquals(NullPointerException.class, result.getFailures().get(0).getException().getClass())
 [L 70] core.run(SuccessWithTimeoutTest.class)
 [L 71] result.getRunCount()
 [L 71] assertEquals(1, result.getRunCount())
 [L 72] result.getFailureCount()
 [L 72] assertEquals(0, result.getFailureCount())
 [L 78] Thread.sleep(40000)
 [L 86] core.run(TimeoutFailureTest.class)
 [L 87] result.getRunCount()
 [L 87] assertEquals(1, result.getRunCount())
 [L 88] result.getFailureCount()
 [L 88] assertEquals(1, result.getFailureCount())
 [L 89] result.getFailures()
 [L 89] result.getFailures().get(0)
 [L 89] result.getFailures().get(0).getException()
 [L 89] result.getFailures().get(0).getException().getClass()
 [L 89] assertEquals(InterruptedException.class, result.getFailures().get(0).getException().getClass())
 [L 95] infiniteLoop()
 [L 101] Thread.sleep(10)
 [L 111] core.run(InfiniteLoopTest.class)
 [L 112] result.getRunCount()
 [L 112] assertEquals(1, result.getRunCount())
 [L 113] result.getFailureCount()
 [L 113] assertEquals(1, result.getFailureCount())
 [L 114] result.getFailures()
 [L 114] result.getFailures().get(0)
 [L 114] result.getFailures().get(0).getException()
 [L 115] exception.getMessage()
 [L 115] exception.getMessage().contains("test timed out after 100 milliseconds")
 [L 115] assertTrue(exception.getMessage().contains("test timed out after 100 milliseconds"))
 [L 121] infiniteLoop()
 [L 134] JUnitCore.runClasses(InfiniteLoopTest.class, ImpatientLoopTest.class)
 [L 135] runAndTime(InfiniteLoopTest.class)
 [L 136] runAndTime(ImpatientLoopTest.class)
 [L 138] String.format("Difference was %sms", difference)
 [L 138] assertTrue(String.format("Difference was %sms", difference), difference < 200)
 [L 143] System.currentTimeMillis()
 [L 144] core.run(clazz)
 [L 145] System.currentTimeMillis()
 [L 152] exception.printStackTrace(writer)
 [L 153] buffer.toString()
 [L 159] core.run(InfiniteLoopTest.class)
 [L 160] result.getRunCount()
 [L 160] assertEquals(1, result.getRunCount())
 [L 161] result.getFailureCount()
 [L 161] assertEquals(1, result.getFailureCount())
 [L 162] result.getFailures()
 [L 162] result.getFailures().get(0)
 [L 162] result.getFailures().get(0).getException()
 [L 163] stackForException(exception)
 [L 163] containsString("infiniteLoop")
 [L 163] assertThat(stackForException(exception), containsString("infiniteLoop"))
 [L 179] Thread.sleep(500)
 [L 189] t1.start()
 [L 190] t2.start()
 [L 191] t3.start()
 [L 194] t1.join()
 [L 195] t2.join()
 [L 196] t3.join()
 [L 202] Timeout.builder()
 [L 202] Timeout.builder().withTimeout(100, TimeUnit.MILLISECONDS)
 [L 202] Timeout.builder().withTimeout(100, TimeUnit.MILLISECONDS).withLookingForStuckThread(true)
 [L 202] Timeout.builder().withTimeout(100, TimeUnit.MILLISECONDS).withLookingForStuckThread(true).build()
 [L 209] (new InfiniteLoopMultithreaded()).failure(false)
 [L 215] Timeout.builder()
 [L 215] Timeout.builder().withTimeout(100, TimeUnit.MILLISECONDS)
 [L 215] Timeout.builder().withTimeout(100, TimeUnit.MILLISECONDS).withLookingForStuckThread(true)
 [L 215] Timeout.builder().withTimeout(100, TimeUnit.MILLISECONDS).withLookingForStuckThread(true).build()
 [L 222] (new InfiniteLoopMultithreaded()).failure(true)
 [L 229] core.run(InfiniteLoopWithStuckThreadTest.class)
 [L 230] result.getRunCount()
 [L 230] assertEquals(1, result.getRunCount())
 [L 231] result.getFailureCount()
 [L 231] assertEquals(2, result.getFailureCount())
 [L 234] result.getFailures()
 [L 234] result.getFailures().get(i)
 [L 234] result.getFailures().get(i).getException()
 [L 235] exception[0].getMessage()
 [L 235] containsString("test timed out after 100 milliseconds")
 [L 235] assertThat(exception[0].getMessage(), containsString("test timed out after 100 milliseconds"))
 [L 236] stackForException(exception[0])
 [L 236] containsString("Thread.join")
 [L 236] assertThat(stackForException(exception[0]), containsString("Thread.join"))
 [L 237] exception[1].getMessage()
 [L 237] containsString("Appears to be stuck in thread timeout-thr2")
 [L 237] assertThat(exception[1].getMessage(), containsString("Appears to be stuck in thread timeout-thr2"))
 [L 243] core.run(InfiniteLoopStuckInMainThreadTest.class)
 [L 244] result.getRunCount()
 [L 244] assertEquals(1, result.getRunCount())
 [L 245] result.getFailureCount()
 [L 245] assertEquals(1, result.getFailureCount())
 [L 246] result.getFailures()
 [L 246] result.getFailures().get(0)
 [L 246] result.getFailures().get(0).getException()
 [L 247] exception.getMessage()
 [L 247] containsString("test timed out after 100 milliseconds")
 [L 247] assertThat(exception.getMessage(), containsString("test timed out after 100 milliseconds"))
 [L 248] exception.getMessage()
 [L 248] containsString("Appears to be stuck")
 [L 248] not(containsString("Appears to be stuck"))
 [L 248] assertThat(exception.getMessage(), not(containsString("Appears to be stuck")))
 [L 254] new JUnit4TestAdapter(InfiniteLoopTest.class).run(result)
 [L 255] result.errorCount()
 [L 255] assertEquals(1, result.errorCount())
 [L 265] Thread.sleep(10000)
 [L 280] JUnitCore.runClasses(WillTimeOut.class)
 [L 281] is(true)
 [L 281] assertThat(WillTimeOut.afterWasCalled, is(true))
 [L 286] Timeout.seconds(0)
 [L 291] Thread.sleep(200)
 [L 301] core.run(TimeOutZero.class)
 [L 302] result.getRunCount()
 [L 302] assertEquals("Should run the test", 1, result.getRunCount())
 [L 303] result.getFailureCount()
 [L 303] assertEquals("Test should not have failed", 0, result.getFailureCount())
 [L 313] super.getTimeout(unit)
 [L 323] timeout.getTimeoutFromSuperclass(TimeUnit.MILLISECONDS)
 [L 323] assertEquals(1000, timeout.getTimeoutFromSuperclass(TimeUnit.MILLISECONDS))
 [L 330] core.run(TimeOutOneSecond.class)
 [L 331] result.getRunCount()
 [L 331] assertEquals("Should run the test", 1, result.getRunCount())
 [L 332] result.getFailureCount()
 [L 332] assertEquals("Test should not have failed", 0, result.getFailureCount())

/src/test/java/org/junit/tests/running/methods/ParameterizedTestMethodTest.java
===============================================================================
 [L 165] Arrays.asList(new Object[][] { { EverythingWrong.class, 1 + 4 * 5 }, { SubWrong.class, 1 }, { SubShadows.class, 0 } })
 [L 174] e.getCauses()
 [L 176] Collections.emptyList()
 [L 181] validateAllMethods(fClass)
 [L 182] problems.size()
 [L 182] assertEquals(fErrorCount, problems.size())

/src/test/java/org/junit/tests/running/methods/AnnotationTest.java
==================================================================
 [L 40] runner.run(SimpleTest.class)
 [L 41] assertTrue(run)
 [L 54] runner.run(SimpleTestWithFutureProofExplicitRunner.class)
 [L 55] assertTrue(run)
 [L 71] runner.run(SetupTest.class)
 [L 72] assertTrue(run)
 [L 88] runner.run(TeardownTest.class)
 [L 89] assertTrue(run)
 [L 95] org.junit.Assert.fail()
 [L 101] runner.run(FailureTest.class)
 [L 102] result.getRunCount()
 [L 102] assertEquals(1, result.getRunCount())
 [L 103] result.getFailureCount()
 [L 103] assertEquals(1, result.getFailureCount())
 [L 104] result.getFailures()
 [L 104] result.getFailures().get(0)
 [L 104] result.getFailures().get(0).getException()
 [L 104] result.getFailures().get(0).getException().getClass()
 [L 104] assertEquals(AssertionError.class, result.getFailures().get(0).getException().getClass())
 [L 121] core.run(SetupFailureTest.class)
 [L 122] runner.getRunCount()
 [L 122] assertEquals(1, runner.getRunCount())
 [L 123] runner.getFailureCount()
 [L 123] assertEquals(1, runner.getFailureCount())
 [L 124] runner.getFailures()
 [L 124] runner.getFailures().get(0)
 [L 124] runner.getFailures().get(0).getException()
 [L 124] runner.getFailures().get(0).getException().getClass()
 [L 124] assertEquals(Error.class, runner.getFailures().get(0).getException().getClass())
 [L 125] assertFalse(run)
 [L 141] core.run(TeardownFailureTest.class)
 [L 142] runner.getRunCount()
 [L 142] assertEquals(1, runner.getRunCount())
 [L 143] runner.getFailureCount()
 [L 143] assertEquals(1, runner.getFailureCount())
 [L 144] runner.getFailures()
 [L 144] runner.getFailures().get(0)
 [L 144] runner.getFailures().get(0).getException()
 [L 144] runner.getFailures().get(0).getException().getClass()
 [L 144] assertEquals(Error.class, runner.getFailures().get(0).getException().getClass())
 [L 161] core.run(TestAndTeardownFailureTest.class)
 [L 162] runner.getRunCount()
 [L 162] assertEquals(1, runner.getRunCount())
 [L 163] runner.getFailureCount()
 [L 163] assertEquals(2, runner.getFailureCount())
 [L 164] runner.getFailures()
 [L 164] runner.getFailures().toString()
 [L 164] containsString("hereAfter")
 [L 164] containsString("inTest")
 [L 164] allOf(containsString("hereAfter"), containsString("inTest"))
 [L 164] assertThat(runner.getFailures().toString(), allOf(containsString("hereAfter"), containsString("inTest")))
 [L 181] runner.run(TeardownAfterFailureTest.class)
 [L 182] assertTrue(run)
 [L 192] tests.add(this)
 [L 198] tests.add(this)
 [L 206] runner.run(TwoTests.class)
 [L 207] assertEquals(2, count)
 [L 208] tests.size()
 [L 208] assertEquals(2, tests.size())
 [L 219] runner.run(OldTest.class)
 [L 220] assertTrue(run)
 [L 232] runner.run(suite)
 [L 233] assertTrue(run)
 [L 245] core.run(ExceptionTest.class)
 [L 246] result.getFailureCount()
 [L 246] assertEquals(0, result.getFailureCount())
 [L 257] core.run(NoExceptionTest.class)
 [L 258] result.getFailureCount()
 [L 258] assertEquals(1, result.getFailureCount())
 [L 259] result.getFailures()
 [L 259] result.getFailures().get(0)
 [L 259] result.getFailures().get(0).getMessage()
 [L 259] assertEquals("Expected exception: java.lang.Error", result.getFailures().get(0).getMessage())
 [L 280] core.run(OneTimeSetup.class)
 [L 281] assertEquals(1, count)
 [L 302] core.run(OneTimeTeardown.class)
 [L 303] assertEquals(1, count)
 [L 338] core.run(OrderTest.class)
 [L 339] assertEquals("beforeClass before test after afterClass ", log)
 [L 354] core.run(NonStaticOneTimeSetup.class)
 [L 355] result.getFailureCount()
 [L 355] assertEquals(1, result.getFailureCount())
 [L 373] core.run(ErrorInBeforeClass.class)
 [L 374] assertFalse(run)
 [L 375] result.getFailureCount()
 [L 375] assertEquals(1, result.getFailureCount())
 [L 376] result.getFailures()
 [L 376] result.getFailures().get(0)
 [L 376] result.getFailures().get(0).getDescription()
 [L 377] ErrorInBeforeClass.class.getName()
 [L 377] description.getDisplayName()
 [L 377] assertEquals(ErrorInBeforeClass.class.getName(), description.getDisplayName())
 [L 395] core.run(ErrorInAfterClass.class)
 [L 396] assertTrue(run)
 [L 397] result.getFailureCount()
 [L 397] assertEquals(1, result.getFailureCount())
 [L 452] core.run(SubInheritance.class)
 [L 453] assertEquals("Before class super Before class sub Before super Before sub Test After sub After super After class sub After class super ", log)
 [L 490] core.run(SubShadowing.class)
 [L 491] assertEquals("Before sub Test After sub ", log)
 [L 517] core.run(SubTest.class)
 [L 519] log.contains("Sub")
 [L 519] assertTrue(log.contains("Sub"))
 [L 520] log.contains("Two")
 [L 520] assertTrue(log.contains("Two"))
 [L 521] log.contains("Super")
 [L 521] assertFalse(log.contains("Super"))
 [L 552] core.run(RunAllAfters.class)
 [L 553] log.contains("one")
 [L 553] assertTrue(log.contains("one"))
 [L 554] log.contains("two")
 [L 554] assertTrue(log.contains("two"))
 [L 578] core.run(RunAllAftersRegardless.class)
 [L 579] log.contains("one")
 [L 579] assertTrue(log.contains("one"))
 [L 580] log.contains("two")
 [L 580] assertTrue(log.contains("two"))
 [L 581] result.getFailureCount()
 [L 581] assertEquals(2, result.getFailureCount())
 [L 612] core.run(RunAllAfterClasses.class)
 [L 613] log.contains("one")
 [L 613] assertTrue(log.contains("one"))
 [L 614] log.contains("two")
 [L 614] assertTrue(log.contains("two"))
 [L 638] core.run(RunAllAfterClassesRegardless.class)
 [L 639] log.contains("one")
 [L 639] assertTrue(log.contains("one"))
 [L 640] log.contains("two")
 [L 640] assertTrue(log.contains("two"))
 [L 641] result.getFailureCount()
 [L 641] assertEquals(2, result.getFailureCount())

/src/test/java/org/junit/tests/running/methods/TestMethodTest.java
==================================================================
 [L 137] validateAllMethods(EverythingWrong.class)
 [L 139] problems.size()
 [L 139] assertEquals(errorCount, problems.size())
 [L 156] validateAllMethods(SubWrong.class)
 [L 157] problems.size()
 [L 157] assertEquals(1, problems.size())
 [L 169] validateAllMethods(SubShadows.class)
 [L 170] problems.isEmpty()
 [L 170] assertTrue(problems.isEmpty())
 [L 177] e.getCauses()
 [L 179] Collections.emptyList()
 [L 201] runner.run(IgnoredTest.class)
 [L 202] result.getIgnoreCount()
 [L 202] assertEquals(2, result.getIgnoreCount())
 [L 203] result.getRunCount()
 [L 203] assertEquals(1, result.getRunCount())
 [L 209] new JUnit4TestAdapter(IgnoredTest.class).run(result)
 [L 210] result.runCount()
 [L 210] assertEquals(1, result.runCount())
 [L 251] JUnitCore.runClasses(OnlyTestIsIgnored.class)
 [L 252] result.getFailureCount()
 [L 252] assertEquals(0, result.getFailureCount())
 [L 253] result.getIgnoreCount()
 [L 253] assertEquals(1, result.getIgnoreCount())

/src/test/java/org/junit/tests/running/methods/ExpectedTest.java
================================================================
 [L 24] core.run(Expected.class)
 [L 25] result.wasSuccessful()
 [L 25] assertTrue(result.wasSuccessful())
 [L 37] JUnitCore.runClasses(Unexpected.class)
 [L 38] result.getFailures()
 [L 38] result.getFailures().get(0)
 [L 39] failure.getMessage()
 [L 40] message.contains("expected<java.lang.Exception> but was<java.lang.Error>")
 [L 40] assertTrue(message.contains("expected<java.lang.Exception> but was<java.lang.Error>"))
 [L 41] failure.getException()
 [L 41] failure.getException().getCause()
 [L 41] failure.getException().getCause().getClass()
 [L 41] assertEquals(Error.class, failure.getException().getCause().getClass())
 [L 53] core.run(NoneThrown.class)
 [L 54] result.wasSuccessful()
 [L 54] assertFalse(result.wasSuccessful())
 [L 55] result.getFailures()
 [L 55] result.getFailures().get(0)
 [L 55] result.getFailures().get(0).getMessage()
 [L 56] message.contains("Expected exception: java.lang.Exception")
 [L 56] assertTrue(message.contains("Expected exception: java.lang.Exception"))
 [L 68] new JUnitCore().run(ExpectSuperclass.class)
 [L 68] new JUnitCore().run(ExpectSuperclass.class).wasSuccessful()
 [L 68] assertTrue(new JUnitCore().run(ExpectSuperclass.class).wasSuccessful())

/src/test/java/org/junit/tests/running/methods/InheritedTestTest.java
=====================================================================
 [L 24] JUnitCore.runClasses(Sub.class)
 [L 25] result.wasSuccessful()
 [L 25] assertTrue(result.wasSuccessful())
 [L 31] fail()
 [L 37] JUnitCore.runClasses(SubWithBefore.class)
 [L 37] JUnitCore.runClasses(SubWithBefore.class).wasSuccessful()
 [L 37] assertFalse(JUnitCore.runClasses(SubWithBefore.class).wasSuccessful())

/src/test/java/org/junit/tests/running/core/JUnitCoreReturnsCorrectExitCodeTest.java
====================================================================================
 [L 14] fail()
 [L 20] getClass()
 [L 20] getClass().getName()
 [L 20] runClass(getClass().getName() + "$Fail", 1)
 [L 25] runClass("Foo", 1)
 [L 36] getClass()
 [L 36] getClass().getName()
 [L 36] runClass(getClass().getName() + "$Succeed", 0)
 [L 42] JUnitCore.main(className)
 [L 40] new MainRunner().runWithCheckForSystemExit(new Runnable() {

    public void run() {
        JUnitCore.main(className);
    }
})
 [L 45] Integer.valueOf(returnCode)
 [L 45] assertEquals(Integer.valueOf(returnCode), exitValue)

/src/test/java/org/junit/tests/running/core/MainRunner.java
===========================================================
 [L 45] originalSecurityManager.getInCheck()
 [L 50] originalSecurityManager.getSecurityContext()
 [L 50] super.getSecurityContext()
 [L 56] originalSecurityManager.checkPermission(perm)
 [L 63] originalSecurityManager.checkPermission(perm, context)
 [L 70] originalSecurityManager.checkCreateClassLoader()
 [L 77] originalSecurityManager.checkAccess(t)
 [L 84] originalSecurityManager.checkAccess(g)
 [L 91] originalSecurityManager.checkExec(cmd)
 [L 98] originalSecurityManager.checkLink(lib)
 [L 105] originalSecurityManager.checkRead(fd)
 [L 112] originalSecurityManager.checkRead(file)
 [L 119] originalSecurityManager.checkRead(file, context)
 [L 126] originalSecurityManager.checkWrite(fd)
 [L 133] originalSecurityManager.checkWrite(file)
 [L 140] originalSecurityManager.checkDelete(file)
 [L 147] originalSecurityManager.checkConnect(host, port)
 [L 154] originalSecurityManager.checkConnect(host, port, context)
 [L 161] originalSecurityManager.checkListen(port)
 [L 168] originalSecurityManager.checkAccept(host, port)
 [L 175] originalSecurityManager.checkMulticast(maddr)
 [L 183] originalSecurityManager.checkMulticast(maddr, ttl)
 [L 190] originalSecurityManager.checkPropertiesAccess()
 [L 197] originalSecurityManager.checkPropertyAccess(key)
 [L 203] originalSecurityManager.checkTopLevelWindow(window)
 [L 203] super.checkTopLevelWindow(window)
 [L 209] originalSecurityManager.checkPrintJobAccess()
 [L 216] originalSecurityManager.checkSystemClipboardAccess()
 [L 223] originalSecurityManager.checkAwtEventQueueAccess()
 [L 230] originalSecurityManager.checkPackageAccess(pkg)
 [L 237] originalSecurityManager.checkPackageDefinition(pkg)
 [L 244] originalSecurityManager.checkSetFactory()
 [L 251] originalSecurityManager.checkMemberAccess(clazz, which)
 [L 258] originalSecurityManager.checkSecurityAccess(target)
 [L 264] originalSecurityManager.getThreadGroup()
 [L 264] super.getThreadGroup()
 [L 276] System.getSecurityManager()
 [L 277] System.setSecurityManager(new NoExitSecurityManager(oldSecurityManager))
 [L 280] System.setOut(new PrintStream(new ByteArrayOutputStream()))
 [L 286] e.getStatus()
 [L 286] System.out.println("System.exit() called, value=" + e.getStatus())
 [L 287] e.getStatus()
 [L 289] System.setSecurityManager(oldSecurityManager)
 [L 290] System.setOut(oldOut)
 [L 282] runnable.run()
 [L 283] System.out.println("System.exit() not called, return null")

/src/test/java/org/junit/tests/running/core/CommandLineTest.java
================================================================
 [L 23] System.setOut(new PrintStream(results))
 [L 28] System.setOut(oldOut)
 [L 43] JUnitCore.main("org.junit.tests.running.core.CommandLineTest$Example")
 [L 41] new MainRunner().runWithCheckForSystemExit(new Runnable() {

    public void run() {
        JUnitCore.main("org.junit.tests.running.core.CommandLineTest$Example");
    }
})
 [L 46] assertTrue(testWasRun)
 [L 52] JUnitCore.runClasses(Example.class)
 [L 53] assertTrue(testWasRun)
 [L 68] JUnitCore.runClasses(new Class[] { Count.class, Count.class })
 [L 69] assertEquals(2, fCount)
 [L 75] JUnitCore.runClasses(Count.class, Count.class)
 [L 76] assertEquals(2, fCount)

/src/test/java/org/junit/tests/running/core/SystemExitTest.java
===============================================================
 [L 17] System.exit(EXIT_CODE)
 [L 23] System.getProperty("java.home")
 [L 24] getClass()
 [L 24] getClass().getClassLoader()
 [L 24] getClass().getClassLoader().getResource(".")
 [L 24] getClass().getClassLoader().getResource(".").getFile()
 [L 24] System.getProperty("java.class.path")
 [L 25] getClass()
 [L 25] getClass().getName()
 [L 26] Runtime.getRuntime()
 [L 26] Runtime.getRuntime().exec(cmd)
 [L 27] process.getInputStream()
 [L 28] input.read()
 [L 29] process.waitFor()
 [L 29] assertEquals(EXIT_CODE, process.waitFor())

/src/test/java/org/junit/tests/running/classes/UseSuiteAsASuperclassTest.java
=============================================================================
 [L 24] fail()
 [L 41] core.run(AllWithMySuite.class)
 [L 42] result.getRunCount()
 [L 42] assertEquals(2, result.getRunCount())
 [L 43] result.getFailureCount()
 [L 43] assertEquals(1, result.getFailureCount())

/src/test/java/org/junit/tests/running/classes/BlockJUnit4ClassRunnerTest.java
==============================================================================
 [L 25] e.getCauses()
 [L 26] causes.size()
 [L 26] assertEquals("Wrong number of causes.", 1, causes.size())
 [L 30] causes.get(0)
 [L 30] causes.get(0).getMessage()
 [L 27] assertEquals("Wrong exception.", "The inner class org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest$OuterClass$Enclosed is not static.", causes.get(0).getMessage())

/src/test/java/org/junit/tests/running/classes/RunWithTest.java
===============================================================
 [L 36] Description.createSuiteDescription("example")
 [L 48] JUnitCore.runClasses(ExampleTest.class)
 [L 49] log.contains("plan")
 [L 49] assertTrue(log.contains("plan"))
 [L 50] log.contains("initialize")
 [L 50] assertTrue(log.contains("initialize"))
 [L 51] log.contains("run")
 [L 51] assertTrue(log.contains("run"))
 [L 61] JUnitCore.runClasses(SubExampleTest.class)
 [L 62] log.contains("run")
 [L 62] assertTrue(log.contains("run"))
 [L 85] JUnitCore.runClasses(Empty.class)
 [L 85] JUnitCore.runClasses(Empty.class).getFailures()
 [L 85] JUnitCore.runClasses(Empty.class).getFailures().get(0)
 [L 85] JUnitCore.runClasses(Empty.class).getFailures().get(0).getMessage()
 [L 83] assertEquals("Custom runner class BadRunner should have a public constructor with signature BadRunner(Class testClass)", JUnitCore.runClasses(Empty.class).getFailures().get(0).getMessage())

/src/test/java/org/junit/tests/running/classes/ParentRunnerFilteringTest.java
=============================================================================
 [L 35] description.getMethodName()
 [L 36] description.getMethodName()
 [L 36] description.getMethodName().equals(methodName)
 [L 51] countMap.get(description)
 [L 55] countMap.put(description, count + 1)
 [L 53] countMap.put(description, 1)
 [L 66] countMap.containsKey(desc)
 [L 68] countMap.keySet()
 [L 70] countMap.get(desc)
 [L 88] Request.aClass(ExampleSuite.class)
 [L 88] Request.aClass(ExampleSuite.class).getRunner()
 [L 89] notThisMethodName("test1")
 [L 91] filter.apply(runner)
 [L 95] fail("Expected 'NoTestsRemainException' due to complete filtering")
 [L 108] super.getChildren()
 [L 108] Collections.unmodifiableList(super.getChildren())
 [L 119] Request.aClass(ExampleSuiteWithUnmodifyableChildList.class)
 [L 119] Request.aClass(ExampleSuiteWithUnmodifyableChildList.class).getRunner()
 [L 121] notThisMethodName("test1")
 [L 123] filter.apply(runner)
 [L 127] fail("Expected 'NoTestsRemainException' due to complete filtering")
 [L 132] Request.aClass(ExampleSuite.class)
 [L 133] notThisMethodName("test1")
 [L 133] request.filterWith(notThisMethodName("test1"))
 [L 134] testResult(requestFiltered)
 [L 135] hasSingleFailureContaining("don't run method name: test1")
 [L 134] assertThat(testResult(requestFiltered), hasSingleFailureContaining("don't run method name: test1"))
 [L 141] Request.aClass(ExampleTest.class)
 [L 143] request.filterWith(countingFilter)
 [L 144] junitCore.run(requestFiltered)
 [L 145] result.getRunCount()
 [L 145] assertEquals(1, result.getRunCount())
 [L 146] result.getFailureCount()
 [L 146] assertEquals(0, result.getFailureCount())
 [L 148] createTestDescription(ExampleTest.class, "test1")
 [L 149] countingFilter.getCount(desc)
 [L 149] assertEquals(1, countingFilter.getCount(desc))
 [L 158] Request.aClass(suiteClazz)
 [L 160] request.filterWith(countingFilter)
 [L 161] junitCore.run(requestFiltered)
 [L 162] result.getRunCount()
 [L 162] assertEquals(1, result.getRunCount())
 [L 163] result.getFailureCount()
 [L 163] assertEquals(0, result.getFailureCount())
 [L 165] createSuiteDescription(clazz)
 [L 166] countingFilter.getCount(suiteDesc)
 [L 166] assertEquals(1, countingFilter.getCount(suiteDesc))
 [L 168] createTestDescription(ExampleTest.class, "test1")
 [L 169] countingFilter.getCount(desc)
 [L 169] assertEquals(1, countingFilter.getCount(desc))

/src/test/java/org/junit/tests/running/classes/EnclosedTest.java
================================================================
 [L 40] Request.aClass(Enclosing.class)
 [L 40] Request.aClass(Enclosing.class).getRunner()
 [L 41] runner.testCount()
 [L 41] assertEquals(5, runner.testCount())
 [L 46] JUnitCore.runClasses(Enclosing.class)
 [L 47] result.getRunCount()
 [L 47] assertEquals(5, result.getRunCount())
 [L 52] Enclosing.class.getName()
 [L 52] Request.aClass(Enclosing.class)
 [L 52] Request.aClass(Enclosing.class).getRunner()
 [L 52] Request.aClass(Enclosing.class).getRunner().getDescription()
 [L 52] Request.aClass(Enclosing.class).getRunner().getDescription().getDisplayName()
 [L 52] assertEquals(Enclosing.class.getName(), Request.aClass(Enclosing.class).getRunner().getDescription().getDisplayName())

/src/test/java/org/junit/tests/running/classes/SuiteTest.java
=============================================================
 [L 35] Assert.fail()
 [L 50] core.run(All.class)
 [L 51] result.getRunCount()
 [L 51] assertEquals(2, result.getRunCount())
 [L 52] result.getFailureCount()
 [L 52] assertEquals(1, result.getFailureCount())
 [L 58] core.run(InheritsAll.class)
 [L 59] result.getRunCount()
 [L 59] assertEquals(2, result.getRunCount())
 [L 60] result.getFailureCount()
 [L 60] assertEquals(1, result.getFailureCount())
 [L 65] Request.aClass(All.class)
 [L 65] Request.aClass(All.class).getRunner()
 [L 66] runner.testCount()
 [L 66] assertEquals(2, runner.testCount())
 [L 73] test.run(result)
 [L 74] result.runCount()
 [L 74] assertEquals(2, result.runCount())
 [L 80] adapter.getTests()
 [L 81] tests.size()
 [L 81] assertEquals(2, tests.size())
 [L 87] adapter.countTestCases()
 [L 87] assertEquals(2, adapter.countTestCases())
 [L 110] JUnitCore.runClasses(AllWithBeforeAndAfterClass.class)
 [L 111] assertEquals("before after ", log)
 [L 120] JUnitCore.runClasses(AllWithOutAnnotation.class)
 [L 121] result.getFailureCount()
 [L 121] assertEquals(1, result.getFailureCount())
 [L 124] AllWithOutAnnotation.class.getName()
 [L 122] String.format("class '%s' must have a SuiteClasses annotation", AllWithOutAnnotation.class.getName())
 [L 125] result.getFailures()
 [L 125] result.getFailures().get(0)
 [L 125] result.getFailures().get(0).getMessage()
 [L 125] assertEquals(expected, result.getFailures().get(0).getMessage())
 [L 135] JUnitCore.runClasses(InfiniteLoop.class)
 [L 136] result.getFailureCount()
 [L 136] assertEquals(1, result.getFailureCount())
 [L 146] JUnitCore.runClasses(BiInfiniteLoop.class)
 [L 147] result.getFailureCount()
 [L 147] assertEquals(2, result.getFailureCount())
 [L 166] JUnitCore.runClasses(Hydra.class)
 [L 167] result.getFailureCount()
 [L 167] assertEquals(2, result.getFailureCount())
 [L 180] JUnitCore.runClasses(WithoutDefaultConstructor.class)
 [L 181] result.wasSuccessful()
 [L 181] assertTrue(result.wasSuccessful())
 [L 190] testResult(NoSuiteClassesAnnotation.class)
 [L 190] hasSingleFailureContaining("SuiteClasses")
 [L 190] assertThat(testResult(NoSuiteClassesAnnotation.class), hasSingleFailureContaining("SuiteClasses"))

/src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java
====================================================================
 [L 54] childStatement.run()
 [L 51] runner.setScheduler(new RunnerScheduler() {

    public void schedule(Runnable childStatement) {
        log += "before ";
        childStatement.run();
        log += "after ";
    }

    public void finished() {
        log += "afterAll ";
    }
})
 [L 63] runner.run(new RunNotifier())
 [L 64] assertEquals("before apple after before banana after afterAll ", log)
 [L 70] Request.aClass(ExampleTest.class)
 [L 71] request.filterWith(new Exclude("test1"))
 [L 72] requestFiltered.filterWith(new Exclude("test2"))
 [L 74] junitCore.run(requestFilteredFiltered)
 [L 75] result.getFailures()
 [L 75] isEmpty()
 [L 75] assertThat(result.getFailures(), isEmpty())
 [L 76] result.getRunCount()
 [L 76] assertEquals(1, result.getRunCount())
 [L 82] description.appendText("is empty")
 [L 87] item.size()
 [L 101] description.getMethodName()
 [L 101] description.getMethodName().equals(methodName)
 [L 126] assertClassHasFailureMessage(TestWithProtectedClassRule.class, "The @ClassRule 'temporaryFolder' must be public.")
 [L 132] assertClassHasFailureMessage(TestWithNonStaticClassRule.class, "The @ClassRule 'temporaryFolder' must be static.")
 [L 143] assertClassHasFailureMessage(NonPublicTestClass.class, "The class org.junit.tests.running.classes.ParentRunnerTest$NonPublicTestClass is not public.")
 [L 150] Request.aClass(klass)
 [L 151] junitCore.run(request)
 [L 152] result.getFailureCount()
 [L 152] is(2)
 [L 152] assertThat(result.getFailureCount(), is(2))
 [L 153] result.getFailures()
 [L 153] result.getFailures().get(0)
 [L 153] result.getFailures().get(0).getMessage()
 [L 154] equalTo(message)
 [L 154] is(equalTo(message))
 [L 153] assertThat(result.getFailures().get(0).getMessage(), is(equalTo(message)))
 [L 169] runTestWithParentRunner(AssertionErrorAtParentLevelTest.class)
 [L 170] Assert.assertEquals(0, countingRunListener.testStarted)
 [L 171] Assert.assertEquals(0, countingRunListener.testFinished)
 [L 172] Assert.assertEquals(1, countingRunListener.testFailure)
 [L 173] Assert.assertEquals(0, countingRunListener.testAssumptionFailure)
 [L 174] Assert.assertEquals(0, countingRunListener.testIgnored)
 [L 190] runTestWithParentRunner(AssumptionViolatedAtParentLevelTest.class)
 [L 191] Assert.assertEquals(0, countingRunListener.testStarted)
 [L 192] Assert.assertEquals(0, countingRunListener.testFinished)
 [L 193] Assert.assertEquals(0, countingRunListener.testFailure)
 [L 194] Assert.assertEquals(1, countingRunListener.testAssumptionFailure)
 [L 195] Assert.assertEquals(0, countingRunListener.testIgnored)
 [L 220] runTestWithParentRunner(TestTest.class)
 [L 221] Assert.assertEquals(3, countingRunListener.testStarted)
 [L 222] Assert.assertEquals(3, countingRunListener.testFinished)
 [L 223] Assert.assertEquals(1, countingRunListener.testFailure)
 [L 224] Assert.assertEquals(1, countingRunListener.testAssumptionFailure)
 [L 225] Assert.assertEquals(1, countingRunListener.testIgnored)
 [L 231] runNotifier.addListener(listener)
 [L 233] runner.run(runNotifier)

/src/test/java/org/junit/tests/running/classes/ParameterizedTestTest.java
=========================================================================
 [L 39] Arrays.asList(new Object[][] { { 0, 0, 0 }, { 1, 1, 2 }, { 3, 2, 5 }, { 4, 3, 7 } })
 [L 57] assertEquals(sum, firstSummand + secondSummand)
 [L 63] JUnitCore.runClasses(AdditionTest.class)
 [L 64] result.getRunCount()
 [L 64] assertEquals(4, result.getRunCount())
 [L 69] Request.aClass(AdditionTest.class)
 [L 69] Request.aClass(AdditionTest.class).getRunner()
 [L 70] runner.testCount()
 [L 70] assertEquals(4, runner.testCount())
 [L 75] Request.aClass(AdditionTest.class)
 [L 75] Request.aClass(AdditionTest.class).getRunner()
 [L 76] runner.getDescription()
 [L 77] description.getChildren()
 [L 77] description.getChildren().get(2)
 [L 77] description.getChildren().get(2).getDisplayName()
 [L 77] assertEquals("[2: 3 + 2 = 5]", description.getChildren().get(2).getDisplayName())
 [L 85] Arrays.asList(1, 2, 3)
 [L 93] fail()
 [L 99] JUnitCore.runClasses(ThreeFailures.class)
 [L 100] result.getFailureCount()
 [L 100] assertEquals(3, result.getFailureCount())
 [L 105] JUnitCore.runClasses(ThreeFailures.class)
 [L 107] ThreeFailures.class.getName()
 [L 108] result.getFailures()
 [L 108] result.getFailures().get(0)
 [L 108] result.getFailures().get(0).getTestHeader()
 [L 106] assertEquals("testSomething[0: x=1](" + ThreeFailures.class.getName() + ")", result.getFailures().get(0).getTestHeader())
 [L 115] Arrays.asList(new Object[][] { { 3 }, { 3 } })
 [L 128] Request.aClass(ParameterizedWithoutSpecialTestname.class)
 [L 128] Request.aClass(ParameterizedWithoutSpecialTestname.class).getRunner()
 [L 130] runner.getDescription()
 [L 131] description.getChildren()
 [L 131] description.getChildren().get(1)
 [L 131] description.getChildren().get(1).getDisplayName()
 [L 131] assertEquals("[1]", description.getChildren().get(1).getDisplayName())
 [L 138] Arrays.asList(new Object[][] { { 0, 0, 0 }, { 1, 1, 2 }, { 3, 2, 5 }, { 4, 3, 7 } })
 [L 153] assertEquals(sum, firstSummand + secondSummand)
 [L 159] JUnitCore.runClasses(AdditionTestWithAnnotatedFields.class)
 [L 160] result.getRunCount()
 [L 160] assertEquals(4, result.getRunCount())
 [L 161] result.getFailureCount()
 [L 161] assertEquals(0, result.getFailureCount())
 [L 168] Arrays.asList(new Object[][] { { 0 } })
 [L 178] fib(fInput)
 [L 178] assertEquals(fExpected, fib(fInput))
 [L 188] JUnitCore.runClasses(BadIndexForAnnotatedFieldTest.class)
 [L 189] result.getFailureCount()
 [L 189] assertEquals(2, result.getFailureCount())
 [L 190] result.getFailures()
 [L 192] failures.get(0)
 [L 192] failures.get(0).getException()
 [L 192] failures.get(0).getException().getMessage()
 [L 191] assertEquals("Invalid @Parameter value: 2. @Parameter fields counted: 1. Please use an index between 0 and 0.", failures.get(0).getException().getMessage())
 [L 193] failures.get(1)
 [L 193] failures.get(1).getException()
 [L 193] failures.get(1).getException().getMessage()
 [L 193] assertEquals("@Parameter(0) is never used.", failures.get(1).getException().getMessage())
 [L 200] Arrays.asList(new Object[][] { { 0, 0 } })
 [L 210] fib(fInput)
 [L 210] assertEquals(fExpected, fib(fInput))
 [L 220] JUnitCore.runClasses(BadNumberOfAnnotatedFieldTest.class)
 [L 221] result.getFailureCount()
 [L 221] assertEquals(1, result.getFailureCount())
 [L 222] result.getFailures()
 [L 223] failures.get(0)
 [L 223] failures.get(0).getException()
 [L 223] failures.get(0).getException().getMessage()
 [L 223] failures.get(0).getException().getMessage().contains("Wrong number of parameters and @Parameter fields. @Parameter fields counted: 1, available parameters: 2.")
 [L 223] assertTrue(failures.get(0).getException().getMessage().contains("Wrong number of parameters and @Parameter fields. @Parameter fields counted: 1, available parameters: 2."))
 [L 246] Arrays.asList(new Object[][] { { 3 } })
 [L 257] JUnitCore.runClasses(BeforeAndAfter.class)
 [L 258] assertEquals("before after ", fLog)
 [L 276] JUnitCore.runClasses(EmptyTest.class)
 [L 277] result.getFailureCount()
 [L 277] assertEquals(1, result.getFailureCount())
 [L 289] Collections.singletonList(new Object[] { 1 })
 [L 295] JUnitCore.runClasses(IncorrectTest.class)
 [L 296] result.getFailureCount()
 [L 296] assertEquals(1, result.getFailureCount())
 [L 303] Collections.emptyList()
 [L 315] ProtectedParametersTest.class.getName()
 [L 313] assertTestCreatesSingleFailureWithMessage(ProtectedParametersTest.class, "No public static parameters method on class " + ProtectedParametersTest.class.getName())
 [L 333] testResult(ParametersNotIterable.class)
 [L 333] testResult(ParametersNotIterable.class).toString()
 [L 334] containsString("ParametersNotIterable.data() must return an Iterable of arrays.")
 [L 332] assertThat(testResult(ParametersNotIterable.class).toString(), containsString("ParametersNotIterable.data() must return an Iterable of arrays."))
 [L 345] Arrays.asList(new Object[][] { { 3 } })
 [L 377] assertEquals(sum, firstSummand + secondSummand)
 [L 383] JUnitCore.runClasses(AdditionTestWithArray.class)
 [L 384] result.getRunCount()
 [L 384] assertEquals(4, result.getRunCount())
 [L 404] JUnitCore.runClasses(SingleArgumentTestWithArray.class)
 [L 405] result.getRunCount()
 [L 405] assertEquals(2, result.getRunCount())
 [L 412] asList("first test", "second test")
 [L 425] JUnitCore.runClasses(SingleArgumentTestWithIterable.class)
 [L 427] result.getRunCount()
 [L 427] assertEquals(2, result.getRunCount())
 [L 444] asList("single test")
 [L 457] assertTestCreatesSingleFailureWithMessage(TestWithUseParametersRunnerFactoryAnnotation.class, "Called ExceptionThrowingRunnerFactory.")
 [L 463] JUnitCore.runClasses(test)
 [L 464] result.getFailures()
 [L 464] result.getFailures().size()
 [L 464] assertEquals(1, result.getFailures().size())
 [L 465] result.getFailures()
 [L 465] result.getFailures().get(0)
 [L 465] result.getFailures().get(0).getMessage()
 [L 465] assertEquals(message, result.getFailures().get(0).getMessage())
 [L 473] asList("single test")
 [L 491] assertTestCreatesSingleFailureWithMessage(UseParameterizedFactoryTest.class, "Called ExceptionThrowingRunnerFactory.")

/src/test/java/org/junit/tests/running/classes/IgnoreClassTest.java
===================================================================
 [L 16] fail()
 [L 21] fail()
 [L 27] JUnitCore.runClasses(IgnoreMe.class)
 [L 28] result.getFailureCount()
 [L 28] assertEquals(0, result.getFailureCount())
 [L 29] result.getIgnoreCount()
 [L 29] assertEquals(1, result.getIgnoreCount())

/src/test/java/org/junit/tests/running/classes/ClassLevelMethodsWithIgnoredTestsTest.java
=========================================================================================
 [L 34] fail(FAILURE_MESSAGE)
 [L 40] fail("test() should not run")
 [L 46] runClassAndVerifyNoFailures(BeforeClassWithIgnoredTest.class, "BeforeClass should not have been executed because the test method is ignored!")
 [L 54] fail(FAILURE_MESSAGE)
 [L 59] fail("test() should not run")
 [L 65] runClassAndVerifyNoFailures(BeforeClassWithIgnoredClass.class, "BeforeClass should not have been executed because the whole test class is ignored!")
 [L 74] fail("test() should not run")
 [L 79] fail(FAILURE_MESSAGE)
 [L 85] runClassAndVerifyNoFailures(AfterClassWithIgnoredTest.class, "AfterClass should not have been executed because the test method is ignored!")
 [L 95] fail(FAILURE_MESSAGE)
 [L 101] fail("test() should not run")
 [L 116] CategoryFilter.exclude(FilteredTests.class)
 [L 114] Request.classes(BeforeClassWithFilteredTest.class, HasUnfilteredTest.class)
 [L 114] Request.classes(BeforeClassWithFilteredTest.class, HasUnfilteredTest.class).filterWith(CategoryFilter.exclude(FilteredTests.class))
 [L 114] new JUnitCore().run(Request.classes(BeforeClassWithFilteredTest.class, HasUnfilteredTest.class).filterWith(CategoryFilter.exclude(FilteredTests.class)))
 [L 117] analyseResult(result, "BeforeClass should not have been executed because the test method is filtered!")
 [L 135] fail("test() should not be run")
 [L 141] runClassAndVerifyNoFailures(ClassRuleWithIgnoredTest.class, "The class rule should have been applied because the test method is ignored!")
 [L 147] JUnitCore.runClasses(klass)
 [L 148] analyseResult(result, testFailureDescription)
 [L 152] result.getFailures()
 [L 153] failures.isEmpty()
 [L 154] failures.get(0)
 [L 154] analyzeFailure(failures.get(0), testFailureDescription)
 [L 159] failure.getMessage()
 [L 160] FAILURE_MESSAGE.equals(actualFailureMsg)
 [L 161] fail(testFailureDescription)
 [L 163] fail("Unexpected failure : " + actualFailureMsg)

/src/test/java/org/junit/tests/experimental/parallel/ParallelMethodTest.java
============================================================================
 [L 34] fSynchronizer.countDown()
 [L 35] fSynchronizer.await(TIMEOUT, TimeUnit.SECONDS)
 [L 35] assertTrue(fSynchronizer.await(TIMEOUT, TimeUnit.SECONDS))
 [L 36] Thread.currentThread()
 [L 41] fSynchronizer.countDown()
 [L 42] fSynchronizer.await(TIMEOUT, TimeUnit.SECONDS)
 [L 42] assertTrue(fSynchronizer.await(TIMEOUT, TimeUnit.SECONDS))
 [L 43] Thread.currentThread()
 [L 55] ParallelComputer.methods()
 [L 55] JUnitCore.runClasses(ParallelComputer.methods(), Example.class)
 [L 56] result.wasSuccessful()
 [L 56] assertTrue(result.wasSuccessful())
 [L 57] assertNotNull(fOne)
 [L 58] assertNotNull(fTwo)
 [L 59] not(fTwo)
 [L 59] is(not(fTwo))
 [L 59] assertThat(fOne, is(not(fTwo)))

/src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java
===========================================================================
 [L 29] fSynchronizer.countDown()
 [L 30] fSynchronizer.await(TIMEOUT, TimeUnit.SECONDS)
 [L 30] assertTrue(fSynchronizer.await(TIMEOUT, TimeUnit.SECONDS))
 [L 31] Thread.currentThread()
 [L 36] fSynchronizer.countDown()
 [L 37] fSynchronizer.await(TIMEOUT, TimeUnit.SECONDS)
 [L 37] assertTrue(fSynchronizer.await(TIMEOUT, TimeUnit.SECONDS))
 [L 38] Thread.currentThread()
 [L 45] fSynchronizer.countDown()
 [L 46] fSynchronizer.await(TIMEOUT, TimeUnit.SECONDS)
 [L 46] assertTrue(fSynchronizer.await(TIMEOUT, TimeUnit.SECONDS))
 [L 47] Thread.currentThread()
 [L 52] fSynchronizer.countDown()
 [L 53] fSynchronizer.await(TIMEOUT, TimeUnit.SECONDS)
 [L 53] assertTrue(fSynchronizer.await(TIMEOUT, TimeUnit.SECONDS))
 [L 54] Thread.currentThread()
 [L 69] ParallelComputer.classes()
 [L 69] JUnitCore.runClasses(ParallelComputer.classes(), Example1.class, Example2.class)
 [L 70] result.wasSuccessful()
 [L 70] assertTrue(result.wasSuccessful())
 [L 71] assertNotNull(fExample1One)
 [L 72] assertNotNull(fExample1Two)
 [L 73] assertNotNull(fExample2One)
 [L 74] assertNotNull(fExample2Two)
 [L 75] is(fExample1Two)
 [L 75] assertThat(fExample1One, is(fExample1Two))
 [L 76] is(fExample2Two)
 [L 76] assertThat(fExample2One, is(fExample2Two))
 [L 77] not(fExample2One)
 [L 77] is(not(fExample2One))
 [L 77] assertThat(fExample1One, is(not(fExample2One)))

/src/test/java/org/junit/tests/experimental/ExperimentalTests.java
==================================================================

/src/test/java/org/junit/tests/experimental/AssumptionTest.java
===============================================================
 [L 34] is(4)
 [L 34] assumeThat(3, is(4))
 [L 35] fail()
 [L 41] JUnitCore.runClasses(HasFailingAssumption.class)
 [L 42] result.getRunCount()
 [L 42] is(1)
 [L 42] assertThat(result.getRunCount(), is(1))
 [L 43] result.getIgnoreCount()
 [L 43] is(0)
 [L 43] assertThat(result.getIgnoreCount(), is(0))
 [L 44] result.getFailureCount()
 [L 44] is(0)
 [L 44] assertThat(result.getFailureCount(), is(0))
 [L 53] core.addListener(new RunListener() {

    @Override
    public void testAssumptionFailure(Failure failure) {
        assumptionFailures++;
    }
})
 [L 59] core.run(HasFailingAssumption.class)
 [L 61] is(1)
 [L 61] assertThat(assumptionFailures, is(1))
 [L 67] is(3)
 [L 67] assumeThat(3, is(3))
 [L 68] fail()
 [L 74] JUnitCore.runClasses(HasPassingAssumption.class)
 [L 75] result.getRunCount()
 [L 75] is(1)
 [L 75] assertThat(result.getRunCount(), is(1))
 [L 76] result.getIgnoreCount()
 [L 76] is(0)
 [L 76] assertThat(result.getIgnoreCount(), is(0))
 [L 77] result.getFailureCount()
 [L 77] is(1)
 [L 77] assertThat(result.getFailureCount(), is(1))
 [L 82] is(2)
 [L 82] assumeThat(1, is(2))
 [L 87] is(1)
 [L 87] assumeThat(1, is(1))
 [L 88] assertCompletesNormally()
 [L 93] is("x")
 [L 93] assumeThat("x", is("x"))
 [L 94] assertCompletesNormally()
 [L 100] assumeNotNull(objects)
 [L 106] assumeNotNull(objects)
 [L 107] assertCompletesNormally()
 [L 116] e.getMessage()
 [L 116] containsString("1, 2, null")
 [L 116] assertThat(e.getMessage(), containsString("1, 2, null"))
 [L 118] fail("Should have thrown AssumptionViolatedException")
 [L 114] assumeNotNull(objects)
 [L 129] e.getCause()
 [L 129] is(exception)
 [L 129] assertThat(e.getCause(), is(exception))
 [L 126] assumeNoException(exception)
 [L 127] fail("Should have thrown exception")
 [L 138] Assume.assumeTrue(false)
 [L 144] assumeTrue(false)
 [L 149] fail()
 [L 155] testResult(HasFailingAssumeInBefore.class)
 [L 155] isSuccessful()
 [L 155] assertThat(testResult(HasFailingAssumeInBefore.class), isSuccessful())
 [L 161] assumeTrue(false)
 [L 166] fail()
 [L 172] testResult(HasFailingAssumeInBeforeClass.class)
 [L 172] isSuccessful()
 [L 172] assertThat(testResult(HasFailingAssumeInBeforeClass.class), isSuccessful())
 [L 177] assumeTrue(false)
 [L 182] fail()
 [L 188] testResult(AssumptionFailureInConstructor.class)
 [L 188] isSuccessful()
 [L 188] assertThat(testResult(AssumptionFailureInConstructor.class), isSuccessful())
 [L 193] assumeTrue(false)
 [L 205] assumeTrue(message, false)
 [L 212] runAndGetAssumptionFailures(HasAssumeWithMessage.class)
 [L 214] failures.get(0)
 [L 214] failures.get(0).getMessage()
 [L 214] failures.get(0).getMessage().contains(message)
 [L 214] assertTrue(failures.get(0).getMessage().contains(message))
 [L 223] assumeNoException(message, e)
 [L 230] runAndGetAssumptionFailures(HasAssumeWithMessageAndCause.class)
 [L 231] failures.get(0)
 [L 231] failures.get(0).getMessage()
 [L 231] failures.get(0).getMessage().contains(message)
 [L 231] assertTrue(failures.get(0).getMessage().contains(message))
 [L 232] failures.get(0)
 [L 232] failures.get(0).getException()
 [L 232] failures.get(0).getException().getCause()
 [L 232] assertSame(failures.get(0).getException().getCause(), e)
 [L 238] is(4)
 [L 238] assumeThat(message, 3, is(4))
 [L 239] fail()
 [L 246] runAndGetAssumptionFailures(HasFailingAssumptionWithMessage.class)
 [L 248] failures.size()
 [L 248] assertEquals(failures.size(), 1)
 [L 249] failures.get(0)
 [L 249] failures.get(0).getMessage()
 [L 249] failures.get(0).getMessage().contains(message)
 [L 249] assertTrue(failures.get(0).getMessage().contains(message))
 [L 262] failures.add(failure)
 [L 259] core.addListener(new RunListener() {

    @Override
    public void testAssumptionFailure(Failure failure) {
        failures.add(failure);
    }
})
 [L 265] core.run(clazz)

/src/test/java/org/junit/tests/experimental/theories/ParameterSignatureTest.java
================================================================================
 [L 27] ParameterSignatureTest.class.getMethod("getType", Method.class, int.class)
 [L 39] method.getParameterTypes()
 [L 39] assumeTrue(index < method.getParameterTypes().length)
 [L 40] method.getParameterTypes()
 [L 40] ParameterSignature.signatures(method)
 [L 40] ParameterSignature.signatures(method).get(index)
 [L 40] ParameterSignature.signatures(method).get(index).getType()
 [L 40] assertEquals(method.getParameterTypes()[index], ParameterSignature.signatures(method).get(index).getType())
 [L 50] getClass()
 [L 50] getClass().getMethod("foo", int.class)
 [L 51] ParameterSignature.signatures(method)
 [L 51] ParameterSignature.signatures(method).get(0)
 [L 51] ParameterSignature.signatures(method).get(0).getAnnotations()
 [L 54] isA(TestedOn.class)
 [L 54] CoreMatchers.<TestedOn>hasItem(isA(TestedOn.class))
 [L 53] assertThat(annotations, CoreMatchers.<TestedOn>hasItem(isA(TestedOn.class)))
 [L 69] getClass()
 [L 69] getClass().getMethod("integerMethod", Integer.class)
 [L 68] ParameterSignature.signatures(getClass().getMethod("integerMethod", Integer.class))
 [L 70] signatures.get(0)
 [L 72] integerSignature.canAcceptType(int.class)
 [L 72] assertTrue(integerSignature.canAcceptType(int.class))
 [L 78] getClass()
 [L 78] getClass().getMethod("numberMethod", Number.class)
 [L 77] ParameterSignature.signatures(getClass().getMethod("numberMethod", Number.class))
 [L 79] signatures.get(0)
 [L 81] numberSignature.canAcceptType(int.class)
 [L 81] assertTrue(numberSignature.canAcceptType(int.class))
 [L 87] getClass()
 [L 87] getClass().getMethod("intMethod", int.class)
 [L 86] ParameterSignature.signatures(getClass().getMethod("intMethod", int.class))
 [L 88] signatures.get(0)
 [L 90] intSignature.canAcceptType(Integer.class)
 [L 90] assertTrue(intSignature.canAcceptType(Integer.class))

/src/test/java/org/junit/tests/experimental/theories/PotentialAssignmentTest.java
=================================================================================
 [L 20] PotentialAssignment.forValue(name, value)
 [L 22] assignment.getDescription()
 [L 22] assertEquals("\"string value\" <from stringDatapoint>", assignment.getDescription())
 [L 30] PotentialAssignment.forValue(name, value)
 [L 32] assignment.getDescription()
 [L 32] assertEquals("null <from nullDatapoint>", assignment.getDescription())
 [L 45] PotentialAssignment.forValue(name, value)
 [L 47] assignment.getDescription()
 [L 47] assertEquals("[toString() threw RuntimeException: Oh no!] <from explodingValue>", assignment.getDescription())
 [L 53] PotentialAssignment.forValue("name", value)
 [L 54] assignment.getValue()
 [L 54] assertEquals(value, assignment.getValue())

/src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
============================================================================================
 [L 23] getTestClass()
 [L 35] super.handleAssumptionViolation(e)
 [L 37] queue.update(e)
 [L 44] createGuesserQueue(incomplete)
 [L 45] queues.add(guessers)
 [L 47] guessers.remove(0)
 [L 47] incomplete.assignNext(guessers.remove(0))
 [L 47] runWithAssignment(incomplete.assignNext(guessers.remove(0)))
 [L 46] guessers.isEmpty()
 [L 48] queues.remove(guessers)
 [L 53] incomplete.nextUnassigned()
 [L 55] nextUnassigned.hasAnnotation(Stub.class)
 [L 57] nextUnassigned.getType()
 [L 57] queue.add(new Guesser<Object>(nextUnassigned.getType()))
 [L 61] incomplete.potentialsForNextUnassigned()
 [L 61] GuesserQueue.forSingleValues(incomplete.potentialsForNextUnassigned())

/src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/Stub.java
=================================================================================

/src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StringableObject.java
=============================================================================================
 [L 13] isListableArray()
 [L 14] Arrays.asList((Object[]) obj)
 [L 21] obj.getClass()
 [L 22] type.isArray()
 [L 22] type.getComponentType()
 [L 22] type.getComponentType().isPrimitive()
 [L 27] stringableObject()
 [L 27] stringableObject().toString()

/src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/ReguessableValue.java
=============================================================================================

/src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheoriesTest.java
================================================================================================
 [L 13] correspondent.getAnswer("What is five?", "four", "five")
 [L 14] is("five")
 [L 13] assumeThat(correspondent.getAnswer("What is five?", "four", "five"), is("five"))

/src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/Guesser.java
====================================================================================
 [L 31] entry.getValue()
 [L 31] entry.getValue().equals(oldValue)
 [L 32] entry.setValue(newValue)
 [L 30] newGuesses.entrySet()
 [L 39] returnType.equals(String.class)
 [L 40] new Random().nextInt()
 [L 42] returnType.equals(Integer.class)
 [L 43] returnType.equals(int.class)
 [L 44] new Random().nextInt()
 [L 50] containsKey(call)
 [L 51] call.getReturnType()
 [L 51] generateGuess(call.getReturnType())
 [L 51] put(call, generateGuess(call.getReturnType()))
 [L 53] get(call)
 [L 58] getGuess(new MethodCall(method, args))
 [L 77] getClass()
 [L 77] getClass().getClassLoader()
 [L 78] getType()
 [L 77] Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] { getType() }, guesses)
 [L 94] noteValue(value)
 [L 95] super.appendValue(value)
 [L 105] guesses.replaceGuess(expected, value)
 [L 106] getType()
 [L 106] returnThis.add(new Guesser<T>(getType(), newGuesses))
 [L 84] e.describeTo(new BaseDescription() {

    @Override
    protected void append(char arg0) {
    }

    boolean expectedSeen = false;

    Object expected = null;

    @Override
    public Description appendValue(Object value) {
        noteValue(value);
        return super.appendValue(value);
    }

    private void noteValue(Object value) {
        if (!expectedSeen) {
            expected = value;
            expectedSeen = true;
            return;
        }
        GuessMap newGuesses = guesses.replaceGuess(expected, value);
        returnThis.add(new Guesser<T>(getType(), newGuesses));
    }
})
 [L 114] getProxy()

/src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/Correspondent.java
==========================================================================================

/src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/GuesserQueue.java
=========================================================================================
 [L 20] Collections.emptyList()
 [L 25] delegate.getValue()
 [L 30] delegate.getDescription()
 [L 38] returnThis.add(new GuesserQueue.ReguessableDecorator(potentialParameterValue))
 [L 49] lastRemoved.reguesses(e)
 [L 49] addAll(lastRemoved.reguesses(e))
 [L 55] super.remove(index)

/src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/MethodCall.java
=======================================================================================
 [L 20] call.method.equals(method)
 [L 20] Arrays.deepEquals(call.args, args)
 [L 29] method.getReturnType()
 [L 34] method.getName()
 [L 34] argListString()
 [L 34] String.format("%s(%s)", method.getName(), argListString())
 [L 41] argList()
 [L 41] argList().toString()
 [L 41] argList().toString().length()
 [L 41] argList()
 [L 41] argList().toString()
 [L 41] argList().toString().substring(1, argList().toString().length() - 1)
 [L 47] list.add(new StringableObject(arg))
 [L 53] new StringableObject(arg).stringableObject()

/src/test/java/org/junit/tests/experimental/theories/runner/WithParameterSupplier.java
======================================================================================
 [L 26] ExpectedException.none()
 [L 48] Arrays.asList("qwe", "asd")
 [L 57] assignments.add(new SimplePotentialAssignment(datapoint, datapoint))
 [L 77] TestClassUsingParameterSupplier.class.getMethod("theoryMethod", String.class)
 [L 77] potentialAssignments(TestClassUsingParameterSupplier.class.getMethod("theoryMethod", String.class))
 [L 80] assignments.size()
 [L 80] assertEquals(2, assignments.size())
 [L 81] DATAPOINTS.get(0)
 [L 81] assignments.get(0)
 [L 81] assignments.get(0).getValue()
 [L 81] assertEquals(DATAPOINTS.get(0), assignments.get(0).getValue())
 [L 82] DATAPOINTS.get(1)
 [L 82] assignments.get(1)
 [L 82] assignments.get(1).getValue()
 [L 82] assertEquals(DATAPOINTS.get(1), assignments.get(1).getValue())
 [L 108] expected.expect(InitializationError.class)
 [L 135] expected.expect(InitializationError.class)

/src/test/java/org/junit/tests/experimental/theories/runner/WithDataPointMethod.java
====================================================================================
 [L 41] testResult(HasDataPointMethod.class)
 [L 41] isSuccessful()
 [L 41] assertThat(testResult(HasDataPointMethod.class), isSuccessful())
 [L 59] first.size()
 [L 59] is(0)
 [L 59] assertThat(first.size(), is(0))
 [L 60] first.add("a")
 [L 66] failures(DataPointMethodReturnsMutableObject.class)
 [L 66] empty()
 [L 66] assertThat(failures(DataPointMethodReturnsMutableObject.class), empty())
 [L 96] HasDateMethod.class.getMethod("onlyStringsOk", String.class)
 [L 95] potentialAssignments(HasDateMethod.class.getMethod("onlyStringsOk", String.class))
 [L 95] potentialAssignments(HasDateMethod.class.getMethod("onlyStringsOk", String.class)).toString()
 [L 97] containsString("100")
 [L 97] not(containsString("100"))
 [L 95] assertThat(potentialAssignments(HasDateMethod.class.getMethod("onlyStringsOk", String.class)).toString(), not(containsString("100")))
 [L 103] HasDateMethod.class.getMethod("onlyDatesOk", Date.class)
 [L 102] potentialAssignments(HasDateMethod.class.getMethod("onlyDatesOk", Date.class))
 [L 102] potentialAssignments(HasDateMethod.class.getMethod("onlyDatesOk", Date.class)).size()
 [L 104] is(0)
 [L 102] assertThat(potentialAssignments(HasDateMethod.class.getMethod("onlyDatesOk", Date.class)).size(), is(0))
 [L 108] JUnitCore.runClasses(type)
 [L 108] JUnitCore.runClasses(type).getFailures()
 [L 112] nullValue(Failure.class)
 [L 112] everyItem(nullValue(Failure.class))

/src/test/java/org/junit/tests/experimental/theories/runner/UnsuccessfulWithDataPointFields.java
================================================================================================
 [L 29] is(0)
 [L 29] assertThat(x, is(0))
 [L 35] new Theories(HasAFailingTheory.class).getDescription()
 [L 35] new Theories(HasAFailingTheory.class).getDescription().getChildren()
 [L 35] new Theories(HasAFailingTheory.class).getDescription().getChildren().size()
 [L 36] is(1)
 [L 35] assertThat(new Theories(HasAFailingTheory.class).getDescription().getChildren().size(), is(1))
 [L 41] new TestClass(HasAFailingTheory.class).getAnnotatedMethods(Theory.class)
 [L 41] new TestClass(HasAFailingTheory.class).getAnnotatedMethods(Theory.class).size()
 [L 42] is(1)
 [L 41] assertThat(new TestClass(HasAFailingTheory.class).getAnnotatedMethods(Theory.class).size(), is(1))
 [L 47] testResult(HasAFailingTheory.class)
 [L 48] hasSingleFailureContaining("Expected")
 [L 47] assertThat(testResult(HasAFailingTheory.class), hasSingleFailureContaining("Expected"))
 [L 58] is(3)
 [L 58] assertThat(2, is(3))
 [L 64] testResult(DoesntUseParams.class)
 [L 65] hasSingleFailureContaining("everythingIsZero(\"1\" <from ONE>, \"1\" <from ONE>)")
 [L 64] assertThat(testResult(DoesntUseParams.class), hasSingleFailureContaining("everythingIsZero(\"1\" <from ONE>, \"1\" <from ONE>)"))
 [L 78] is("A")
 [L 78] assertThat(a, is("A"))
 [L 84] testResult(NullsOK.class)
 [L 85] hasSingleFailureContaining("null")
 [L 84] assertThat(testResult(NullsOK.class), hasSingleFailureContaining("null"))
 [L 102] testResult(TheoriesMustBePublic.class)
 [L 103] hasSingleFailureContaining("public")
 [L 101] assertThat(testResult(TheoriesMustBePublic.class), hasSingleFailureContaining("public"))
 [L 123] testResult(DataPointFieldsMustBeStatic.class)
 [L 128] hasFailureContaining("DataPoint field FOURS must be static")
 [L 126] hasFailureContaining("DataPoint field THREE must be static")
 [L 124] failureCountIs(2)
 [L 124] CoreMatchers.<PrintableResult>both(failureCountIs(2))
 [L 124] CoreMatchers.<PrintableResult>both(failureCountIs(2)).and(hasFailureContaining("DataPoint field THREE must be static"))
 [L 124] CoreMatchers.<PrintableResult>both(failureCountIs(2)).and(hasFailureContaining("DataPoint field THREE must be static")).and(hasFailureContaining("DataPoint field FOURS must be static"))
 [L 122] assertThat(testResult(DataPointFieldsMustBeStatic.class), CoreMatchers.<PrintableResult>both(failureCountIs(2)).and(hasFailureContaining("DataPoint field THREE must be static")).and(hasFailureContaining("DataPoint field FOURS must be static")))
 [L 152] testResult(DataPointMethodsMustBeStatic.class)
 [L 157] hasFailureContaining("DataPoint method dataPointArrayMethod must be static")
 [L 155] hasFailureContaining("DataPoint method singleDataPointMethod must be static")
 [L 153] failureCountIs(2)
 [L 153] CoreMatchers.<PrintableResult>both(failureCountIs(2))
 [L 153] CoreMatchers.<PrintableResult>both(failureCountIs(2)).and(hasFailureContaining("DataPoint method singleDataPointMethod must be static"))
 [L 153] CoreMatchers.<PrintableResult>both(failureCountIs(2)).and(hasFailureContaining("DataPoint method singleDataPointMethod must be static")).and(hasFailureContaining("DataPoint method dataPointArrayMethod must be static"))
 [L 151] assertThat(testResult(DataPointMethodsMustBeStatic.class), CoreMatchers.<PrintableResult>both(failureCountIs(2)).and(hasFailureContaining("DataPoint method singleDataPointMethod must be static")).and(hasFailureContaining("DataPoint method dataPointArrayMethod must be static")))
 [L 188] testResult(DataPointFieldsMustBePublic.class)
 [L 189] result.failureCount()
 [L 189] assertEquals(6, result.failureCount())
 [L 192] hasFailureContaining("DataPoint field THREE must be public")
 [L 193] hasFailureContaining("DataPoint field THREES must be public")
 [L 194] hasFailureContaining("DataPoint field FOUR must be public")
 [L 195] hasFailureContaining("DataPoint field FOURS must be public")
 [L 196] hasFailureContaining("DataPoint field FIVE must be public")
 [L 197] hasFailureContaining("DataPoint field FIVES must be public")
 [L 192] allOf(hasFailureContaining("DataPoint field THREE must be public"), hasFailureContaining("DataPoint field THREES must be public"), hasFailureContaining("DataPoint field FOUR must be public"), hasFailureContaining("DataPoint field FOURS must be public"), hasFailureContaining("DataPoint field FIVE must be public"), hasFailureContaining("DataPoint field FIVES must be public"))
 [L 191] assertThat(result, allOf(hasFailureContaining("DataPoint field THREE must be public"), hasFailureContaining("DataPoint field THREES must be public"), hasFailureContaining("DataPoint field FOUR must be public"), hasFailureContaining("DataPoint field FOURS must be public"), hasFailureContaining("DataPoint field FIVE must be public"), hasFailureContaining("DataPoint field FIVES must be public")))
 [L 240] testResult(DataPointMethodsMustBePublic.class)
 [L 241] result.failureCount()
 [L 241] assertEquals(6, result.failureCount())
 [L 244] hasFailureContaining("DataPoint method three must be public")
 [L 245] hasFailureContaining("DataPoint method threes must be public")
 [L 246] hasFailureContaining("DataPoint method four must be public")
 [L 247] hasFailureContaining("DataPoint method fours must be public")
 [L 248] hasFailureContaining("DataPoint method five must be public")
 [L 249] hasFailureContaining("DataPoint method fives must be public")
 [L 244] allOf(hasFailureContaining("DataPoint method three must be public"), hasFailureContaining("DataPoint method threes must be public"), hasFailureContaining("DataPoint method four must be public"), hasFailureContaining("DataPoint method fours must be public"), hasFailureContaining("DataPoint method five must be public"), hasFailureContaining("DataPoint method fives must be public"))
 [L 243] assertThat(result, allOf(hasFailureContaining("DataPoint method three must be public"), hasFailureContaining("DataPoint method threes must be public"), hasFailureContaining("DataPoint method four must be public"), hasFailureContaining("DataPoint method fours must be public"), hasFailureContaining("DataPoint method five must be public"), hasFailureContaining("DataPoint method fives must be public")))

/src/test/java/org/junit/tests/experimental/theories/runner/WithOnlyTestAnnotations.java
========================================================================================
 [L 29] testResult(HonorExpectedException.class)
 [L 29] testResult(HonorExpectedException.class).failureCount()
 [L 29] is(1)
 [L 29] assertThat(testResult(HonorExpectedException.class).failureCount(), is(1))
 [L 42] testResult(HonorExpectedExceptionPasses.class)
 [L 42] isSuccessful()
 [L 42] assertThat(testResult(HonorExpectedExceptionPasses.class), isSuccessful())
 [L 51] Thread.sleep(1000)
 [L 61] testResult(HonorTimeout.class)
 [L 61] failureCountIs(1)
 [L 61] assertThat(testResult(HonorTimeout.class), failureCountIs(1))
 [L 77] core.run(ErrorWhenTestHasParametersDespiteTheories.class)
 [L 78] result.getFailureCount()
 [L 78] assertEquals(1, result.getFailureCount())
 [L 79] result.getFailures()
 [L 79] result.getFailures().get(0)
 [L 79] result.getFailures().get(0).getMessage()
 [L 80] containsString("should have no parameters")
 [L 80] assertThat(message, containsString("should have no parameters"))

/src/test/java/org/junit/tests/experimental/theories/runner/WithExtendedParameterSources.java
=============================================================================================
 [L 26] is(1)
 [L 26] assertThat(number, is(1))
 [L 32] testResult(ParameterAnnotations.class)
 [L 32] ResultMatchers.isSuccessful()
 [L 32] assertThat(testResult(ParameterAnnotations.class), ResultMatchers.isSuccessful())
 [L 47] notNullValue()
 [L 47] assertThat(s, notNullValue())
 [L 53] testResult(ShouldFilterOutNullSingleDataPoints.class)
 [L 53] isSuccessful()
 [L 53] assertThat(testResult(ShouldFilterOutNullSingleDataPoints.class), isSuccessful())
 [L 63] notNullValue()
 [L 63] assertThat(s, notNullValue())
 [L 69] testResult(ShouldFilterOutNullElementsFromDataPointArrays.class)
 [L 69] isSuccessful()
 [L 69] assertThat(testResult(ShouldFilterOutNullElementsFromDataPointArrays.class), isSuccessful())
 [L 84] testResult(ShouldRejectTheoriesWithOnlyDisallowedNullData.class)
 [L 84] isSuccessful()
 [L 84] not(isSuccessful())
 [L 84] assertThat(testResult(ShouldRejectTheoriesWithOnlyDisallowedNullData.class), not(isSuccessful()))
 [L 103] JUnitCore.runClasses(DataPointArrays.class)
 [L 104] is("AB")
 [L 104] assertThat(DataPointArrays.log, is("AB"))
 [L 127] JUnitCore.runClasses(DataPointArrayMethod.class)
 [L 128] is("AB")
 [L 128] assertThat(DataPointArrayMethod.log, is("AB"))
 [L 161] JUnitCore.runClasses(DataPointArrayMethod.class)
 [L 162] is("AB")
 [L 162] assertThat(DataPointArrayMethod.log, is("AB"))
 [L 181] JUnitCore.runClasses(DataPointArrayToBeUsedForWholeParameter.class)
 [L 182] is("A")
 [L 182] assertThat(DataPointArrayToBeUsedForWholeParameter.log, is("A"))

/src/test/java/org/junit/tests/experimental/theories/runner/WhenNoParametersMatch.java
======================================================================================
 [L 23] not(0)
 [L 23] is(1)
 [L 35] assumeThat(x, MATCHER)
 [L 42] not(matcher)
 [L 42] assumeThat(data, not(matcher))
 [L 46] testResult(AssumptionsFail.class)
 [L 46] testResult(AssumptionsFail.class).toString()
 [L 48] matcher.toString()
 [L 48] containsString(matcher.toString())
 [L 48] assertThat(result, containsString(matcher.toString()))
 [L 49] containsString("" + data)
 [L 49] assertThat(result, containsString("" + data))

/src/test/java/org/junit/tests/experimental/theories/runner/WithUnresolvedGenericTypeVariablesOnTheoryParms.java
================================================================================================================
 [L 26] testResult(TypeVariableOnTheoryOnly.class)
 [L 27] isSuccessful()
 [L 27] assertThat(result, isSuccessful())
 [L 33] Arrays.asList("foo", "bar")
 [L 42] testResult(TypeVariableOnTheoryParm.class)
 [L 43] hasSingleFailureContaining("unresolved type variable T")
 [L 43] assertThat(result, hasSingleFailureContaining("unresolved type variable T"))
 [L 58] testResult(TypeVariableOnParameterizedTheoryParm.class)
 [L 59] hasSingleFailureContaining("unresolved type variable T")
 [L 59] assertThat(result, hasSingleFailureContaining("unresolved type variable T"))
 [L 65] Arrays.asList("foo", "bar")
 [L 74] testResult(TypeVariableOnWildcardUpperBoundOnTheoryParm.class)
 [L 75] hasSingleFailureContaining("unresolved type variable U")
 [L 75] assertThat(result, hasSingleFailureContaining("unresolved type variable U"))
 [L 81] Arrays.asList("foo", "bar")
 [L 90] testResult(TypeVariableOnWildcardLowerBoundOnTheoryParm.class)
 [L 91] hasSingleFailureContaining("unresolved type variable V")
 [L 91] assertThat(result, hasSingleFailureContaining("unresolved type variable V"))
 [L 97] Arrays.asList("foo", "bar")
 [L 106] testResult(TypeVariableOnArrayTypeOnTheoryParm.class)
 [L 107] hasSingleFailureContaining("unresolved type variable T")
 [L 107] assertThat(result, hasSingleFailureContaining("unresolved type variable T"))
 [L 124] testResult(TypeVariableOnComponentOfArrayTypeOnTheoryParm.class)
 [L 125] hasSingleFailureContaining("unresolved type variable U")
 [L 125] assertThat(result, hasSingleFailureContaining("unresolved type variable U"))
 [L 133] Arrays.asList("foo")
 [L 134] Arrays.asList("bar")
 [L 145] testResult(TypeVariableOnTheoryClass.class)
 [L 146] hasSingleFailureContaining("unresolved type variable T")
 [L 146] assertThat(result, hasSingleFailureContaining("unresolved type variable T"))
 [L 161] testResult(TypeVariablesAbound.class)
 [L 162] failureCountIs(7)
 [L 162] assertThat(result, failureCountIs(7))
 [L 163] hasFailureContaining("unresolved type variable A")
 [L 163] assertThat(result, hasFailureContaining("unresolved type variable A"))
 [L 164] hasFailureContaining("unresolved type variable B")
 [L 164] assertThat(result, hasFailureContaining("unresolved type variable B"))
 [L 165] hasFailureContaining("unresolved type variable C")
 [L 165] assertThat(result, hasFailureContaining("unresolved type variable C"))
 [L 166] hasFailureContaining("unresolved type variable D")
 [L 166] assertThat(result, hasFailureContaining("unresolved type variable D"))
 [L 167] hasFailureContaining("unresolved type variable E")
 [L 167] assertThat(result, hasFailureContaining("unresolved type variable E"))
 [L 168] hasFailureContaining("unresolved type variable F")
 [L 168] assertThat(result, hasFailureContaining("unresolved type variable F"))
 [L 169] hasFailureContaining("unresolved type variable G")
 [L 169] assertThat(result, hasFailureContaining("unresolved type variable G"))

/src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java
==============================================================================================
 [L 31] is(y)
 [L 31] assertThat(x, is(y))
 [L 49] assertTrue(befores == 1)
 [L 65] list.add(string)
 [L 66] list.size()
 [L 66] is(1)
 [L 66] assertThat(list.size(), is(1))
 [L 78] assumeTrue(x > 0)
 [L 84] assertTrue(x * x > 0)
 [L 98] assumeTrue(x > 0)
 [L 104] assertTrue(x > 0)
 [L 116] assumeTrue(x > 0)
 [L 122] assumeTrue(y > 0)
 [L 123] assertTrue(x * y > 0)
 [L 169] assertEquals(2, befores)
 [L 193] assertEquals(1, tests)
 [L 208] assertTrue(i == 0)

/src/test/java/org/junit/tests/experimental/theories/runner/FailingDataPointMethods.java
========================================================================================
 [L 33] testResult(HasWronglyIgnoredFailingSingleDataPointMethod.class)
 [L 33] isSuccessful()
 [L 33] not(isSuccessful())
 [L 33] assertThat(testResult(HasWronglyIgnoredFailingSingleDataPointMethod.class), not(isSuccessful()))
 [L 53] testResult(HasFailingDataPointArrayMethod.class)
 [L 53] isSuccessful()
 [L 53] not(isSuccessful())
 [L 53] assertThat(testResult(HasFailingDataPointArrayMethod.class), not(isSuccessful()))
 [L 73] testResult(HasIgnoredFailingSingleDataPointMethod.class)
 [L 73] isSuccessful()
 [L 73] assertThat(testResult(HasIgnoredFailingSingleDataPointMethod.class), isSuccessful())
 [L 93] testResult(HasIgnoredFailingMultipleDataPointMethod.class)
 [L 93] isSuccessful()
 [L 93] assertThat(testResult(HasIgnoredFailingMultipleDataPointMethod.class), isSuccessful())
 [L 113] testResult(HasWronglyIgnoredFailingSingleDataPointMethod.class)
 [L 113] isSuccessful()
 [L 113] not(isSuccessful())
 [L 113] assertThat(testResult(HasWronglyIgnoredFailingSingleDataPointMethod.class), not(isSuccessful()))
 [L 133] testResult(HasWronglyIgnoredFailingMultipleDataPointMethod.class)
 [L 133] isSuccessful()
 [L 133] not(isSuccessful())
 [L 133] assertThat(testResult(HasWronglyIgnoredFailingMultipleDataPointMethod.class), not(isSuccessful()))

/src/test/java/org/junit/tests/experimental/theories/runner/WithAutoGeneratedDataPoints.java
============================================================================================
 [L 27] ENUM.values()
 [L 28] TheoryTestClassWithAutogeneratedParameterValues.class.getMethod("theory", ENUM.class)
 [L 27] potentialAssignments(TheoryTestClassWithAutogeneratedParameterValues.class.getMethod("theory", ENUM.class))
 [L 27] potentialAssignments(TheoryTestClassWithAutogeneratedParameterValues.class.getMethod("theory", ENUM.class)).size()
 [L 27] assertEquals(ENUM.values().length, potentialAssignments(TheoryTestClassWithAutogeneratedParameterValues.class.getMethod("theory", ENUM.class)).size())
 [L 34] TheoryTestClassWithAutogeneratedParameterValues.class.getMethod("theory", boolean.class)
 [L 33] potentialAssignments(TheoryTestClassWithAutogeneratedParameterValues.class.getMethod("theory", boolean.class))
 [L 33] potentialAssignments(TheoryTestClassWithAutogeneratedParameterValues.class.getMethod("theory", boolean.class)).size()
 [L 33] assertEquals(2, potentialAssignments(TheoryTestClassWithAutogeneratedParameterValues.class.getMethod("theory", boolean.class)).size())
 [L 51] TheoryTestClassWithSpecificEnumDataPoint.class.getMethod("theory", ENUM.class)
 [L 50] potentialAssignments(TheoryTestClassWithSpecificEnumDataPoint.class.getMethod("theory", ENUM.class))
 [L 50] potentialAssignments(TheoryTestClassWithSpecificEnumDataPoint.class.getMethod("theory", ENUM.class)).size()
 [L 50] assertEquals(1, potentialAssignments(TheoryTestClassWithSpecificEnumDataPoint.class.getMethod("theory", ENUM.class)).size())
 [L 68] TheoryTestClassWithSpecificBooleanDataPoint.class.getMethod("theory", boolean.class)
 [L 67] potentialAssignments(TheoryTestClassWithSpecificBooleanDataPoint.class.getMethod("theory", boolean.class))
 [L 67] potentialAssignments(TheoryTestClassWithSpecificBooleanDataPoint.class.getMethod("theory", boolean.class)).size()
 [L 67] assertEquals(1, potentialAssignments(TheoryTestClassWithSpecificBooleanDataPoint.class.getMethod("theory", boolean.class)).size())

/src/test/java/org/junit/tests/experimental/theories/runner/TypeMatchingBetweenMultiDataPointsMethod.java
=========================================================================================================
 [L 33] testResult(WithWrongfullyTypedDataPointsMethod.class)
 [L 33] isSuccessful()
 [L 33] assertThat(testResult(WithWrongfullyTypedDataPointsMethod.class), isSuccessful())
 [L 55] testResult(WithCorrectlyTypedDataPointsMethod.class)
 [L 55] isSuccessful()
 [L 55] assertThat(testResult(WithCorrectlyTypedDataPointsMethod.class), isSuccessful())

/src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java
========================================================================================
 [L 35] assumeTrue(TESTING_PERFORMANCE)
 [L 36] testResult(UpToTen.class)
 [L 36] isSuccessful()
 [L 36] assertThat(testResult(UpToTen.class), isSuccessful())

/src/test/java/org/junit/tests/experimental/theories/runner/WithNamedDataPoints.java
====================================================================================
 [L 64] HasSpecificDatapointsParameters.class.getMethod("theory", String.class)
 [L 64] potentialAssignments(HasSpecificDatapointsParameters.class.getMethod("theory", String.class))
 [L 67] assignments.size()
 [L 67] assertEquals(5, assignments.size())
 [L 69] assignment.getValue()
 [L 69] containsString("expected")
 [L 69] assertThat((String) assignment.getValue(), containsString("expected"))

/src/test/java/org/junit/tests/experimental/theories/internal/SpecificDataPointsSupplierTest.java
=================================================================================================
 [L 62] signature("methodWantingAllNamedStrings")
 [L 62] supplier.getValueSources(signature("methodWantingAllNamedStrings"))
 [L 63] getStringValuesFromAssignments(assignments)
 [L 65] assignedStrings.size()
 [L 65] assertEquals(4, assignedStrings.size())
 [L 66] hasItems("named field", "named method", "named single value", "named single method value")
 [L 66] assertThat(assignedStrings, hasItems("named field", "named method", "named single value", "named single method value"))
 [L 73] signature("methodWantingNamedFieldString")
 [L 73] supplier.getValueSources(signature("methodWantingNamedFieldString"))
 [L 74] getStringValuesFromAssignments(assignments)
 [L 76] assignedStrings.size()
 [L 76] assertEquals(1, assignedStrings.size())
 [L 77] hasItem("named field")
 [L 77] assertThat(assignedStrings, hasItem("named field"))
 [L 84] signature("methodWantingNamedMethodString")
 [L 84] supplier.getValueSources(signature("methodWantingNamedMethodString"))
 [L 85] getStringValuesFromAssignments(assignments)
 [L 87] assignedStrings.size()
 [L 87] assertEquals(1, assignedStrings.size())
 [L 88] hasItem("named method")
 [L 88] assertThat(assignedStrings, hasItem("named method"))
 [L 95] signature("methodWantingNamedSingleFieldString")
 [L 95] supplier.getValueSources(signature("methodWantingNamedSingleFieldString"))
 [L 96] getStringValuesFromAssignments(assignments)
 [L 98] assignedStrings.size()
 [L 98] assertEquals(1, assignedStrings.size())
 [L 99] hasItem("named single value")
 [L 99] assertThat(assignedStrings, hasItem("named single value"))
 [L 106] signature("methodWantingNamedSingleMethodString")
 [L 106] supplier.getValueSources(signature("methodWantingNamedSingleMethodString"))
 [L 107] getStringValuesFromAssignments(assignments)
 [L 109] assignedStrings.size()
 [L 109] assertEquals(1, assignedStrings.size())
 [L 110] hasItem("named single method value")
 [L 110] assertThat(assignedStrings, hasItem("named single method value"))
 [L 117] signature("methodWantingWrongNamedString")
 [L 117] supplier.getValueSources(signature("methodWantingWrongNamedString"))
 [L 118] getStringValuesFromAssignments(assignments)
 [L 120] assignedStrings.size()
 [L 120] assertEquals(0, assignedStrings.size())
 [L 126] assignment.getValue()
 [L 126] stringValues.add((String) assignment.getValue())
 [L 132] this.getClass()
 [L 132] this.getClass().getMethod(methodName, String.class)
 [L 132] ParameterSignature.signatures(this.getClass().getMethod(methodName, String.class))
 [L 132] ParameterSignature.signatures(this.getClass().getMethod(methodName, String.class)).get(0)

/src/test/java/org/junit/tests/experimental/theories/internal/ParameterizedAssertionErrorTest.java
==================================================================================================
 [L 43] is(b)
 [L 43] assumeThat(a, is(b))
 [L 44] a.toString()
 [L 44] b.toString()
 [L 44] is(b.toString())
 [L 44] assertThat(a.toString(), is(b.toString()))
 [L 50] not(b)
 [L 50] assumeThat(a, not(b))
 [L 51] a.toString()
 [L 51] b.toString()
 [L 51] not(b.toString())
 [L 51] assertThat(a.toString(), not(b.toString()))
 [L 59] is(new ParameterizedAssertionError(targetException, methodName, params))
 [L 57] assertThat(new ParameterizedAssertionError(targetException, methodName, params), is(new ParameterizedAssertionError(targetException, methodName, params)))
 [L 69] is(two)
 [L 69] assumeThat(one, is(two))
 [L 71] one.hashCode()
 [L 71] two.hashCode()
 [L 71] is(two.hashCode())
 [L 71] assertThat(one.hashCode(), is(two.hashCode()))
 [L 76] new ParameterizedAssertionError(new RuntimeException(), methodName, param).toString()
 [L 78] containsString(methodName)
 [L 76] assertThat(new ParameterizedAssertionError(new RuntimeException(), methodName, param).toString(), containsString(methodName))
 [L 83] a.equals(null)
 [L 83] assertFalse(a.equals(null))
 [L 88] ParameterizedAssertionError.join(" ", new Object() {

    @Override
    public String toString() {
        throw new UnsupportedOperationException();
    }
})
 [L 93] is("[toString failed]")
 [L 88] assertThat(ParameterizedAssertionError.join(" ", new Object() {

    @Override
    public String toString() {
        throw new UnsupportedOperationException();
    }
}), is("[toString failed]"))

/src/test/java/org/junit/tests/experimental/theories/internal/AllMembersSupplierTest.java
=========================================================================================
 [L 25] ExpectedException.none()
 [L 39] HasDataPointsArrayField.class.getMethod("theory", String.class)
 [L 38] potentialAssignments(HasDataPointsArrayField.class.getMethod("theory", String.class))
 [L 41] assignments.size()
 [L 41] assertEquals(2, assignments.size())
 [L 56] HasDataPointsArrayWithMatchingButInaccurateTypes.class.getMethod("theory", Integer.class)
 [L 55] potentialAssignments(HasDataPointsArrayWithMatchingButInaccurateTypes.class.getMethod("theory", Integer.class))
 [L 58] assignments.size()
 [L 58] assertEquals(2, assignments.size())
 [L 75] HasDataPointMethodWithOverlyGeneralTypes.class.getMethod("theory", Object.class)
 [L 74] potentialAssignments(HasDataPointMethodWithOverlyGeneralTypes.class.getMethod("theory", Object.class))
 [L 77] assignments.size()
 [L 77] assertEquals(1, assignments.size())
 [L 92] HasDataPointsWithObjectParameter.class.getMethod("theory", Object.class)
 [L 91] potentialAssignments(HasDataPointsWithObjectParameter.class.getMethod("theory", Object.class))
 [L 94] assignments.size()
 [L 94] assertEquals(2, assignments.size())
 [L 96] assignment.getValue()
 [L 96] assertNotEquals(HasDataPointsWithObjectParameter.objectField, assignment.getValue())
 [L 110] allMemberValuesFor(HasDataPointsFieldWithNullValue.class, Object.class)
 [L 112] valueSources.size()
 [L 112] is(2)
 [L 112] assertThat(valueSources.size(), is(2))
 [L 127] allMemberValuesFor(HasDataPointsMethodWithNullValue.class, Integer.class)
 [L 129] valueSources.size()
 [L 129] is(2)
 [L 129] assertThat(valueSources.size(), is(2))
 [L 144] expected.expect(RuntimeException.class)
 [L 145] expected.expectMessage("failing method")
 [L 146] allMemberValuesFor(HasFailingDataPointsArrayMethod.class, Object.class)
 [L 153] testClass.getConstructor(constructorParameterTypes)
 [L 152] ParameterSignature.signatures(testClass.getConstructor(constructorParameterTypes))
 [L 152] ParameterSignature.signatures(testClass.getConstructor(constructorParameterTypes)).get(0)
 [L 151] new AllMembersSupplier(new TestClass(testClass)).getValueSources(ParameterSignature.signatures(testClass.getConstructor(constructorParameterTypes)).get(0))
 [L 159] Arrays.asList("one", "two")
 [L 169] HasDataPointsListField.class.getMethod("theory", String.class)
 [L 168] potentialAssignments(HasDataPointsListField.class.getMethod("theory", String.class))
 [L 171] assignments.size()
 [L 171] assertEquals(2, assignments.size())
 [L 177] Arrays.asList("one", "two")
 [L 188] HasDataPointsListMethod.class.getMethod("theory", String.class)
 [L 187] potentialAssignments(HasDataPointsListMethod.class.getMethod("theory", String.class))
 [L 190] assignments.size()
 [L 190] assertEquals(2, assignments.size())
 [L 195] Arrays.asList("string", new Object())
 [L 205] HasDataPointsListFieldWithOverlyGenericTypes.class.getMethod("theory", String.class)
 [L 204] potentialAssignments(HasDataPointsListFieldWithOverlyGenericTypes.class.getMethod("theory", String.class))
 [L 207] assignments.size()
 [L 207] assertEquals(1, assignments.size())

/src/test/java/org/junit/tests/experimental/theories/AssumingInTheoriesTest.java
================================================================================
 [L 19] Assume.assumeTrue(false)
 [L 24] runTheoryClass(TheoryWithNoUnassumedParameters.class)
 [L 25] result.getFailureCount()
 [L 25] Assert.assertEquals(1, result.getFailureCount())
 [L 38] Assume.assumeTrue(value)

/src/test/java/org/junit/tests/experimental/theories/TestedOnSupplierTest.java
==============================================================================
 [L 23] signatureOfFoo()
 [L 23] supplier.getValueSources(signatureOfFoo())
 [L 24] assignments.get(0)
 [L 24] assignments.get(0).getDescription()
 [L 24] is("\"1\" <from ints>")
 [L 24] assertThat(assignments.get(0).getDescription(), is("\"1\" <from ints>"))
 [L 28] getClass()
 [L 28] getClass().getMethod("foo", int.class)
 [L 29] ParameterSignature.signatures(method)
 [L 29] ParameterSignature.signatures(method).get(0)

/src/test/java/org/junit/tests/experimental/theories/TheoryTestUtils.java
=========================================================================
 [L 23] method.getDeclaringClass()
 [L 22] Assignments.allUnassigned(method, new TestClass(method.getDeclaringClass()))
 [L 22] Assignments.allUnassigned(method, new TestClass(method.getDeclaringClass())).potentialsForNextUnassigned()
 [L 29] Request.runner(theoryRunner)
 [L 30] new JUnitCore().run(request)

/src/test/java/org/junit/tests/experimental/max/DescriptionTest.java
====================================================================
 [L 21] Description.TEST_MECHANISM.getTestClass()
 [L 21] assertNull(Description.TEST_MECHANISM.getTestClass())
 [L 26] Description.TEST_MECHANISM.getMethodName()
 [L 26] assertNull(Description.TEST_MECHANISM.getMethodName())
 [L 31] Description.createSuiteDescription("")
 [L 36] Description.createSuiteDescription((String) null)
 [L 41] Description.createTestDescription(Description.class, "aTestMethod")
 [L 43] description.getClassName()
 [L 43] equalTo("org.junit.runner.Description")
 [L 43] assertThat(description.getClassName(), equalTo("org.junit.runner.Description"))
 [L 44] description.getMethodName()
 [L 44] equalTo("aTestMethod")
 [L 44] assertThat(description.getMethodName(), equalTo("aTestMethod"))
 [L 45] description.getAnnotations()
 [L 45] description.getAnnotations().size()
 [L 45] equalTo(0)
 [L 45] assertThat(description.getAnnotations().size(), equalTo(0))
 [L 51] DescriptionTest.class.getMethod("parseClassAndMethodWithAnnotations")
 [L 51] DescriptionTest.class.getMethod("parseClassAndMethodWithAnnotations").getDeclaredAnnotations()
 [L 53] Description.createTestDescription(Description.class, "aTestMethod", annotations)
 [L 55] description.getClassName()
 [L 55] equalTo("org.junit.runner.Description")
 [L 55] assertThat(description.getClassName(), equalTo("org.junit.runner.Description"))
 [L 56] description.getMethodName()
 [L 56] equalTo("aTestMethod")
 [L 56] assertThat(description.getMethodName(), equalTo("aTestMethod"))
 [L 57] description.getAnnotations()
 [L 57] description.getAnnotations().size()
 [L 57] equalTo(1)
 [L 57] assertThat(description.getAnnotations().size(), equalTo(1))
 [L 62] Description.createTestDescription("not a class name", "aTestMethod", 123)
 [L 64] description.getClassName()
 [L 64] equalTo("not a class name")
 [L 64] assertThat(description.getClassName(), equalTo("not a class name"))
 [L 65] description.getMethodName()
 [L 65] equalTo("aTestMethod")
 [L 65] assertThat(description.getMethodName(), equalTo("aTestMethod"))
 [L 66] description.getAnnotations()
 [L 66] description.getAnnotations().size()
 [L 66] equalTo(0)
 [L 66] assertThat(description.getAnnotations().size(), equalTo(0))
 [L 71] Description.createTestDescription("not a class name", "aTestMethod", 1)
 [L 72] Description.createTestDescription("not a class name", "aTestMethod", 2)
 [L 72] equalTo(Description.createTestDescription("not a class name", "aTestMethod", 2))
 [L 72] not(equalTo(Description.createTestDescription("not a class name", "aTestMethod", 2)))
 [L 71] assertThat(Description.createTestDescription("not a class name", "aTestMethod", 1), not(equalTo(Description.createTestDescription("not a class name", "aTestMethod", 2))))
 [L 84] super.findClass(name)
 [L 87] Sweet.class.getProtectionDomain()
 [L 87] Sweet.class.getProtectionDomain().getCodeSource()
 [L 87] Sweet.class.getProtectionDomain().getCodeSource().getLocation()
 [L 89] Sweet.class.getName()
 [L 89] loader.findClass(Sweet.class.getName())
 [L 90] clazz.getClassLoader()
 [L 90] assertEquals(loader, clazz.getClassLoader())
 [L 92] Description.createSuiteDescription(clazz)
 [L 93] d.getTestClass()
 [L 93] assertEquals(clazz, d.getTestClass())
 [L 94] d.getMethodName()
 [L 94] assertNull(d.getMethodName())
 [L 95] d.getAnnotations()
 [L 95] d.getAnnotations().size()
 [L 95] assertEquals(1, d.getAnnotations().size())
 [L 96] d.getAnnotations()
 [L 96] d.getAnnotations().iterator()
 [L 96] d.getAnnotations().iterator().next()
 [L 96] d.getAnnotations().iterator().next().annotationType()
 [L 96] assertEquals(Ignore.class, d.getAnnotations().iterator().next().annotationType())
 [L 98] Description.createTestDescription(clazz, "tessed")
 [L 99] d.getTestClass()
 [L 99] assertEquals(clazz, d.getTestClass())
 [L 100] d.getMethodName()
 [L 100] assertEquals("tessed", d.getMethodName())
 [L 101] d.getAnnotations()
 [L 101] d.getAnnotations().size()
 [L 101] assertEquals(0, d.getAnnotations().size())
 [L 103] clazz.getMethod("tessed")
 [L 103] clazz.getMethod("tessed").getAnnotations()
 [L 103] Description.createTestDescription(clazz, "tessed", clazz.getMethod("tessed").getAnnotations())
 [L 104] d.getTestClass()
 [L 104] assertEquals(clazz, d.getTestClass())
 [L 105] d.getMethodName()
 [L 105] assertEquals("tessed", d.getMethodName())
 [L 106] d.getAnnotations()
 [L 106] d.getAnnotations().size()
 [L 106] assertEquals(1, d.getAnnotations().size())
 [L 107] d.getAnnotations()
 [L 107] d.getAnnotations().iterator()
 [L 107] d.getAnnotations().iterator().next()
 [L 107] d.getAnnotations().iterator().next().annotationType()
 [L 107] assertEquals(Test.class, d.getAnnotations().iterator().next().annotationType())
 [L 109] d.childlessCopy()
 [L 110] d.getTestClass()
 [L 110] assertEquals(clazz, d.getTestClass())
 [L 111] d.getMethodName()
 [L 111] assertEquals("tessed", d.getMethodName())
 [L 112] d.getAnnotations()
 [L 112] d.getAnnotations().size()
 [L 112] assertEquals(1, d.getAnnotations().size())
 [L 113] d.getAnnotations()
 [L 113] d.getAnnotations().iterator()
 [L 113] d.getAnnotations().iterator().next()
 [L 113] d.getAnnotations().iterator().next().annotationType()
 [L 113] assertEquals(Test.class, d.getAnnotations().iterator().next().annotationType())

/src/test/java/org/junit/tests/experimental/max/JUnit38SortingTest.java
=======================================================================
 [L 23] fMaxFile.exists()
 [L 24] fMaxFile.delete()
 [L 26] MaxCore.storedLocally(fMaxFile)
 [L 31] fMaxFile.delete()
 [L 42] fail()
 [L 54] Request.classes(JUnit4Test.class, JUnit38Test.class)
 [L 55] fMax.run(request)
 [L 56] fMax.sortedLeavesForTest(request)
 [L 57] Description.createTestDescription(JUnit38Test.class, "testFails")
 [L 59] tests.get(0)
 [L 59] assertEquals(dontSucceed, tests.get(0))

/src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java
===================================================================
 [L 39] fMaxFile.exists()
 [L 40] fMaxFile.delete()
 [L 42] MaxCore.storedLocally(fMaxFile)
 [L 47] fMaxFile.delete()
 [L 57] fail()
 [L 63] Request.aClass(TwoTests.class)
 [L 64] fMax.sortedLeavesForTest(request)
 [L 65] Description.createTestDescription(TwoTests.class, "succeed")
 [L 67] Description.createTestDescription(TwoTests.class, "dontSucceed")
 [L 69] things.contains(succeed)
 [L 69] assertTrue(things.contains(succeed))
 [L 70] things.contains(dontSucceed)
 [L 70] assertTrue(things.contains(dontSucceed))
 [L 71] things.size()
 [L 71] assertEquals(2, things.size())
 [L 76] Request.method(TwoTests.class, "succeed")
 [L 77] fMax.run(one)
 [L 78] Request.aClass(TwoTests.class)
 [L 79] fMax.sortedLeavesForTest(two)
 [L 80] Description.createTestDescription(TwoTests.class, "dontSucceed")
 [L 82] things.get(0)
 [L 82] assertEquals(dontSucceed, things.get(0))
 [L 83] things.size()
 [L 83] assertEquals(2, things.size())
 [L 93] Request.method(TwoTests.class, "dontSucceed")
 [L 94] fMax.run(one)
 [L 95] Request.aClass(TwoTests.class)
 [L 96] fMax.sortedLeavesForTest(two)
 [L 97] Description.createTestDescription(TwoTests.class, "succeed")
 [L 99] things.get(0)
 [L 99] assertEquals(succeed, things.get(0))
 [L 100] things.size()
 [L 100] assertEquals(2, things.size())
 [L 105] Request.aClass(TwoTests.class)
 [L 106] fMax.run(request)
 [L 107] fMax.sortedLeavesForTest(request)
 [L 108] Description.createTestDescription(TwoTests.class, "dontSucceed")
 [L 110] tests.get(0)
 [L 110] assertEquals(dontSucceed, tests.get(0))
 [L 115] Computer.serial()
 [L 115] Request.classes(Computer.serial(), TwoTests.class, TwoTests.class)
 [L 117] fMax.run(request)
 [L 118] fMax.sortedLeavesForTest(request)
 [L 119] Description.createTestDescription(TwoTests.class, "dontSucceed")
 [L 121] tests.get(0)
 [L 121] assertEquals(dontSucceed, tests.get(0))
 [L 122] tests.get(1)
 [L 122] assertEquals(dontSucceed, tests.get(1))
 [L 128] Thread.sleep(100)
 [L 129] fail()
 [L 134] fail()
 [L 141] fMax.run(TwoUnEqualTests.class)
 [L 143] MaxCore.storedLocally(fMaxFile)
 [L 144] reincarnation.run(TwoUnEqualTests.class)
 [L 144] reincarnation.run(TwoUnEqualTests.class).getFailures()
 [L 146] failures.get(0)
 [L 146] failures.get(0).getDescription()
 [L 146] failures.get(0).getDescription().getMethodName()
 [L 146] assertEquals("fast", failures.get(0).getDescription().getMethodName())
 [L 147] failures.get(1)
 [L 147] failures.get(1).getDescription()
 [L 147] failures.get(1).getDescription().getMethodName()
 [L 147] assertEquals("slow", failures.get(1).getDescription().getMethodName())
 [L 152] Request.aClass(TwoUnEqualTests.class)
 [L 153] fMax.run(request)
 [L 154] fMax.sortedLeavesForTest(request)
 [L 154] fMax.sortedLeavesForTest(request).get(1)
 [L 155] Description.createTestDescription(TwoUnEqualTests.class, "slow")
 [L 155] assertEquals(Description.createTestDescription(TwoUnEqualTests.class, "slow"), thing)
 [L 167] result.getFailures()
 [L 167] failures.addAll(result.getFailures())
 [L 164] core.addListener(new RunListener() {

    @Override
    public void testRunFinished(Result result) throws Exception {
        failures.addAll(result.getFailures());
    }
})
 [L 170] Request.aClass(TwoTests.class)
 [L 170] fMax.run(Request.aClass(TwoTests.class), core)
 [L 171] failures.size()
 [L 171] assertEquals(1, failures.size())
 [L 177] Request.aClass(TwoTests.class)
 [L 177] fMax.run(Request.aClass(TwoTests.class))
 [L 178] result.getRunCount()
 [L 178] assertEquals(2, result.getRunCount())
 [L 191] Request.aClass(TwoOldTests.class)
 [L 191] fMax.run(Request.aClass(TwoOldTests.class), new JUnitCore())
 [L 193] result.getRunCount()
 [L 193] assertEquals(2, result.getRunCount())
 [L 198] Description.createTestDescription(TwoOldTests.class, "testOne")
 [L 200] Filter.matchMethodDescription(method)
 [L 202] child.filter(filter)
 [L 203] child.testCount()
 [L 203] assertEquals(1, child.testCount())
 [L 208] assertFilterLeavesTestUnscathed(AllTests.class)
 [L 212] Request.aClass(testClass)
 [L 213] oneClass.filterWith(new Filter() {

    @Override
    public boolean shouldRun(Description description) {
        return true;
    }

    @Override
    public String describe() {
        return "Everything";
    }
})
 [L 225] filtered.getRunner()
 [L 225] filtered.getRunner().testCount()
 [L 226] oneClass.getRunner()
 [L 226] oneClass.getRunner().testCount()
 [L 227] assertEquals("Counts match up in " + testClass, coreCount, filterCount)
 [L 241] Request.aClass(MalformedJUnit38Test.class)
 [L 242] fMax.run(request)
 [L 255] Request.aClass(MalformedJUnit38TestMethod.class)
 [L 257] fMax.sortRequest(request)
 [L 258] sorted.getRunner()
 [L 259] core.run(runner)
 [L 260] result.getFailures()
 [L 260] result.getFailures().get(0)
 [L 261] failure.toString()
 [L 261] containsString("MalformedJUnit38TestMethod")
 [L 261] assertThat(failure.toString(), containsString("MalformedJUnit38TestMethod"))
 [L 262] failure.toString()
 [L 262] containsString("testNothing")
 [L 262] assertThat(failure.toString(), containsString("testNothing"))
 [L 263] failure.toString()
 [L 263] containsString("isn't public")
 [L 263] assertThat(failure.toString(), containsString("isn't public"))
 [L 277] JUnitCore.runClasses(HalfMalformedJUnit38TestMethod.class)
 [L 277] JUnitCore.runClasses(HalfMalformedJUnit38TestMethod.class).getFailureCount()
 [L 278] is(1)
 [L 277] assertThat(JUnitCore.runClasses(HalfMalformedJUnit38TestMethod.class).getFailureCount(), is(1))
 [L 284] Request.aClass(HalfMalformedJUnit38TestMethod.class)
 [L 286] fMax.sortRequest(request)
 [L 287] sorted.getRunner()
 [L 288] core.run(runner)
 [L 289] result.getFailures()
 [L 289] result.getFailures().get(0)
 [L 290] failure.toString()
 [L 290] containsString("MalformedJUnit38TestMethod")
 [L 290] assertThat(failure.toString(), containsString("MalformedJUnit38TestMethod"))
 [L 291] failure.toString()
 [L 291] containsString("testNothing")
 [L 291] assertThat(failure.toString(), containsString("testNothing"))
 [L 292] failure.toString()
 [L 292] containsString("isn't public")
 [L 292] assertThat(failure.toString(), containsString("isn't public"))

/src/test/java/org/junit/tests/experimental/results/ResultMatchersTest.java
===========================================================================
 [L 14] ResultMatchers.failureCountIs(3)
 [L 14] ResultMatchers.failureCountIs(3).toString()
 [L 15] is("has 3 failures")
 [L 14] assertThat(ResultMatchers.failureCountIs(3).toString(), is("has 3 failures"))
 [L 20] ResultMatchers.failureCountIs(i)
 [L 20] ResultMatchers.failureCountIs(i).toString()
 [L 21] containsString("" + i)
 [L 20] assertThat(ResultMatchers.failureCountIs(i).toString(), containsString("" + i))

/src/test/java/org/junit/tests/experimental/results/PrintableResultTest.java
============================================================================
 [L 23] Description.createSuiteDescription(descriptionName)
 [L 34] asList(failure)
 [L 34] new PrintableResult(asList(failure)).toString()
 [L 35] containsString(descriptionName)
 [L 35] containsString(stackTraceClassName)
 [L 34] allOf(containsString(descriptionName), containsString(stackTraceClassName))
 [L 34] assertThat(new PrintableResult(asList(failure)).toString(), allOf(containsString(descriptionName), containsString(stackTraceClassName)))
 [L 44] Description.createSuiteDescription("firstName")
 [L 46] Description.createSuiteDescription("secondName")
 [L 43] Arrays.asList(new Failure(Description.createSuiteDescription("firstName"), new RuntimeException("firstException")), new Failure(Description.createSuiteDescription("secondName"), new RuntimeException(secondExceptionName)))
 [L 48] backtrace.toString()
 [L 48] containsString(secondExceptionName)
 [L 48] assertThat(backtrace.toString(), containsString(secondExceptionName))

/src/test/java/org/junit/tests/experimental/MatcherTest.java
============================================================
 [L 23] hasSingleFailureContaining("cheese")
 [L 26] hasFailureContaining("cheese")
 [L 30] failure("cheese")
 [L 30] failure("mustard")
 [L 30] Arrays.asList(failure("cheese"), failure("mustard"))
 [L 36] assumeThat(value, matcher1)
 [L 37] not(matcher2)
 [L 37] assumeThat(value, not(matcher2))
 [L 38] matcher1.toString()
 [L 38] matcher2.toString()
 [L 38] not(matcher2.toString())
 [L 38] assertThat(matcher1.toString(), not(matcher2.toString()))

/src/test/java/org/junit/tests/experimental/rules/ExternalResourceRuleTest.java
===============================================================================
 [L 42] testResult(UsesExternalResource.class)
 [L 42] isSuccessful()
 [L 42] assertThat(testResult(UsesExternalResource.class), isSuccessful())
 [L 43] assertEquals("before test after ", callSequence)

/src/test/java/org/junit/tests/experimental/rules/ClassRulesTest.java
=====================================================================
 [L 43] assertEquals(1, counter.count)
 [L 48] assertEquals(1, counter.count)
 [L 55] JUnitCore.runClasses(ExampleTestWithClassRule.class)
 [L 56] assertEquals(1, ExampleTestWithClassRule.counter.count)
 [L 67] JUnitCore.runClasses(SubclassOfTestWithClassRule.class)
 [L 68] assertEquals(1, ExampleTestWithClassRule.counter.count)
 [L 79] base.evaluate()
 [L 91] assertEquals(1, counter.count)
 [L 96] assertEquals(1, counter.count)
 [L 104] JUnitCore.runClasses(ExampleTestWithCustomClassRule.class)
 [L 105] result.wasSuccessful()
 [L 105] assertTrue(result.wasSuccessful())
 [L 106] assertEquals(1, ExampleTestWithCustomClassRule.counter.count)
 [L 122] orderList.add(name)
 [L 123] base.evaluate()
 [L 142] orderList.get(0)
 [L 142] assertEquals("orderField", orderList.get(0))
 [L 143] orderList.get(1)
 [L 143] assertEquals("orderMethod", orderList.get(1))
 [L 149] orderList.clear()
 [L 150] testResult(UsesFieldAndMethodRule.class)
 [L 150] isSuccessful()
 [L 150] assertThat(testResult(UsesFieldAndMethodRule.class), isSuccessful())
 [L 164] assertEquals(1, counter.count)
 [L 169] assertEquals(1, counter.count)
 [L 176] JUnitCore.runClasses(MethodExampleTestWithClassRule.class)
 [L 177] assertEquals(1, MethodExampleTestWithClassRule.counter.count)
 [L 188] JUnitCore.runClasses(MethodSubclassOfTestWithClassRule.class)
 [L 189] assertEquals(1, MethodExampleTestWithClassRule.counter.count)
 [L 202] assertEquals(1, counter.count)
 [L 207] assertEquals(1, counter.count)
 [L 215] JUnitCore.runClasses(MethodExampleTestWithCustomClassRule.class)
 [L 216] result.wasSuccessful()
 [L 216] assertTrue(result.wasSuccessful())
 [L 217] assertEquals(1, MethodExampleTestWithCustomClassRule.counter.count)
 [L 228] base.evaluate()
 [L 244] assertEquals(1, countOfMethodCalls)
 [L 251] JUnitCore.runClasses(CallMethodOnlyOnceRule.class)
 [L 251] JUnitCore.runClasses(CallMethodOnlyOnceRule.class).wasSuccessful()
 [L 251] assertTrue(JUnitCore.runClasses(CallMethodOnlyOnceRule.class).wasSuccessful())

/src/test/java/org/junit/tests/experimental/rules/TestWatcherTest.java
======================================================================
 [L 28] assumeTrue(false)
 [L 35] runClasses(ViolatedAssumptionTest.class)
 [L 36] ViolatedAssumptionTest.watchedLog.toString()
 [L 37] is("starting skipped finished ")
 [L 36] assertThat(ViolatedAssumptionTest.watchedLog.toString(), is("starting skipped finished "))
 [L 47] watchedLog.append("starting ")
 [L 52] watchedLog.append("finished ")
 [L 57] watchedLog.append("skipped ")
 [L 71] runClasses(InternalViolatedAssumptionTest.class)
 [L 72] InternalViolatedAssumptionTest.watchedLog.toString()
 [L 73] is("starting skipped finished ")
 [L 72] assertThat(InternalViolatedAssumptionTest.watchedLog.toString(), is("starting skipped finished "))
 [L 94] testResult(TestWatcherSkippedThrowsExceptionTest.class)
 [L 95] failureCountIs(2)
 [L 95] assertThat(result, failureCountIs(2))
 [L 96] hasFailureContaining("test failure")
 [L 96] assertThat(result, hasFailureContaining("test failure"))
 [L 97] hasFailureContaining("watcher failure")
 [L 97] assertThat(result, hasFailureContaining("watcher failure"))
 [L 108] fail()
 [L 115] runClasses(FailingTest.class)
 [L 116] FailingTest.watchedLog.toString()
 [L 117] is("starting failed finished ")
 [L 116] assertThat(FailingTest.watchedLog.toString(), is("starting failed finished "))
 [L 137] testResult(TestWatcherFailedThrowsExceptionTest.class)
 [L 138] failureCountIs(2)
 [L 138] assertThat(result, failureCountIs(2))
 [L 139] hasFailureContaining("test failure")
 [L 139] assertThat(result, hasFailureContaining("test failure"))
 [L 140] hasFailureContaining("watcher failure")
 [L 140] assertThat(result, hasFailureContaining("watcher failure"))
 [L 160] testResult(TestWatcherStartingThrowsExceptionTest.class)
 [L 161] failureCountIs(2)
 [L 161] assertThat(result, failureCountIs(2))
 [L 162] hasFailureContaining("test failure")
 [L 162] assertThat(result, hasFailureContaining("test failure"))
 [L 163] hasFailureContaining("watcher failure")
 [L 163] assertThat(result, hasFailureContaining("watcher failure"))
 [L 188] testResult(TestWatcherFailedAndFinishedThrowsExceptionTest.class)
 [L 189] failureCountIs(3)
 [L 189] assertThat(result, failureCountIs(3))
 [L 190] hasFailureContaining("test failure")
 [L 190] assertThat(result, hasFailureContaining("test failure"))
 [L 191] hasFailureContaining("watcher failed failure")
 [L 191] assertThat(result, hasFailureContaining("watcher failed failure"))
 [L 192] hasFailureContaining("watcher finished failure")
 [L 192] assertThat(result, hasFailureContaining("watcher finished failure"))

/src/test/java/org/junit/tests/experimental/rules/TimeoutRuleTest.java
======================================================================
 [L 41] logger.append("run1")
 [L 42] TimeoutRuleTest.run1Lock.lockInterruptibly()
 [L 43] TimeoutRuleTest.run1Lock.unlock()
 [L 48] logger.append("run2")
 [L 49] Thread.currentThread()
 [L 49] Thread.currentThread().join()
 [L 54] logger.append("run3")
 [L 55] wait()
 [L 60] logger.append("run4")
 [L 67] logger.append("run5")
 [L 70] tmpFile.newFile()
 [L 80] randomAccessFile.close()
 [L 74] randomAccessFile.getChannel()
 [L 75] rnd.nextBytes(data)
 [L 76] ByteBuffer.wrap(data)
 [L 78] channel.write(buffer)
 [L 82] tmp.delete()
 [L 88] logger.append("run6")
 [L 97] Timeout.millis(200)
 [L 119] run1Lock.lock()
 [L 126] run1Lock.unlock()
 [L 131] HasGlobalTimeUnitTimeout.logger.setLength(0)
 [L 132] JUnitCore.runClasses(HasGlobalTimeUnitTimeout.class)
 [L 133] result.getFailureCount()
 [L 133] assertEquals(6, result.getFailureCount())
 [L 134] HasGlobalTimeUnitTimeout.logger.toString()
 [L 134] containsString("run1")
 [L 134] assertThat(HasGlobalTimeUnitTimeout.logger.toString(), containsString("run1"))
 [L 135] HasGlobalTimeUnitTimeout.logger.toString()
 [L 135] containsString("run2")
 [L 135] assertThat(HasGlobalTimeUnitTimeout.logger.toString(), containsString("run2"))
 [L 136] HasGlobalTimeUnitTimeout.logger.toString()
 [L 136] containsString("run3")
 [L 136] assertThat(HasGlobalTimeUnitTimeout.logger.toString(), containsString("run3"))
 [L 137] HasGlobalTimeUnitTimeout.logger.toString()
 [L 137] containsString("run4")
 [L 137] assertThat(HasGlobalTimeUnitTimeout.logger.toString(), containsString("run4"))
 [L 138] HasGlobalTimeUnitTimeout.logger.toString()
 [L 138] containsString("run5")
 [L 138] assertThat(HasGlobalTimeUnitTimeout.logger.toString(), containsString("run5"))
 [L 139] HasGlobalTimeUnitTimeout.logger.toString()
 [L 139] containsString("run6")
 [L 139] assertThat(HasGlobalTimeUnitTimeout.logger.toString(), containsString("run6"))
 [L 144] HasGlobalLongTimeout.logger.setLength(0)
 [L 145] JUnitCore.runClasses(HasGlobalLongTimeout.class)
 [L 146] result.getFailureCount()
 [L 146] assertEquals(6, result.getFailureCount())
 [L 147] HasGlobalLongTimeout.logger.toString()
 [L 147] containsString("run1")
 [L 147] assertThat(HasGlobalLongTimeout.logger.toString(), containsString("run1"))
 [L 148] HasGlobalLongTimeout.logger.toString()
 [L 148] containsString("run2")
 [L 148] assertThat(HasGlobalLongTimeout.logger.toString(), containsString("run2"))
 [L 149] HasGlobalLongTimeout.logger.toString()
 [L 149] containsString("run3")
 [L 149] assertThat(HasGlobalLongTimeout.logger.toString(), containsString("run3"))
 [L 150] HasGlobalLongTimeout.logger.toString()
 [L 150] containsString("run4")
 [L 150] assertThat(HasGlobalLongTimeout.logger.toString(), containsString("run4"))
 [L 151] HasGlobalLongTimeout.logger.toString()
 [L 151] containsString("run5")
 [L 151] assertThat(HasGlobalLongTimeout.logger.toString(), containsString("run5"))
 [L 152] HasGlobalLongTimeout.logger.toString()
 [L 152] containsString("run6")
 [L 152] assertThat(HasGlobalLongTimeout.logger.toString(), containsString("run6"))
 [L 157] JUnitCore.runClasses(HasNullTimeUnit.class)
 [L 158] result.getFailureCount()
 [L 158] assertEquals(1, result.getFailureCount())
 [L 159] result.getFailures()
 [L 159] result.getFailures().get(0)
 [L 160] failure.getException()
 [L 160] failure.getException().getMessage()
 [L 161] containsString("Invalid parameters for Timeout")
 [L 160] assertThat(failure.getException().getMessage(), containsString("Invalid parameters for Timeout"))
 [L 162] failure.getException()
 [L 162] failure.getException().getCause()
 [L 163] cause.getMessage()
 [L 163] containsString("TimeUnit cannot be null")
 [L 163] assertThat(cause.getMessage(), containsString("TimeUnit cannot be null"))

/src/test/java/org/junit/tests/experimental/rules/RuleMemberValidatorTest.java
==============================================================================
 [L 28] CLASS_RULE_VALIDATOR.validate(target, errors)
 [L 29] assertOneErrorWithMessage("The @ClassRule 'temporaryFolder' must be public.")
 [L 40] CLASS_RULE_VALIDATOR.validate(target, errors)
 [L 41] assertOneErrorWithMessage("The @ClassRule 'temporaryFolder' must be static.")
 [L 52] CLASS_RULE_VALIDATOR.validate(target, errors)
 [L 53] assertNumberOfErrors(0)
 [L 65] CLASS_RULE_VALIDATOR.validate(target, errors)
 [L 66] assertOneErrorWithMessage("The @ClassRule 'temporaryFolder' must be declared in a public class.")
 [L 84] CLASS_RULE_VALIDATOR.validate(target, errors)
 [L 85] assertOneErrorWithMessage("The @ClassRule 'classRule' must implement TestRule.")
 [L 108] CLASS_RULE_METHOD_VALIDATOR.validate(target, errors)
 [L 109] assertOneErrorWithMessage("The @ClassRule 'methodRule' must return an implementation of TestRule.")
 [L 134] CLASS_RULE_VALIDATOR.validate(target, errors)
 [L 135] assertOneErrorWithMessage("The @ClassRule 'arbitraryObject' must implement TestRule.")
 [L 153] CLASS_RULE_METHOD_VALIDATOR.validate(target, errors)
 [L 154] assertOneErrorWithMessage("The @ClassRule 'arbitraryObject' must return an implementation of TestRule.")
 [L 167] RULE_VALIDATOR.validate(target, errors)
 [L 168] assertNumberOfErrors(0)
 [L 179] RULE_VALIDATOR.validate(target, errors)
 [L 180] assertOneErrorWithMessage("The @Rule 'temporaryFolder' must not be static or it must be annotated with @ClassRule.")
 [L 191] RULE_VALIDATOR.validate(target, errors)
 [L 192] assertOneErrorWithMessage("The @Rule 'someMethodRule' must not be static.")
 [L 203] RULE_VALIDATOR.validate(target, errors)
 [L 204] assertNumberOfErrors(0)
 [L 220] RULE_VALIDATOR.validate(target, errors)
 [L 221] assertOneErrorWithMessage("The @Rule 'arbitraryObject' must implement MethodRule or TestRule.")
 [L 232] CLASS_RULE_METHOD_VALIDATOR.validate(target, errors)
 [L 233] assertOneErrorWithMessage("The @ClassRule 'getTemporaryFolder' must be public.")
 [L 246] CLASS_RULE_METHOD_VALIDATOR.validate(target, errors)
 [L 247] assertOneErrorWithMessage("The @ClassRule 'getTemporaryFolder' must be static.")
 [L 260] CLASS_RULE_METHOD_VALIDATOR.validate(target, errors)
 [L 261] assertNumberOfErrors(0)
 [L 275] RULE_METHOD_VALIDATOR.validate(target, errors)
 [L 276] assertNumberOfErrors(0)
 [L 289] RULE_METHOD_VALIDATOR.validate(target, errors)
 [L 290] assertOneErrorWithMessage("The @Rule 'getTemporaryFolder' must not be static or it must be annotated with @ClassRule.")
 [L 303] RULE_METHOD_VALIDATOR.validate(target, errors)
 [L 304] assertOneErrorWithMessage("The @Rule 'getSomeMethodRule' must not be static.")
 [L 315] RULE_METHOD_VALIDATOR.validate(target, errors)
 [L 316] assertNumberOfErrors(0)
 [L 334] RULE_METHOD_VALIDATOR.validate(target, errors)
 [L 335] assertOneErrorWithMessage("The @Rule 'getArbitraryObject' must return an implementation of MethodRule or TestRule.")
 [L 346] assertNumberOfErrors(1)
 [L 347] errors.get(0)
 [L 347] errors.get(0).getMessage()
 [L 347] assertEquals("Wrong error message:", message, errors.get(0).getMessage())
 [L 351] errors.size()
 [L 351] assertEquals("Wrong number of errors:", numberOfErrors, errors.size())

/src/test/java/org/junit/tests/experimental/rules/TempFolderRuleTest.java
=========================================================================
 [L 31] folder.newFile("myfile.txt")
 [L 32] createdFiles[0].exists()
 [L 32] assertTrue(createdFiles[0].exists())
 [L 38] testResult(HasTempFolder.class)
 [L 38] isSuccessful()
 [L 38] assertThat(testResult(HasTempFolder.class), isSuccessful())
 [L 39] createdFiles[0].exists()
 [L 39] assertFalse(createdFiles[0].exists())
 [L 52] folder.getClass()
 [L 52] folder.getClass().getMethod("newFolder", new Class<?>[] { String.class })
 [L 53] method.invoke(folder, subfolder)
 [L 54] new File(createdFiles[0], filename).createNewFile()
 [L 56] folder.getRoot()
 [L 56] join(subfolder, filename)
 [L 58] expectedFile.exists()
 [L 58] assertTrue(expectedFile.exists())
 [L 66] folder.newFolder(subfolder)
 [L 67] new File(createdFiles[0], filename).createNewFile()
 [L 69] folder.getRoot()
 [L 69] join(subfolder, filename)
 [L 71] expectedFile.exists()
 [L 71] assertTrue(expectedFile.exists())
 [L 80] folder.newFolder(subfolder, anotherfolder)
 [L 81] new File(createdFiles[0], filename).createNewFile()
 [L 83] folder.getRoot()
 [L 83] join(subfolder, anotherfolder, filename)
 [L 85] expectedFile.exists()
 [L 85] assertTrue(expectedFile.exists())
 [L 91] path.append(File.separator)
 [L 91] path.append(File.separator).append(folderName)
 [L 93] path.toString()
 [L 99] testResult(CreatesSubFolder.class)
 [L 99] isSuccessful()
 [L 99] assertThat(testResult(CreatesSubFolder.class), isSuccessful())
 [L 100] createdFiles[0].exists()
 [L 100] assertFalse(createdFiles[0].exists())
 [L 110] folder.newFolder()
 [L 111] Arrays.asList(createdFiles)
 [L 111] hasItem(newFolder)
 [L 111] not(hasItem(newFolder))
 [L 111] assertThat(Arrays.asList(createdFiles), not(hasItem(newFolder)))
 [L 113] new File(newFolder, "a.txt").createNewFile()
 [L 114] newFolder.exists()
 [L 114] assertTrue(newFolder.exists())
 [L 121] testResult(CreatesRandomSubFolders.class)
 [L 121] isSuccessful()
 [L 121] assertThat(testResult(CreatesRandomSubFolders.class), isSuccessful())
 [L 123] f.exists()
 [L 123] assertFalse(f.exists())
 [L 134] folder.newFile()
 [L 135] Arrays.asList(createdFiles)
 [L 135] hasItem(newFile)
 [L 135] not(hasItem(newFile))
 [L 135] assertThat(Arrays.asList(createdFiles), not(hasItem(newFile)))
 [L 137] newFile.exists()
 [L 137] assertTrue(newFile.exists())
 [L 144] testResult(CreatesRandomFiles.class)
 [L 144] isSuccessful()
 [L 144] assertThat(testResult(CreatesRandomFiles.class), isSuccessful())
 [L 146] f.exists()
 [L 146] assertFalse(f.exists())
 [L 153] folder.create()
 [L 154] folder.newFile("a")
 [L 155] folder.delete()
 [L 156] file.exists()
 [L 156] assertFalse(file.exists())
 [L 157] folder.getRoot()
 [L 157] folder.getRoot().exists()
 [L 157] assertFalse(folder.getRoot().exists())
 [L 163] folder.create()
 [L 164] folder.newFile()
 [L 165] folder.delete()
 [L 166] file.exists()
 [L 166] assertFalse(file.exists())
 [L 167] folder.getRoot()
 [L 167] folder.getRoot().exists()
 [L 167] assertFalse(folder.getRoot().exists())
 [L 173] folder.create()
 [L 174] folder.delete()
 [L 175] folder.getRoot()
 [L 175] folder.getRoot().exists()
 [L 175] assertFalse(folder.getRoot().exists())
 [L 184] folder.newFile("something.txt")
 [L 185] folder.newFile("something.txt")
 [L 190] folder.newFolder("dummy")
 [L 191] folder.newFile("dummy")
 [L 197] testResult(NameClashes.class)
 [L 197] failureCountIs(2)
 [L 197] assertThat(testResult(NameClashes.class), failureCountIs(2))
 [L 211] folder.getRoot()
 [L 211] new File(folder.getRoot(), GET_ROOT_DUMMY).createNewFile()
 [L 216] folder.newFile(NEW_FILE_DUMMY)
 [L 221] folder.newFolder(NEW_FOLDER_DUMMY)
 [L 227] testResult(IncorrectUsage.class)
 [L 227] failureCountIs(3)
 [L 227] assertThat(testResult(IncorrectUsage.class), failureCountIs(3))
 [L 228] new File(GET_ROOT_DUMMY).exists()
 [L 228] assertFalse("getRoot should have failed early", new File(GET_ROOT_DUMMY).exists())
 [L 229] new File(NEW_FILE_DUMMY).exists()
 [L 229] assertFalse("newFile should have failed early", new File(NEW_FILE_DUMMY).exists())
 [L 230] new File(NEW_FOLDER_DUMMY).exists()
 [L 230] assertFalse("newFolder should have failed early", new File(NEW_FOLDER_DUMMY).exists())
 [L 235] new File(GET_ROOT_DUMMY).delete()
 [L 236] new File(NEW_FILE_DUMMY).delete()
 [L 237] new File(NEW_FOLDER_DUMMY).delete()

/src/test/java/org/junit/tests/experimental/rules/EventCollector.java
=====================================================================
 [L 18] hasNoFailure()
 [L 18] hasNoAssumptionFailure()
 [L 18] allOf(hasNoFailure(), hasNoAssumptionFailure())
 [L 26] item.fFailures.size()
 [L 30] description.appendText("has ")
 [L 31] description.appendValue(numberOfFailures)
 [L 32] description.appendText(" failures")
 [L 38] item.fFailures.size()
 [L 38] description.appendValue(item.fFailures.size())
 [L 39] description.appendText(" failures")
 [L 45] hasNumberOfFailures(1)
 [L 49] hasNumberOfFailures(0)
 [L 57] item.fAssumptionFailures.size()
 [L 61] description.appendText("has ")
 [L 62] description.appendValue(numberOfFailures)
 [L 63] description.appendText(" assumption failures")
 [L 69] hasNumberOfAssumptionFailures(1)
 [L 73] hasNumberOfAssumptionFailures(0)
 [L 77] equalTo(message)
 [L 77] hasSingleFailureWithMessage(equalTo(message))
 [L 85] hasSingleFailure()
 [L 85] hasSingleFailure().matches(item)
 [L 86] item.fFailures.get(0)
 [L 86] item.fFailures.get(0).getMessage()
 [L 86] messageMatcher.matches(item.fFailures.get(0).getMessage())
 [L 91] description.appendText("has single failure with message ")
 [L 92] messageMatcher.describeTo(description)
 [L 98] description.appendText("was ")
 [L 99] hasSingleFailure()
 [L 99] hasSingleFailure().describeMismatch(item, description)
 [L 100] description.appendText(": ")
 [L 104] description.appendText(" ,")
 [L 106] description.appendText("'")
 [L 107] f.getMessage()
 [L 107] description.appendText(f.getMessage())
 [L 108] description.appendText("'")
 [L 120] f.getException()
 [L 120] exceptionMatcher.matches(f.getException())
 [L 126] description.appendText("failure is ")
 [L 127] exceptionMatcher.describeTo(description)
 [L 148] fTestRunsStarted.add(description)
 [L 153] fTestRunsFinished.add(result)
 [L 158] fTestsStarted.add(description)
 [L 163] fTestsFinished.add(description)
 [L 168] fFailures.add(failure)
 [L 173] fAssumptionFailures.add(failure)
 [L 178] fTestsIgnored.add(description)
 [L 183] fTestRunsStarted.size()
 [L 184] fTestRunsFinished.size()
 [L 185] fTestsStarted.size()
 [L 186] fTestsFinished.size()
 [L 187] fFailures.size()
 [L 188] fAssumptionFailures.size()
 [L 189] fTestsIgnored.size()

/src/test/java/org/junit/tests/experimental/rules/MethodRulesTest.java
======================================================================
 [L 39] base.evaluate()
 [L 56] JUnitCore.runClasses(ExampleTest.class)
 [L 57] assertTrue(wasRun)
 [L 67] JUnitCore.runClasses(SonOfExampleTest.class)
 [L 68] assertTrue(wasRun)
 [L 80] base.evaluate()
 [L 103] JUnitCore.runClasses(MultipleRuleTest.class)
 [L 104] assertEquals(2, runCount)
 [L 118] JUnitCore.runClasses(NoRulesTest.class)
 [L 119] result.getFailureCount()
 [L 119] assertEquals(0, result.getFailureCount())
 [L 129] method.getName()
 [L 129] e.getClass()
 [L 129] e.getClass().getSimpleName()
 [L 135] fail()
 [L 142] JUnitCore.runClasses(OnFailureTest.class)
 [L 143] assertEquals("nothing AssertionError", log)
 [L 144] result.getFailureCount()
 [L 144] assertEquals(1, result.getFailureCount())
 [L 154] method.getName()
 [L 155] e.getClass()
 [L 155] e.getClass().getSimpleName()
 [L 160] method.getName()
 [L 166] fail()
 [L 177] JUnitCore.runClasses(WatchmanTest.class)
 [L 178] containsString("fails AssertionError")
 [L 178] assertThat(WatchmanTest.watchedLog, containsString("fails AssertionError"))
 [L 179] containsString("succeeds success!")
 [L 179] assertThat(WatchmanTest.watchedLog, containsString("succeeds success!"))
 [L 222] JUnitCore.runClasses(BeforesAndAfters.class)
 [L 223] is("starting before test after succeeded finished ")
 [L 223] assertThat(BeforesAndAfters.watchedLog, is("starting before test after succeeded finished "))
 [L 237] testResult(WrongTypedField.class)
 [L 238] hasSingleFailureContaining("must implement MethodRule")
 [L 237] assertThat(testResult(WrongTypedField.class), hasSingleFailureContaining("must implement MethodRule"))
 [L 247] testResult(SonOfWrongTypedField.class)
 [L 248] hasSingleFailureContaining("must implement MethodRule")
 [L 247] assertThat(testResult(SonOfWrongTypedField.class), hasSingleFailureContaining("must implement MethodRule"))
 [L 262] testResult(PrivateRule.class)
 [L 263] hasSingleFailureContaining("must be public")
 [L 262] assertThat(testResult(PrivateRule.class), hasSingleFailureContaining("must be public"))
 [L 273] description.getMethodName()
 [L 274] base.evaluate()
 [L 286] assertEquals("foo", counter.name)
 [L 292] testResult(UsesCustomMethodRule.class)
 [L 292] isSuccessful()
 [L 292] assertThat(testResult(UsesCustomMethodRule.class), isSuccessful())
 [L 303] base.evaluate()
 [L 331] JUnitCore.runClasses(HasMethodReturningMethodRule.class)
 [L 332] assertTrue(wasRun)
 [L 363] JUnitCore.runClasses(HasMultipleMethodsReturningMethodRule.class)
 [L 364] assertEquals(2, runCount)
 [L 377] base.evaluate()
 [L 392] assertEquals(1, callCount)
 [L 406] JUnitCore.runClasses(CallsMethodReturningRuleOnlyOnce.class)
 [L 406] JUnitCore.runClasses(CallsMethodReturningRuleOnlyOnce.class).wasSuccessful()
 [L 406] assertTrue(JUnitCore.runClasses(CallsMethodReturningRuleOnlyOnce.class).wasSuccessful())

/src/test/java/org/junit/tests/experimental/rules/NameRulesTest.java
====================================================================
 [L 21] name.getMethodName()
 [L 21] assertEquals("testA", name.getMethodName())
 [L 26] name.getMethodName()
 [L 26] assertEquals("testB", name.getMethodName())
 [L 38] name.getMethodName()
 [L 38] assertEquals(expectedName, name.getMethodName())
 [L 43] name.getMethodName()
 [L 43] assertEquals(expectedName, name.getMethodName())
 [L 48] name.getMethodName()
 [L 48] assertEquals(expectedName, name.getMethodName())

/src/test/java/org/junit/tests/experimental/rules/VerifierRuleTest.java
=======================================================================
 [L 25] collector.addError(new Throwable("message"))
 [L 31] testResult(UsesErrorCollector.class)
 [L 31] hasFailureContaining("message")
 [L 31] assertThat(testResult(UsesErrorCollector.class), hasFailureContaining("message"))
 [L 40] collector.addError(new Throwable("first thing went wrong"))
 [L 41] collector.addError(new Throwable("second thing went wrong"))
 [L 47] testResult(UsesErrorCollectorTwice.class)
 [L 48] hasFailureContaining("first thing went wrong")
 [L 48] assertThat(testResult, hasFailureContaining("first thing went wrong"))
 [L 49] hasFailureContaining("second thing went wrong")
 [L 49] assertThat(testResult, hasFailureContaining("second thing went wrong"))
 [L 58] is(4)
 [L 58] collector.checkThat(3, is(4))
 [L 59] is(6)
 [L 59] collector.checkThat(5, is(6))
 [L 60] is(8)
 [L 60] collector.checkThat("reason 1", 7, is(8))
 [L 61] is(16)
 [L 61] collector.checkThat("reason 2", 9, is(16))
 [L 67] testResult(UsesErrorCollectorCheckThat.class)
 [L 68] hasFailureContaining("was <3>")
 [L 68] assertThat(testResult, hasFailureContaining("was <3>"))
 [L 69] hasFailureContaining("was <5>")
 [L 69] assertThat(testResult, hasFailureContaining("was <5>"))
 [L 70] hasFailureContaining("reason 1")
 [L 70] assertThat(testResult, hasFailureContaining("reason 1"))
 [L 71] hasFailureContaining("was <7>")
 [L 71] assertThat(testResult, hasFailureContaining("was <7>"))
 [L 72] hasFailureContaining("reason 2")
 [L 72] assertThat(testResult, hasFailureContaining("reason 2"))
 [L 73] hasFailureContaining("was <9>")
 [L 73] assertThat(testResult, hasFailureContaining("was <9>"))
 [L 82] collector.checkSucceeds(new Callable<Object>() {

    public Object call() throws Exception {
        throw new RuntimeException("first!");
    }
})
 [L 87] collector.checkSucceeds(new Callable<Integer>() {

    public Integer call() throws Exception {
        throw new RuntimeException("second!");
    }
})
 [L 92] collector.checkSucceeds(new Callable<Integer>() {

    public Integer call() throws Exception {
        return 1;
    }
})
 [L 97] Integer.valueOf(1)
 [L 97] assertEquals(Integer.valueOf(1), result)
 [L 103] testResult(UsesErrorCollectorCheckSucceeds.class)
 [L 104] hasFailureContaining("first!")
 [L 104] assertThat(testResult, hasFailureContaining("first!"))
 [L 105] hasFailureContaining("second!")
 [L 105] assertThat(testResult, hasFailureContaining("second!"))
 [L 114] collector.checkSucceeds(new Callable<Object>() {

    public Object call() throws Exception {
        return 3;
    }
})
 [L 114] assertEquals(3, collector.checkSucceeds(new Callable<Object>() {

    public Object call() throws Exception {
        return 3;
    }
}))
 [L 124] testResult(UsesErrorCollectorCheckSucceedsPasses.class)
 [L 125] isSuccessful()
 [L 125] assertThat(testResult, isSuccessful())
 [L 148] testResult(UsesVerifier.class)
 [L 148] isSuccessful()
 [L 148] assertThat(testResult(UsesVerifier.class), isSuccessful())
 [L 149] assertEquals("test verify ", sequence)

/src/test/java/org/junit/tests/experimental/rules/TestRuleTest.java
===================================================================
 [L 42] base.evaluate()
 [L 59] JUnitCore.runClasses(ExampleTest.class)
 [L 60] assertTrue(wasRun)
 [L 84] assertEquals(1, both.applications)
 [L 91] JUnitCore.runClasses(OneFieldTwoKindsOfRule.class)
 [L 91] JUnitCore.runClasses(OneFieldTwoKindsOfRule.class).wasSuccessful()
 [L 91] assertTrue(JUnitCore.runClasses(OneFieldTwoKindsOfRule.class).wasSuccessful())
 [L 101] JUnitCore.runClasses(SonOfExampleTest.class)
 [L 102] assertTrue(wasRun)
 [L 114] base.evaluate()
 [L 137] JUnitCore.runClasses(MultipleRuleTest.class)
 [L 138] assertEquals(2, runCount)
 [L 152] JUnitCore.runClasses(NoRulesTest.class)
 [L 153] result.getFailureCount()
 [L 153] assertEquals(0, result.getFailureCount())
 [L 163] e.getClass()
 [L 163] e.getClass().getSimpleName()
 [L 169] fail()
 [L 176] JUnitCore.runClasses(OnFailureTest.class)
 [L 177] OnFailureTest.class.getName()
 [L 177] String.format("nothing(%s) AssertionError", OnFailureTest.class.getName())
 [L 177] assertEquals(String.format("nothing(%s) AssertionError", OnFailureTest.class.getName()), log)
 [L 178] result.getFailureCount()
 [L 178] assertEquals(1, result.getFailureCount())
 [L 189] e.getClass()
 [L 189] e.getClass().getSimpleName()
 [L 200] fail()
 [L 211] JUnitCore.runClasses(WatchmanTest.class)
 [L 212] WatchmanTest.class.getName()
 [L 212] String.format("fails(%s) AssertionError", WatchmanTest.class.getName())
 [L 212] containsString(String.format("fails(%s) AssertionError", WatchmanTest.class.getName()))
 [L 212] assertThat(WatchmanTest.watchedLog, containsString(String.format("fails(%s) AssertionError", WatchmanTest.class.getName())))
 [L 213] WatchmanTest.class.getName()
 [L 213] String.format("succeeds(%s) success!", WatchmanTest.class.getName())
 [L 213] containsString(String.format("succeeds(%s) success!", WatchmanTest.class.getName()))
 [L 213] assertThat(WatchmanTest.watchedLog, containsString(String.format("succeeds(%s) success!", WatchmanTest.class.getName())))
 [L 221] watchedLog.append("before ")
 [L 229] watchedLog.append("after ")
 [L 234] watchedLog.append("test ")
 [L 241] JUnitCore.runClasses(BeforesAndAfters.class)
 [L 242] BeforesAndAfters.watchedLog.toString()
 [L 243] is("starting before test after succeeded finished ")
 [L 242] assertThat(BeforesAndAfters.watchedLog.toString(), is("starting before test after succeeded finished "))
 [L 257] testResult(WrongTypedField.class)
 [L 258] hasSingleFailureContaining("must implement MethodRule")
 [L 257] assertThat(testResult(WrongTypedField.class), hasSingleFailureContaining("must implement MethodRule"))
 [L 267] testResult(SonOfWrongTypedField.class)
 [L 268] hasSingleFailureContaining("must implement MethodRule")
 [L 267] assertThat(testResult(SonOfWrongTypedField.class), hasSingleFailureContaining("must implement MethodRule"))
 [L 282] testResult(PrivateRule.class)
 [L 283] hasSingleFailureContaining("must be public")
 [L 282] assertThat(testResult(PrivateRule.class), hasSingleFailureContaining("must be public"))
 [L 293] description.getMethodName()
 [L 294] base.evaluate()
 [L 306] assertEquals("foo", counter.name)
 [L 312] testResult(UsesCustomMethodRule.class)
 [L 312] isSuccessful()
 [L 312] assertThat(testResult(UsesCustomMethodRule.class), isSuccessful())
 [L 322] base.evaluate()
 [L 344] JUnitCore.runClasses(MethodExampleTest.class)
 [L 345] assertTrue(wasRun)
 [L 373] assertEquals(1, both.applications)
 [L 380] JUnitCore.runClasses(MethodOneFieldTwoKindsOfRule.class)
 [L 380] JUnitCore.runClasses(MethodOneFieldTwoKindsOfRule.class).wasSuccessful()
 [L 380] assertTrue(JUnitCore.runClasses(MethodOneFieldTwoKindsOfRule.class).wasSuccessful())
 [L 390] JUnitCore.runClasses(MethodSonOfExampleTest.class)
 [L 391] assertTrue(wasRun)
 [L 401] base.evaluate()
 [L 432] JUnitCore.runClasses(MethodMultipleRuleTest.class)
 [L 433] assertEquals(2, runCount)
 [L 447] JUnitCore.runClasses(MethodNoRulesTest.class)
 [L 448] result.getFailureCount()
 [L 448] assertEquals(0, result.getFailureCount())
 [L 455] e.getClass()
 [L 455] e.getClass().getSimpleName()
 [L 466] fail()
 [L 473] JUnitCore.runClasses(MethodOnFailureTest.class)
 [L 474] MethodOnFailureTest.class.getName()
 [L 474] String.format("nothing(%s) AssertionError", MethodOnFailureTest.class.getName())
 [L 474] assertEquals(String.format("nothing(%s) AssertionError", MethodOnFailureTest.class.getName()), log)
 [L 475] result.getFailureCount()
 [L 475] assertEquals(1, result.getFailureCount())
 [L 482] e.getClass()
 [L 482] e.getClass().getSimpleName()
 [L 493] Assume.assumeTrue(false)
 [L 500] JUnitCore.runClasses(MethodOnSkippedTest.class)
 [L 501] MethodOnSkippedTest.class.getName()
 [L 501] String.format("nothing(%s) AssumptionViolatedException", MethodOnSkippedTest.class.getName())
 [L 501] assertEquals(String.format("nothing(%s) AssumptionViolatedException", MethodOnSkippedTest.class.getName()), log)
 [L 502] result.getFailureCount()
 [L 502] assertEquals(0, result.getFailureCount())
 [L 503] result.getRunCount()
 [L 503] assertEquals(1, result.getRunCount())
 [L 514] e.getClass()
 [L 514] e.getClass().getSimpleName()
 [L 530] fail()
 [L 541] JUnitCore.runClasses(WatchmanTest.class)
 [L 542] WatchmanTest.class.getName()
 [L 542] String.format("fails(%s) AssertionError", WatchmanTest.class.getName())
 [L 542] containsString(String.format("fails(%s) AssertionError", WatchmanTest.class.getName()))
 [L 542] assertThat(WatchmanTest.watchedLog, containsString(String.format("fails(%s) AssertionError", WatchmanTest.class.getName())))
 [L 543] WatchmanTest.class.getName()
 [L 543] String.format("succeeds(%s) success!", WatchmanTest.class.getName())
 [L 543] containsString(String.format("succeeds(%s) success!", WatchmanTest.class.getName()))
 [L 543] assertThat(WatchmanTest.watchedLog, containsString(String.format("succeeds(%s) success!", WatchmanTest.class.getName())))
 [L 590] JUnitCore.runClasses(MethodBeforesAndAfters.class)
 [L 591] is("starting before test after succeeded finished ")
 [L 591] assertThat(MethodBeforesAndAfters.watchedLog, is("starting before test after succeeded finished "))
 [L 607] testResult(MethodWrongTypedField.class)
 [L 608] hasSingleFailureContaining("must return an implementation of MethodRule")
 [L 607] assertThat(testResult(MethodWrongTypedField.class), hasSingleFailureContaining("must return an implementation of MethodRule"))
 [L 617] testResult(MethodSonOfWrongTypedField.class)
 [L 618] hasSingleFailureContaining("must return an implementation of MethodRule")
 [L 617] assertThat(testResult(MethodSonOfWrongTypedField.class), hasSingleFailureContaining("must return an implementation of MethodRule"))
 [L 634] testResult(MethodPrivateRule.class)
 [L 635] hasSingleFailureContaining("must be public")
 [L 634] assertThat(testResult(MethodPrivateRule.class), hasSingleFailureContaining("must be public"))
 [L 648] assertEquals("foo", counter.name)
 [L 654] testResult(MethodUsesCustomMethodRule.class)
 [L 654] isSuccessful()
 [L 654] assertThat(testResult(MethodUsesCustomMethodRule.class), isSuccessful())
 [L 670] orderList.add(name)
 [L 671] base.evaluate()
 [L 688] orderList.get(0)
 [L 688] assertEquals("orderField", orderList.get(0))
 [L 689] orderList.get(1)
 [L 689] assertEquals("orderMethod", orderList.get(1))
 [L 695] orderList.clear()
 [L 696] testResult(UsesFieldAndMethodRule.class)
 [L 696] isSuccessful()
 [L 696] assertThat(testResult(UsesFieldAndMethodRule.class), isSuccessful())
 [L 707] base.evaluate()
 [L 723] assertEquals(1, countOfMethodCalls)
 [L 729] JUnitCore.runClasses(CallMethodOnlyOnceRule.class)
 [L 729] JUnitCore.runClasses(CallMethodOnlyOnceRule.class).wasSuccessful()
 [L 729] assertTrue(JUnitCore.runClasses(CallMethodOnlyOnceRule.class).wasSuccessful())

/src/test/java/org/junit/tests/experimental/rules/LoggingTestWatcher.java
=========================================================================
 [L 16] log.append("succeeded ")
 [L 21] log.append("failed ")
 [L 26] log.append("skipped ")
 [L 31] log.append("starting ")
 [L 36] log.append("finished ")

/src/test/java/org/junit/tests/experimental/rules/RuleChainTest.java
====================================================================
 [L 30] LOG.add("starting " + label)
 [L 35] LOG.add("finished " + label)
 [L 41] outerRule(new LoggingRule("outer rule"))
 [L 41] outerRule(new LoggingRule("outer rule")).around(new LoggingRule("middle rule"))
 [L 41] outerRule(new LoggingRule("outer rule")).around(new LoggingRule("middle rule")).around(new LoggingRule("inner rule"))
 [L 47] assertTrue(true)
 [L 53] testResult(UseRuleChain.class)
 [L 54] asList("starting outer rule", "starting middle rule", "starting inner rule", "finished inner rule", "finished middle rule", "finished outer rule")
 [L 58] assertEquals(expectedLog, LOG)

/src/test/java/org/junit/tests/experimental/rules/TemporaryFolderUsageTest.java
===============================================================================
 [L 28] ExpectedException.none()
 [L 37] tempFolder.delete()
 [L 42] new TemporaryFolder().getRoot()
 [L 48] new TemporaryFolder().newFile()
 [L 54] new TemporaryFolder().newFile("MyFile.txt")
 [L 59] tempFolder.create()
 [L 60] tempFolder.newFile("MyFile.txt")
 [L 62] thrown.expect(IOException.class)
 [L 63] thrown.expectMessage("a file with the name 'MyFile.txt' already exists in the test folder")
 [L 64] tempFolder.newFile("MyFile.txt")
 [L 70] new TemporaryFolder().newFolder()
 [L 75] new TemporaryFolder().newFolder("level1", "level2", "level3")
 [L 80] tempFolder.create()
 [L 81] tempFolder.newFolder("level1")
 [L 83] thrown.expect(IOException.class)
 [L 84] thrown.expectMessage("a folder with the name 'level1' already exists")
 [L 85] tempFolder.newFolder("level1")
 [L 91] tempFolder.create()
 [L 92] thrown.expect(IOException.class)
 [L 93] thrown.expectMessage("name cannot consist of multiple path components")
 [L 94] tempFolder.newFolder("temp1/temp2")
 [L 99] tempFolder.create()
 [L 100] tempFolder.newFolder("level1", "level2", "level3")
 [L 102] thrown.expect(IOException.class)
 [L 103] thrown.expectMessage("a folder with the name 'level3' already exists")
 [L 104] tempFolder.newFolder("level1", "level2", "level3")
 [L 110] tempFolder.create()
 [L 111] thrown.expect(IOException.class)
 [L 112] thrown.expectMessage("name cannot consist of multiple path components")
 [L 113] tempFolder.newFolder("temp1", "temp2", "temp3/temp4")
 [L 118] tempFolder.create()
 [L 119] tempFolder.getRoot()
 [L 119] assertFileExists(tempFolder.getRoot())
 [L 124] tempFolder.delete()
 [L 129] tempFolder.create()
 [L 130] tempFolder.delete()
 [L 131] tempFolder.getRoot()
 [L 131] assertFileDoesNotExist(tempFolder.getRoot())
 [L 136] tempFolder.create()
 [L 138] tempFolder.newFile()
 [L 139] assertFileExists(f)
 [L 140] assertFileCreatedUnderRootFolder("Random file", f)
 [L 146] tempFolder.create()
 [L 148] tempFolder.newFile(fileName)
 [L 150] assertFileExists(f)
 [L 151] assertFileCreatedUnderRootFolder("Named file", f)
 [L 152] f.getName()
 [L 152] equalTo(fileName)
 [L 152] assertThat("file name", f.getName(), equalTo(fileName))
 [L 157] tempFolder.create()
 [L 159] tempFolder.newFolder()
 [L 160] assertFileExists(f)
 [L 161] assertFileCreatedUnderRootFolder("Random folder", f)
 [L 166] tempFolder.create()
 [L 168] tempFolder.newFolder("top", "middle", "bottom")
 [L 169] assertFileExists(f)
 [L 170] tempFolder.getRoot()
 [L 170] assertParentFolderForFileIs(f, new File(tempFolder.getRoot(), "top/middle"))
 [L 172] f.getParentFile()
 [L 173] tempFolder.getRoot()
 [L 172] assertParentFolderForFileIs(f.getParentFile(), new File(tempFolder.getRoot(), "top"))
 [L 174] f.getParentFile()
 [L 174] f.getParentFile().getParentFile()
 [L 174] assertFileCreatedUnderRootFolder("top", f.getParentFile().getParentFile())
 [L 180] createTemporaryFolder()
 [L 183] folder.create()
 [L 185] folder.getRoot()
 [L 185] folder.getRoot().getParentFile()
 [L 185] is(folder.getRoot().getParentFile())
 [L 185] assertThat(tempDir, is(folder.getRoot().getParentFile()))
 [L 189] File.createTempFile("junit", "tempFolder")
 [L 190] tempDir.delete()
 [L 190] assertTrue("Unable to delete temporary file", tempDir.delete())
 [L 191] tempDir.mkdir()
 [L 191] assertTrue("Unable to create temp directory", tempDir.mkdir())
 [L 196] checkFileExists("exists", file, false)
 [L 200] notNullValue()
 [L 200] is(notNullValue())
 [L 200] assertThat("File is null", file, is(notNullValue()))
 [L 201] file.getAbsolutePath()
 [L 202] file.exists()
 [L 202] is(exists)
 [L 201] assertThat("File '" + file.getAbsolutePath() + "' " + msg, file.exists(), is(exists))
 [L 206] checkFileExists("does not exist", file, true)
 [L 210] tempFolder.getRoot()
 [L 210] assertParentFolderForFileIs(f, tempFolder.getRoot())
 [L 214] f.getAbsolutePath()
 [L 215] f.getParentFile()
 [L 215] is(parentFolder)
 [L 214] assertThat("'" + f.getAbsolutePath() + "': not under root", f.getParentFile(), is(parentFolder))

/src/test/java/org/junit/tests/experimental/rules/BlockJUnit4ClassRunnerOverrideTest.java
=========================================================================================
 [L 29] target.getClass()
 [L 29] target.getClass().getField("flipBit")
 [L 29] target.getClass().getField("flipBit").set(target, true)
 [L 30] base.evaluate()
 [L 45] super.rules(test)
 [L 46] methodRules.add(new FlipBitRule())
 [L 57] assertTrue(flipBit)
 [L 63] testResult(OverrideTestRulesTest.class)
 [L 63] isSuccessful()
 [L 63] assertThat(testResult(OverrideTestRulesTest.class), isSuccessful())
 [L 75] super.getTestRules(test)
 [L 78] new FlipBitRule().apply(base, null, test)
 [L 76] methodRules.add(new TestRule() {

    public Statement apply(Statement base, Description description) {
        return new FlipBitRule().apply(base, null, test);
    }
})
 [L 91] testResult(OverrideRulesTest.class)
 [L 91] isSuccessful()
 [L 91] assertThat(testResult(OverrideRulesTest.class), isSuccessful())
 [L 105] klass.equals(OverrideCreateTest.class)
 [L 124] method.getMethod()
 [L 124] method.getMethod().getName()
 [L 124] assertEquals("testMethodA", method.getMethod().getName())
 [L 129] method.getMethod()
 [L 129] method.getMethod().getName()
 [L 129] assertEquals("testMethodB", method.getMethod().getName())
 [L 135] testResult(OverrideCreateTest.class)
 [L 135] isSuccessful()
 [L 135] assertThat(testResult(OverrideCreateTest.class), isSuccessful())
 [L 150] klass.equals(CreateTestDefersToNoArgCreateTestTest.class)
 [L 169] assertEquals(true, createTestCalled)
 [L 175] testResult(CreateTestDefersToNoArgCreateTestTest.class)
 [L 175] isSuccessful()
 [L 175] assertThat(testResult(CreateTestDefersToNoArgCreateTestTest.class), isSuccessful())

/src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionTest.java
============================================================================
 [L 38] everyTestRunSuccessful()
 [L 40] everyTestRunSuccessful()
 [L 42] everyTestRunSuccessful()
 [L 45] startsWith("\nExpected: an instance of java.lang.NullPointerException")
 [L 45] hasSingleFailureWithMessage(startsWith("\nExpected: an instance of java.lang.NullPointerException"))
 [L 48] startsWith("\nExpected: exception with message a string containing \"expectedMessage\"\n" + "     but: message was \"actualMessage\"")
 [L 48] hasSingleFailureWithMessage(startsWith("\nExpected: exception with message a string containing \"expectedMessage\"\n" + "     but: message was \"actualMessage\""))
 [L 52] hasSingleFailureWithMessage("Expected test to throw an instance of java.lang.NullPointerException")
 [L 53] hasSingleFailure()
 [L 54] everyTestRunSuccessful()
 [L 57] startsWith("\nExpected: exception with message a string containing \"anything!\"")
 [L 57] hasSingleFailureWithMessage(startsWith("\nExpected: exception with message a string containing \"anything!\""))
 [L 58] everyTestRunSuccessful()
 [L 61] startsWith("\nExpected: exception with message \"Wrong start\"")
 [L 61] hasSingleFailureWithMessage(startsWith("\nExpected: exception with message \"Wrong start\""))
 [L 62] everyTestRunSuccessful()
 [L 63] hasSingleFailure()
 [L 65] hasSingleAssumptionFailure()
 [L 67] hasSingleFailureWithMessage(ARBITRARY_MESSAGE)
 [L 70] startsWith("\nExpected: (an instance of java.lang.IllegalArgumentException and exception with message a string containing \"Ack!\")")
 [L 70] hasSingleFailureWithMessage(startsWith("\nExpected: (an instance of java.lang.IllegalArgumentException and exception with message a string containing \"Ack!\")"))
 [L 71] everyTestRunSuccessful()
 [L 72] everyTestRunSuccessful()
 [L 76] startsWith("\nExpected: (")
 [L 77] containsString("exception with cause is <java.lang.NullPointerException: expected cause>")
 [L 78] containsString("cause was <java.lang.NullPointerException: an unexpected cause>")
 [L 79] containsString("Stacktrace was: java.lang.IllegalArgumentException: Ack!")
 [L 80] containsString("Caused by: java.lang.NullPointerException: an unexpected cause")
 [L 75] CoreMatchers.<String>allOf(startsWith("\nExpected: ("), containsString("exception with cause is <java.lang.NullPointerException: expected cause>"), containsString("cause was <java.lang.NullPointerException: an unexpected cause>"), containsString("Stacktrace was: java.lang.IllegalArgumentException: Ack!"), containsString("Caused by: java.lang.NullPointerException: an unexpected cause"))
 [L 75] hasSingleFailureWithMessage(CoreMatchers.<String>allOf(startsWith("\nExpected: ("), containsString("exception with cause is <java.lang.NullPointerException: expected cause>"), containsString("cause was <java.lang.NullPointerException: an unexpected cause>"), containsString("Stacktrace was: java.lang.IllegalArgumentException: Ack!"), containsString("Caused by: java.lang.NullPointerException: an unexpected cause")))
 [L 83] hasSingleFailureWithMessage("Expected test to throw an instance of java.lang.IllegalArgumentException")
 [L 86] hasSingleFailureWithMessage(ARBITRARY_MESSAGE)
 [L 89] hasSingleFailureWithMessage(ARBITRARY_MESSAGE + " - an instance of java.lang.IllegalArgumentException")
 [L 37] asList(new Object[][] { { EmptyTestExpectingNoException.class, everyTestRunSuccessful() }, { ThrowExceptionWithExpectedType.class, everyTestRunSuccessful() }, { ThrowExceptionWithExpectedPartOfMessage.class, everyTestRunSuccessful() }, { ThrowExceptionWithWrongType.class, hasSingleFailureWithMessage(startsWith("\nExpected: an instance of java.lang.NullPointerException")) }, { HasWrongMessage.class, hasSingleFailureWithMessage(startsWith("\nExpected: exception with message a string containing \"expectedMessage\"\n" + "     but: message was \"actualMessage\"")) }, { ThrowNoExceptionButExpectExceptionWithType.class, hasSingleFailureWithMessage("Expected test to throw an instance of java.lang.NullPointerException") }, { WronglyExpectsExceptionMessage.class, hasSingleFailure() }, { ExpectsSubstring.class, everyTestRunSuccessful() }, { ExpectsSubstringNullMessage.class, hasSingleFailureWithMessage(startsWith("\nExpected: exception with message a string containing \"anything!\"")) }, { ExpectsMessageMatcher.class, everyTestRunSuccessful() }, { ExpectedMessageMatcherFails.class, hasSingleFailureWithMessage(startsWith("\nExpected: exception with message \"Wrong start\"")) }, { ExpectsMatcher.class, everyTestRunSuccessful() }, { ExpectAssertionErrorWhichIsNotThrown.class, hasSingleFailure() }, { FailedAssumptionAndExpectException.class, hasSingleAssumptionFailure() }, { FailBeforeExpectingException.class, hasSingleFailureWithMessage(ARBITRARY_MESSAGE) }, { ExpectsMultipleMatchers.class, hasSingleFailureWithMessage(startsWith("\nExpected: (an instance of java.lang.IllegalArgumentException and exception with message a string containing \"Ack!\")")) }, { ThrowExceptionWithMatchingCause.class, everyTestRunSuccessful() }, { ThrowExpectedNullCause.class, everyTestRunSuccessful() }, { ThrowUnexpectedCause.class, hasSingleFailureWithMessage(CoreMatchers.<String>allOf(startsWith("\nExpected: ("), containsString("exception with cause is <java.lang.NullPointerException: expected cause>"), containsString("cause was <java.lang.NullPointerException: an unexpected cause>"), containsString("Stacktrace was: java.lang.IllegalArgumentException: Ack!"), containsString("Caused by: java.lang.NullPointerException: an unexpected cause"))) }, { UseNoCustomMessage.class, hasSingleFailureWithMessage("Expected test to throw an instance of java.lang.IllegalArgumentException") }, { UseCustomMessageWithoutPlaceHolder.class, hasSingleFailureWithMessage(ARBITRARY_MESSAGE) }, { UseCustomMessageWithPlaceHolder.class, hasSingleFailureWithMessage(ARBITRARY_MESSAGE + " - an instance of java.lang.IllegalArgumentException") } })
 [L 108] core.addListener(collector)
 [L 109] core.run(classUnderTest)
 [L 110] assertThat(collector, matcher)
 [L 115] none()
 [L 124] none()
 [L 128] thrown.expect(NullPointerException.class)
 [L 135] none()
 [L 139] thrown.expect(NullPointerException.class)
 [L 140] thrown.expectMessage(ARBITRARY_MESSAGE)
 [L 147] none()
 [L 151] thrown.expect(NullPointerException.class)
 [L 158] none()
 [L 162] thrown.expectMessage("expectedMessage")
 [L 169] none()
 [L 173] thrown.expect(NullPointerException.class)
 [L 179] none()
 [L 183] thrown.expectMessage("anything!")
 [L 189] none()
 [L 193] thrown.expectMessage("anything!")
 [L 201] none()
 [L 205] thrown.expectMessage("anything!")
 [L 212] none()
 [L 216] startsWith(ARBITRARY_MESSAGE)
 [L 216] thrown.expectMessage(startsWith(ARBITRARY_MESSAGE))
 [L 223] none()
 [L 227] equalTo("Wrong start")
 [L 227] thrown.expectMessage(equalTo("Wrong start"))
 [L 234] none()
 [L 238] any(Exception.class)
 [L 238] thrown.expect(any(Exception.class))
 [L 245] none()
 [L 249] thrown.expect(IllegalArgumentException.class)
 [L 250] thrown.expectMessage("Ack!")
 [L 258] none()
 [L 262] thrown.expect(AssertionError.class)
 [L 268] none()
 [L 272] fail(ARBITRARY_MESSAGE)
 [L 273] thrown.expect(IllegalArgumentException.class)
 [L 279] none()
 [L 283] assumeTrue(false)
 [L 284] thrown.expect(NullPointerException.class)
 [L 290] none()
 [L 296] thrown.expect(IllegalArgumentException.class)
 [L 297] thrown.expectMessage("Ack!")
 [L 298] is(expectedCause)
 [L 298] thrown.expectCause(is(expectedCause))
 [L 306] none()
 [L 310] thrown.expect(IllegalArgumentException.class)
 [L 311] thrown.expectMessage("Ack!")
 [L 312] nullValue(Throwable.class)
 [L 312] thrown.expectCause(nullValue(Throwable.class))
 [L 321] ExpectedException.none()
 [L 325] thrown.expect(IllegalArgumentException.class)
 [L 326] thrown.expectMessage("Ack!")
 [L 327] is(new NullPointerException("expected cause"))
 [L 327] thrown.expectCause(is(new NullPointerException("expected cause")))
 [L 336] ExpectedException.none()
 [L 340] thrown.expect(IllegalArgumentException.class)
 [L 347] ExpectedException.none()
 [L 351] thrown.expect(IllegalArgumentException.class)
 [L 352] thrown.reportMissingExceptionWithMessage(ARBITRARY_MESSAGE + " - %s")
 [L 360] ExpectedException.none()
 [L 364] thrown.expect(IllegalArgumentException.class)
 [L 365] thrown.reportMissingExceptionWithMessage(ARBITRARY_MESSAGE)

/src/test/java/org/junit/tests/experimental/rules/TemporaryFolderRuleAssuredDeletionTest.java
=============================================================================================
 [L 49] StubTemporaryFolder.builder()
 [L 49] StubTemporaryFolder.builder().assureDeletion()
 [L 49] StubTemporaryFolder.builder().assureDeletion().build()
 [L 60] testResult(HasTempFolderWithAssuredDeletion.class)
 [L 61] failureCountIs(1)
 [L 61] assertThat(result, failureCountIs(1))
 [L 62] result.toString()
 [L 62] containsString("Unable to clean up temporary folder")
 [L 62] assertThat(result.toString(), containsString("Unable to clean up temporary folder"))
 [L 66] StubTemporaryFolder.builder()
 [L 66] StubTemporaryFolder.builder().build()
 [L 75] testResult(HasTempFolderWithoutAssuredDeletion.class)
 [L 76] isSuccessful()
 [L 76] assertThat(result, isSuccessful())

/src/test/java/org/junit/tests/experimental/rules/TestWatchmanTest.java
=======================================================================
 [L 22] assumeTrue(false)
 [L 28] runClasses(ViolatedAssumptionTest.class)
 [L 29] ViolatedAssumptionTest.watchman.log.toString()
 [L 30] is("starting finished ")
 [L 29] assertThat(ViolatedAssumptionTest.watchman.log.toString(), is("starting finished "))
 [L 39] fail()
 [L 45] runClasses(FailingTest.class)
 [L 46] FailingTest.watchman.log.toString()
 [L 47] is("starting failed finished ")
 [L 46] assertThat(FailingTest.watchman.log.toString(), is("starting failed finished "))
 [L 55] log.append("succeeded ")
 [L 60] log.append("failed ")
 [L 65] log.append("starting ")
 [L 70] log.append("finished ")

/src/test/java/org/junit/tests/experimental/categories/JavadocTest.java
=======================================================================
 [L 28] fail()
 [L 65] JUnitCore.runClasses(SlowTestSuite.class)
 [L 66] testResult.wasSuccessful()
 [L 66] assertTrue(testResult.wasSuccessful())
 [L 67] testResult.getRunCount()
 [L 67] is(2)
 [L 67] assertThat("unexpected run count", testResult.getRunCount(), is(2))
 [L 68] testResult.getFailureCount()
 [L 68] is(0)
 [L 68] assertThat("unexpected failure count", testResult.getFailureCount(), is(0))
 [L 73] JUnitCore.runClasses(FastOrSmokeTestSuite.class)
 [L 74] testResult.wasSuccessful()
 [L 74] assertTrue(testResult.wasSuccessful())
 [L 75] testResult.getRunCount()
 [L 75] is(2)
 [L 75] assertThat("unexpected run count", testResult.getRunCount(), is(2))
 [L 76] testResult.getFailureCount()
 [L 76] is(0)
 [L 76] assertThat("unexpected failure count", testResult.getFailureCount(), is(0))

/src/test/java/org/junit/tests/experimental/categories/CategoriesAndParameterizedTest.java
==========================================================================================
 [L 28] Arrays.asList("first", "second")
 [L 36] Assert.assertTrue(true)
 [L 44] Assert.assertTrue(true)
 [L 57] new JUnitCore().run(SuiteWithParameterizedTestWithoutCategory.class)
 [L 59] result.getRunCount()
 [L 59] assertEquals(1, result.getRunCount())
 [L 60] result.getFailureCount()
 [L 60] assertEquals(0, result.getFailureCount())
 [L 68] Arrays.asList("first", "second")
 [L 76] Assert.assertTrue(true)
 [L 88] new JUnitCore().run(SuiteWithParameterizedTestWithCategory.class)
 [L 90] result.getRunCount()
 [L 90] assertEquals(2, result.getRunCount())
 [L 91] result.getFailureCount()
 [L 91] assertEquals(0, result.getFailureCount())
 [L 98] Arrays.asList("first", "second")
 [L 107] Assert.assertTrue(true)
 [L 112] Assert.assertTrue(true)
 [L 124] new JUnitCore().run(SuiteWithParameterizedTestWithMethodWithCategory.class)
 [L 126] result.getRunCount()
 [L 126] assertEquals(2, result.getRunCount())
 [L 127] result.getFailureCount()
 [L 127] assertEquals(0, result.getFailureCount())

/src/test/java/org/junit/tests/experimental/categories/CategoryValidatorTest.java
=================================================================================
 [L 51] new TestClass(CategoryTest.class).getAnnotatedMethods(BeforeClass.class)
 [L 51] new TestClass(CategoryTest.class).getAnnotatedMethods(BeforeClass.class).get(0)
 [L 52] testAndAssertErrorMessage(method, "@BeforeClass can not be combined with @Category")
 [L 57] new TestClass(CategoryTest.class).getAnnotatedMethods(AfterClass.class)
 [L 57] new TestClass(CategoryTest.class).getAnnotatedMethods(AfterClass.class).get(0)
 [L 58] testAndAssertErrorMessage(method, "@AfterClass can not be combined with @Category")
 [L 63] new TestClass(CategoryTest.class).getAnnotatedMethods(Before.class)
 [L 63] new TestClass(CategoryTest.class).getAnnotatedMethods(Before.class).get(0)
 [L 64] testAndAssertErrorMessage(method, "@Before can not be combined with @Category")
 [L 69] new TestClass(CategoryTest.class).getAnnotatedMethods(After.class)
 [L 69] new TestClass(CategoryTest.class).getAnnotatedMethods(After.class).get(0)
 [L 70] testAndAssertErrorMessage(method, "@After can not be combined with @Category")
 [L 74] new CategoryValidator().validateAnnotatedMethod(method)
 [L 76] errors.size()
 [L 76] is(1)
 [L 76] assertThat(errors.size(), is(1))
 [L 77] errors.get(0)
 [L 78] exception.getMessage()
 [L 78] is(expectedErrorMessage)
 [L 78] assertThat(exception.getMessage(), is(expectedErrorMessage))
 [L 83] CategoryTest.class.getMethod("methodWithCategory")
 [L 84] new CategoryValidator().validateAnnotatedMethod(method)
 [L 86] errors.size()
 [L 86] is(0)
 [L 86] assertThat(errors.size(), is(0))

/src/test/java/org/junit/tests/experimental/categories/MultiCategoryTest.java
=============================================================================
 [L 34] JUnitCore.runClasses(MultiCategorySuite.class)
 [L 36] testResult.getRunCount()
 [L 36] equalTo(2)
 [L 36] is(equalTo(2))
 [L 36] assertThat("unexpected run count", testResult.getRunCount(), is(equalTo(2)))
 [L 37] testResult.getFailureCount()
 [L 37] equalTo(0)
 [L 37] is(equalTo(0))
 [L 37] assertThat("unexpected failure count", testResult.getFailureCount(), is(equalTo(0)))
 [L 38] testResult.getIgnoreCount()
 [L 38] equalTo(0)
 [L 38] is(equalTo(0))
 [L 38] assertThat("unexpected failure count", testResult.getIgnoreCount(), is(equalTo(0)))
 [L 60] fail()
 [L 65] fail()
 [L 71] JUnitCore.runClasses(InheritanceAny.class)
 [L 72] testResult.getRunCount()
 [L 72] equalTo(3)
 [L 72] is(equalTo(3))
 [L 72] assertThat("unexpected run count", testResult.getRunCount(), is(equalTo(3)))
 [L 73] testResult.getFailureCount()
 [L 73] equalTo(0)
 [L 73] is(equalTo(0))
 [L 73] assertThat("unexpected failure count", testResult.getFailureCount(), is(equalTo(0)))
 [L 74] testResult.getIgnoreCount()
 [L 74] equalTo(0)
 [L 74] is(equalTo(0))
 [L 74] assertThat("unexpected failure count", testResult.getIgnoreCount(), is(equalTo(0)))
 [L 79] JUnitCore.runClasses(InheritanceAll.class)
 [L 80] testResult.getRunCount()
 [L 80] equalTo(1)
 [L 80] is(equalTo(1))
 [L 80] assertThat("unexpected run count", testResult.getRunCount(), is(equalTo(1)))
 [L 81] testResult.getFailureCount()
 [L 81] equalTo(0)
 [L 81] is(equalTo(0))
 [L 81] assertThat("unexpected failure count", testResult.getFailureCount(), is(equalTo(0)))
 [L 82] testResult.getIgnoreCount()
 [L 82] equalTo(0)
 [L 82] is(equalTo(0))
 [L 82] assertThat("unexpected failure count", testResult.getIgnoreCount(), is(equalTo(0)))
 [L 87] JUnitCore.runClasses(InheritanceAnyAll.class)
 [L 88] testResult.getRunCount()
 [L 88] equalTo(3)
 [L 88] is(equalTo(3))
 [L 88] assertThat("unexpected run count", testResult.getRunCount(), is(equalTo(3)))
 [L 89] testResult.getFailureCount()
 [L 89] equalTo(0)
 [L 89] is(equalTo(0))
 [L 89] assertThat("unexpected failure count", testResult.getFailureCount(), is(equalTo(0)))
 [L 90] testResult.getIgnoreCount()
 [L 90] equalTo(0)
 [L 90] is(equalTo(0))
 [L 90] assertThat("unexpected failure count", testResult.getIgnoreCount(), is(equalTo(0)))
 [L 95] JUnitCore.runClasses(InheritanceAllAny.class)
 [L 96] testResult.getRunCount()
 [L 96] equalTo(1)
 [L 96] is(equalTo(1))
 [L 96] assertThat("unexpected run count", testResult.getRunCount(), is(equalTo(1)))
 [L 97] testResult.getFailureCount()
 [L 97] equalTo(1)
 [L 97] is(equalTo(1))
 [L 97] assertThat("unexpected failure count", testResult.getFailureCount(), is(equalTo(1)))
 [L 98] testResult.getIgnoreCount()
 [L 98] equalTo(0)
 [L 98] is(equalTo(0))
 [L 98] assertThat("unexpected failure count", testResult.getIgnoreCount(), is(equalTo(0)))
 [L 99] testResult.wasSuccessful()
 [L 99] assertFalse(testResult.wasSuccessful())
 [L 136] fail()
 [L 137] fail()
 [L 138] fail()
 [L 139] fail()
 [L 143] fail()
 [L 144] fail()
 [L 146] fail()
 [L 147] fail()
 [L 148] fail()
 [L 149] fail()
 [L 156] fail()
 [L 157] fail()
 [L 158] fail()
 [L 159] fail()
 [L 163] fail()
 [L 164] fail()
 [L 165] fail()
 [L 166] fail()
 [L 167] fail()
 [L 168] fail()
 [L 169] fail()

/src/test/java/org/junit/tests/experimental/categories/CategoryTest.java
========================================================================
 [L 70] fail()
 [L 90] fail()
 [L 108] testResult(JustA.class)
 [L 108] isSuccessful()
 [L 108] assertThat(testResult(JustA.class), isSuccessful())
 [L 113] testResult(SlowTestSuite.class)
 [L 113] isSuccessful()
 [L 113] assertThat(testResult(SlowTestSuite.class), isSuccessful())
 [L 156] JUnitCore.runClasses(SomeAreSlowSuite.class)
 [L 157] testResult(SomeAreSlowSuite.class)
 [L 157] isSuccessful()
 [L 157] assertThat(testResult(SomeAreSlowSuite.class), isSuccessful())
 [L 158] result.getRunCount()
 [L 158] assertEquals(2, result.getRunCount())
 [L 159] result.wasSuccessful()
 [L 159] assertTrue(result.wasSuccessful())
 [L 171] JUnitCore.runClasses(IncludeAndExcludeSuite.class)
 [L 172] result.getRunCount()
 [L 172] assertEquals(1, result.getRunCount())
 [L 173] result.wasSuccessful()
 [L 173] assertTrue(result.wasSuccessful())
 [L 183] CategoryFilter.include(SlowTests.class)
 [L 184] Request.aClass(TestSuiteWithNoCategories.class)
 [L 185] baseRequest.filterWith(include)
 [L 185] new JUnitCore().run(baseRequest.filterWith(include))
 [L 186] result.wasSuccessful()
 [L 186] assertTrue(result.wasSuccessful())
 [L 187] result.getRunCount()
 [L 187] assertEquals(2, result.getRunCount())
 [L 193] CategoryFilter.include(SlowTests.class)
 [L 195] filter.apply(runner)
 [L 196] runner.testCount()
 [L 196] assertEquals(1, runner.testCount())
 [L 216] CategoryFilter.include(SlowTests.class)
 [L 219] filter.apply(runner)
 [L 220] runner.testCount()
 [L 220] assertEquals(1, runner.testCount())
 [L 239] JUnitCore.runClasses(OneFastSuite.class)
 [L 240] result.getRunCount()
 [L 240] assertEquals(1, result.getRunCount())
 [L 241] result.getFailureCount()
 [L 241] assertEquals(1, result.getFailureCount())
 [L 242] result.wasSuccessful()
 [L 242] assertFalse(result.wasSuccessful())
 [L 247] CategoryFilter.include(SlowTests.class)
 [L 248] filter.describe()
 [L 248] assertEquals("categories [" + SlowTests.class + "]", filter.describe())
 [L 253] CategoryFilter.include(FastTests.class, SlowTests.class)
 [L 254] format("categories [%s, %s]", FastTests.class, SlowTests.class)
 [L 255] format("categories [%s, %s]", SlowTests.class, FastTests.class)
 [L 256] filter.describe()
 [L 256] equalTo(d1)
 [L 256] equalTo(d2)
 [L 256] anyOf(equalTo(d1), equalTo(d2))
 [L 256] is(anyOf(equalTo(d1), equalTo(d2)))
 [L 256] assertThat(filter.describe(), is(anyOf(equalTo(d1), equalTo(d2))))
 [L 276] testResult(ChooseSlowFromBoth.class)
 [L 276] isSuccessful()
 [L 276] assertThat(testResult(ChooseSlowFromBoth.class), isSuccessful())
 [L 299] testResult(RunSlowFromVerySlow.class)
 [L 299] isSuccessful()
 [L 299] assertThat(testResult(RunSlowFromVerySlow.class), isSuccessful())
 [L 326] fail("When multiple categories are included in a Suite, " + "@Test method must match all include categories")
 [L 333] JUnitCore.runClasses(AllIncludedMustBeMatchedSuite.class)
 [L 334] result.getRunCount()
 [L 334] assertEquals(1, result.getRunCount())
 [L 335] result.getFailureCount()
 [L 335] assertEquals(0, result.getFailureCount())
 [L 354] fail("When multiple categories are included and excluded in a Suite, " + "@Test method must match all include categories and contain non of the excluded")
 [L 361] JUnitCore.runClasses(MultiIncludeWithExcludeCategorySuite.class)
 [L 362] result.getRunCount()
 [L 362] assertEquals(1, result.getRunCount())
 [L 363] result.getFailureCount()
 [L 363] assertEquals(0, result.getFailureCount())
 [L 384] testResult(RunClassAsCategory.class)
 [L 384] isSuccessful()
 [L 384] assertThat(testResult(RunClassAsCategory.class), isSuccessful())
 [L 403] JUnitCore.runClasses(InheritanceSuite.class)
 [L 404] result.getRunCount()
 [L 404] assertEquals(1, result.getRunCount())
 [L 405] result.wasSuccessful()
 [L 405] assertTrue(result.wasSuccessful())
 [L 416] testResult(EmptyCategoriesSuite.class)
 [L 416] failureCountIs(1)
 [L 416] assertThat(testResult(EmptyCategoriesSuite.class), failureCountIs(1))
 [L 429] fail()
 [L 441] JUnitCore.runClasses(IgnoredTestCategoriesSuite.class)
 [L 442] result.wasSuccessful()
 [L 442] assertFalse(result.wasSuccessful())
 [L 443] result.getRunCount()
 [L 443] is(1)
 [L 443] assertThat(result.getRunCount(), is(1))
 [L 444] result.getFailureCount()
 [L 444] is(1)
 [L 444] assertThat(result.getFailureCount(), is(1))
 [L 445] result.getIgnoreCount()
 [L 445] is(1)
 [L 445] assertThat(result.getIgnoreCount(), is(1))
 [L 453] fail()
 [L 463] fail()
 [L 484] JUnitCore.runClasses(IncludedExcludedSameSuite.class)
 [L 485] result.getRunCount()
 [L 485] assertEquals(1, result.getRunCount())
 [L 486] result.wasSuccessful()
 [L 486] assertTrue(result.wasSuccessful())
 [L 493] Collections.addAll(exclusions, SlowTests.class, FastTests.class)
 [L 494] CategoryFilter.categoryFilter(true, null, true, exclusions)
 [L 495] Request.aClass(OneOfEach.class)
 [L 496] baseRequest.filterWith(exclude)
 [L 496] new JUnitCore().run(baseRequest.filterWith(exclude))
 [L 497] result.wasSuccessful()
 [L 497] assertTrue(result.wasSuccessful())
 [L 498] result.getRunCount()
 [L 498] assertEquals(1, result.getRunCount())
 [L 503] CategoryFilter.include(true, SlowTests.class, FastTests.class)
 [L 504] Request.aClass(OneOfEach.class)
 [L 505] baseRequest.filterWith(exclude)
 [L 505] new JUnitCore().run(baseRequest.filterWith(exclude))
 [L 506] result.wasSuccessful()
 [L 506] assertTrue(result.wasSuccessful())
 [L 507] result.getRunCount()
 [L 507] assertEquals(2, result.getRunCount())
 [L 530] JUnitCore.runClasses(NoIncludeCategoryAnnotationSuite.class)
 [L 531] testResult.wasSuccessful()
 [L 531] assertTrue(testResult.wasSuccessful())
 [L 532] testResult.getRunCount()
 [L 532] assertEquals(1, testResult.getRunCount())
 [L 544] JUnitCore.runClasses(SameAsNoIncludeCategoryAnnotationSuite.class)
 [L 545] testResult.wasSuccessful()
 [L 545] assertTrue(testResult.wasSuccessful())
 [L 546] testResult.getRunCount()
 [L 546] assertEquals(1, testResult.getRunCount())

/src/test/java/org/junit/tests/listening/RunnerTest.java
========================================================
 [L 22] description.testCount()
 [L 36] runner.addListener(listener)
 [L 37] runner.run(Example.class)
 [L 38] assertEquals(1, listener.testCount)
 [L 50] runner.addListener(listener)
 [L 51] runner.run(ExampleTest.class)
 [L 52] assertEquals(1, listener.testCount)
 [L 71] runner.addListener(listener)
 [L 72] runner.run(NewExample.class)
 [L 73] assertTrue(wasRun)

/src/test/java/org/junit/tests/listening/TestListenerTest.java
==============================================================
 [L 33] runner.addListener(new ErrorListener())
 [L 34] runner.run(OneTest.class)
 [L 48] core.addListener(new ExceptionListener())
 [L 51] core.run(OneTest.class)
 [L 52] assertEquals(1, count)
 [L 53] result.getFailureCount()
 [L 53] assertEquals(1, result.getFailureCount())
 [L 54] result.getFailures()
 [L 54] result.getFailures().get(0)
 [L 55] testFailure.getDescription()
 [L 55] assertEquals(Description.TEST_MECHANISM, testFailure.getDescription())
 [L 61] core.run(OneTest.class)
 [L 62] core.run(OneTest.class)
 [L 63] assertNotSame(first, second)

/src/test/java/org/junit/tests/listening/ListenerTest.java
==========================================================
 [L 23] core.addListener(new RunListener() {

    @Override
    public void testRunStarted(Description description) throws Exception {
        log += "first ";
    }
})
 [L 29] core.addListener(new RunListener() {

    @Override
    public void testRunStarted(Description description) throws Exception {
        log += "second ";
    }
})
 [L 35] core.run(OneTest.class)
 [L 36] assertEquals("first second ", log)

/src/test/java/org/junit/tests/listening/UserStopTest.java
==========================================================
 [L 15] fNotifier.pleaseStop()
 [L 20] fNotifier.fireTestStarted(null)
 [L 31] Request.aClass(OneTest.class)
 [L 31] Request.aClass(OneTest.class).getRunner()
 [L 31] Request.aClass(OneTest.class).getRunner().run(fNotifier)

/src/test/java/org/junit/tests/listening/TextListenerTest.java
==============================================================
 [L 26] system.outContents()
 [L 27] runner.addListener(new TextListener(system))
 [L 37] runner.run(OneTest.class)
 [L 38] convert(".\nTime: ")
 [L 38] results.toString()
 [L 38] results.toString().startsWith(convert(".\nTime: "))
 [L 38] assertTrue(results.toString().startsWith(convert(".\nTime: ")))
 [L 39] convert("\n\nOK (1 test)\n\n")
 [L 39] results.toString()
 [L 39] results.toString().endsWith(convert("\n\nOK (1 test)\n\n"))
 [L 39] assertTrue(results.toString().endsWith(convert("\n\nOK (1 test)\n\n")))
 [L 50] runner.run(ErrorTest.class)
 [L 51] convert(".E\nTime: ")
 [L 51] results.toString()
 [L 51] results.toString().startsWith(convert(".E\nTime: "))
 [L 51] assertTrue(results.toString().startsWith(convert(".E\nTime: ")))
 [L 52] convert("\nThere was 1 failure:\n1) error(org.junit.tests.listening.TextListenerTest$ErrorTest)\njava.lang.Exception")
 [L 52] results.toString()
 [L 52] results.toString().indexOf(convert("\nThere was 1 failure:\n1) error(org.junit.tests.listening.TextListenerTest$ErrorTest)\njava.lang.Exception"))
 [L 52] assertTrue(results.toString().indexOf(convert("\nThere was 1 failure:\n1) error(org.junit.tests.listening.TextListenerTest$ErrorTest)\njava.lang.Exception")) != -1)
 [L 62] runner.run(Time.class)
 [L 63] results.toString()
 [L 63] containsString("Time: ")
 [L 63] assertThat(results.toString(), containsString("Time: "))
 [L 64] results.toString()
 [L 64] convert("Time: \n")
 [L 64] containsString(convert("Time: \n"))
 [L 64] not(containsString(convert("Time: \n")))
 [L 64] assertThat(results.toString(), not(containsString(convert("Time: \n"))))
 [L 70] writer.println()
 [L 71] resultsStream.toString()
 [L 71] string.replace("\n", resultsStream.toString())

/src/test/java/org/junit/tests/manipulation/FilterTest.java
===========================================================
 [L 33] a.intersect(b)
 [L 33] a.intersect(b).describe()
 [L 33] assertEquals("a and b", a.intersect(b).describe())
 [L 34] b.intersect(a)
 [L 34] b.intersect(a).describe()
 [L 34] assertEquals("b and a", b.intersect(a).describe())
 [L 40] a.intersect(a)
 [L 40] assertSame(a, a.intersect(a))
 [L 46] a.intersect(Filter.ALL)
 [L 46] assertSame(a, a.intersect(Filter.ALL))
 [L 47] Filter.ALL.intersect(a)
 [L 47] assertSame(a, Filter.ALL.intersect(a))
 [L 48] Filter.ALL.intersect(Filter.ALL)
 [L 48] assertSame(Filter.ALL, Filter.ALL.intersect(Filter.ALL))

/src/test/java/org/junit/tests/manipulation/FilterableTest.java
===============================================================
 [L 26] description.getDisplayName()
 [L 26] description.getDisplayName().contains("skip")
 [L 22] filter(new Filter() {

    @Override
    public boolean shouldRun(Description description) {
        return !description.getDisplayName().contains("skip");
    }

    @Override
    public String describe() {
        return "skip methods containing the word 'skip'";
    }
})
 [L 41] Arrays.asList(new Object[] { 3 }, new Object[] { 4 })
 [L 49] Assert.fail()
 [L 59] JUnitCore.runClasses(FilteredTest.class)
 [L 60] result.wasSuccessful()
 [L 60] assertTrue(result.wasSuccessful())

/src/test/java/org/junit/tests/manipulation/SingleMethodTest.java
=================================================================
 [L 48] Request.method(OneTimeSetup.class, "one")
 [L 48] Request.method(OneTimeSetup.class, "one").getRunner()
 [L 49] new JUnitCore().run(runner)
 [L 51] assertEquals(1, count)
 [L 52] result.getRunCount()
 [L 52] assertEquals(1, result.getRunCount())
 [L 59] Arrays.asList(new Object[] { 1 }, new Object[] { 2 })
 [L 73] Request.method(ParameterizedOneTimeSetup.class, "one[0]")
 [L 73] Request.method(ParameterizedOneTimeSetup.class, "one[0]").getRunner()
 [L 75] new JUnitCore().run(runner)
 [L 77] result.getRunCount()
 [L 77] assertEquals(1, result.getRunCount())
 [L 84] Arrays.asList(new Object[] { 1 }, new Object[] { 2 })
 [L 104] JUnitCore.runClasses(ParameterizedOneTimeBeforeClass.class)
 [L 105] assertEquals(1, count)
 [L 110] Request.method(OneTimeSetup.class, "one")
 [L 110] Request.method(OneTimeSetup.class, "one").getRunner()
 [L 111] runner.testCount()
 [L 111] assertEquals(1, runner.testCount())
 [L 117] Request.method(OneTimeSetup.class, "thisMethodDontExist")
 [L 116] new JUnitCore().run(Request.method(OneTimeSetup.class, "thisMethodDontExist"))
 [L 116] new JUnitCore().run(Request.method(OneTimeSetup.class, "thisMethodDontExist")).getFailureCount()
 [L 116] assertEquals(1, new JUnitCore().run(Request.method(OneTimeSetup.class, "thisMethodDontExist")).getFailureCount())
 [L 123] Request.aClass(OneTimeSetup.class)
 [L 123] Request.aClass(OneTimeSetup.class).getRunner()
 [L 124] runner.filter(new Filter() {

    @Override
    public boolean shouldRun(Description description) {
        return false;
    }

    @Override
    public String describe() {
        return null;
    }
})
 [L 165] Description.createTestDescription(TestOne.class, "a")
 [L 164] Request.aClass(OneTwoSuite.class)
 [L 164] Request.aClass(OneTwoSuite.class).filterWith(Description.createTestDescription(TestOne.class, "a"))
 [L 164] Request.aClass(OneTwoSuite.class).filterWith(Description.createTestDescription(TestOne.class, "a")).getRunner()
 [L 167] runner.getDescription()
 [L 168] description.getChildren()
 [L 168] description.getChildren().size()
 [L 168] assertEquals(1, description.getChildren().size())
 [L 187] Request.method(HasSuiteMethod.class, "a")
 [L 187] Request.method(HasSuiteMethod.class, "a").getRunner()
 [L 187] Request.method(HasSuiteMethod.class, "a").getRunner().getDescription()
 [L 187] Request.method(HasSuiteMethod.class, "a").getRunner().getDescription().testCount()
 [L 188] is(1)
 [L 188] assertThat(testCount, is(1))

/src/test/java/org/junit/tests/manipulation/SortableTest.java
=============================================================
 [L 23] o2.getDisplayName()
 [L 23] o1.getDisplayName()
 [L 23] o1.getDisplayName().compareTo(o2.getDisplayName())
 [L 31] o1.getDisplayName()
 [L 31] o2.getDisplayName()
 [L 31] o2.getDisplayName().compareTo(o1.getDisplayName())
 [L 63] forward()
 [L 63] Request.aClass(SortMe.class)
 [L 63] Request.aClass(SortMe.class).sortWith(forward())
 [L 65] new JUnitCore().run(forward)
 [L 66] assertEquals("abc", log)
 [L 71] backward()
 [L 71] Request.aClass(SortMe.class)
 [L 71] Request.aClass(SortMe.class).sortWith(backward())
 [L 73] new JUnitCore().run(backward)
 [L 74] assertEquals("cba", log)
 [L 116] forward()
 [L 116] Request.aClass(Enclosing.class)
 [L 116] Request.aClass(Enclosing.class).sortWith(forward())
 [L 118] new JUnitCore().run(forward)
 [L 119] assertEquals("AaAbAcBaBbBc", log)
 [L 124] backward()
 [L 124] Request.aClass(Enclosing.class)
 [L 124] Request.aClass(Enclosing.class).sortWith(backward())
 [L 126] new JUnitCore().run(backward)
 [L 127] assertEquals("BcBbBaAcAbAa", log)
 [L 162] forward()
 [L 162] Request.aClass(SortMe.class)
 [L 162] Request.aClass(SortMe.class).sortWith(forward())
 [L 164] new JUnitCore().run(forward)
 [L 165] assertEquals("abc", log)
 [L 170] backward()
 [L 170] Request.aClass(SortMe.class)
 [L 170] Request.aClass(SortMe.class).sortWith(backward())
 [L 172] new JUnitCore().run(backward)
 [L 173] assertEquals("cba", log)
 [L 201] forward()
 [L 201] Request.aClass(Unsortable.class)
 [L 201] Request.aClass(Unsortable.class).sortWith(forward())
 [L 202] new JUnitCore().run(unsorted)

/src/test/java/org/junit/tests/TestSystem.java
==============================================

/src/test/java/org/junit/tests/internal/runners/statements/FailOnTimeoutTest.java
=================================================================================
 [L 32] ExpectedException.none()
 [L 36] builder()
 [L 36] builder().withTimeout(TIMEOUT, MILLISECONDS)
 [L 36] builder().withTimeout(TIMEOUT, MILLISECONDS).build(statement)
 [L 40] thrown.expect(TestTimedOutException.class)
 [L 41] evaluateWithWaitDuration(DURATION_THAT_EXCEEDS_TIMEOUT)
 [L 46] thrown.expectMessage("test timed out after 100 milliseconds")
 [L 47] evaluateWithWaitDuration(DURATION_THAT_EXCEEDS_TIMEOUT)
 [L 53] is(exception)
 [L 53] thrown.expect(is(exception))
 [L 54] evaluateWithException(exception)
 [L 60] thrown.expect(TestTimedOutException.class)
 [L 61] evaluateWithWaitDuration(0)
 [L 62] evaluateWithWaitDuration(DURATION_THAT_EXCEEDS_TIMEOUT)
 [L 68] thrown.expectMessage("test timed out after 100 milliseconds")
 [L 70] evaluateWithException(new RuntimeException())
 [L 73] evaluateWithWaitDuration(DURATION_THAT_EXCEEDS_TIMEOUT)
 [L 83] e.getTimeout()
 [L 83] assertEquals(TIMEOUT, e.getTimeout())
 [L 84] e.getTimeUnit()
 [L 84] assertEquals(TimeUnit.MILLISECONDS, e.getTimeUnit())
 [L 80] evaluateWithWaitDuration(DURATION_THAT_EXCEEDS_TIMEOUT)
 [L 81] fail("No exception was thrown when test timed out")
 [L 91] failOnTimeout.evaluate()
 [L 97] failOnTimeout.evaluate()
 [L 107] sleep(waitDuration)
 [L 117] builder()
 [L 117] builder().withTimeout(TIMEOUT, MILLISECONDS)
 [L 117] builder().withTimeout(TIMEOUT, MILLISECONDS).build(infiniteLoop)
 [L 121] sleep(20)
 [L 123] sleep(20)
 [L 124] assertTrue("Thread has not been stopped.", firstCount == InfiniteLoopStatement.COUNT)
 [L 119] infiniteLoopTimeout.evaluate()
 [L 135] sleep(10)
 [L 144] builder()
 [L 144] builder().withTimeout(TIMEOUT, MILLISECONDS)
 [L 144] builder().withTimeout(TIMEOUT, MILLISECONDS).build(stuck)
 [L 150] timeoutException.getStackTrace()
 [L 154] element.getMethodName()
 [L 155] "theRealCauseOfTheTimeout".equals(methodName)
 [L 158] "notTheRealCauseOfTheTimeout".equals(methodName)
 [L 162] assertTrue("Stack trace does not contain the real cause of the timeout", stackTraceContainsTheRealCauseOfTheTimeout)
 [L 165] assertFalse("Stack trace contains other than the real cause of the timeout, which can be very misleading", stackTraceContainsOtherThanTheRealCauseOfTheTimeout)
 [L 146] stuckTimeout.evaluate()
 [L 148] fail("Expected timeout exception")
 [L 181] notTheRealCauseOfTheTimeout()
 [L 177] theRealCauseOfTheTimeout()
 [L 186] sleep(MAX_VALUE)
 [L 192] atan(now)
 [L 190] currentTimeMillis()
 [L 190] currentTimeMillis()

/src/test/java/org/junit/tests/internal/runners/ErrorReportingRunnerTest.java
=============================================================================

/src/test/java/org/junit/tests/assertion/MultipleFailureExceptionTest.java
==========================================================================
 [L 26] Collections.<Throwable>emptyList()
 [L 26] MultipleFailureException.assertEmpty(Collections.<Throwable>emptyList())
 [L 32] Collections.singletonList(exception)
 [L 37] assertSame(e, exception)
 [L 34] MultipleFailureException.assertEmpty(errors)
 [L 35] fail()
 [L 44] Collections.singletonList(exception)
 [L 49] assertSame(e, exception)
 [L 46] MultipleFailureException.assertEmpty(errors)
 [L 47] fail()
 [L 56] errors.add(new ExpectedException("basil"))
 [L 57] errors.add(new RuntimeException("garlic"))
 [L 63] expected.getFailures()
 [L 63] equalTo(errors)
 [L 63] assertThat(expected.getFailures(), equalTo(errors))
 [L 64] expected.getMessage()
 [L 64] expected.getMessage().startsWith("There were 2 errors:\n")
 [L 64] assertTrue(expected.getMessage().startsWith("There were 2 errors:\n"))
 [L 65] expected.getMessage()
 [L 65] expected.getMessage().contains("ExpectedException(basil)\n")
 [L 65] assertTrue(expected.getMessage().contains("ExpectedException(basil)\n"))
 [L 66] expected.getMessage()
 [L 66] expected.getMessage().contains("RuntimeException(garlic)")
 [L 66] assertTrue(expected.getMessage().contains("RuntimeException(garlic)"))
 [L 60] MultipleFailureException.assertEmpty(errors)
 [L 61] fail()

/src/test/java/org/junit/tests/assertion/ComparisonFailureTest.java
===================================================================
 [L 27] Arrays.asList(new Object[][] { // simple base case
{ "a", "b", "expected:<[a]> but was:<[b]>" }, // common prefix
{ "ba", "bc", "expected:<b[a]> but was:<b[c]>" }, // common suffix
{ "ab", "cb", "expected:<[a]b> but was:<[c]b>" }, // common pre and suffix
{ "abc", "adc", "expected:<a[b]c> but was:<a[d]c>" }, // expected is subset of actual
{ "ab", "abc", "expected:<ab[]> but was:<ab[c]>" }, // expected is superset of actual
{ "abc", "ab", "expected:<ab[c]> but was:<ab[]>" }, // overlapping matches.
{ "abc", "abbc", "expected:<ab[]c> but was:<ab[b]c>" }, // long prefix yielding "..."
{ "01234567890123456789PRE:hello:POST", "01234567890123456789PRE:world:POST", "expected:<...4567890123456789PRE:[hello]:POST> but was:<...4567890123456789PRE:[world]:POST>" }, // long suffix	yielding "..."
{ "PRE:hello:01234567890123456789POST", "PRE:world:01234567890123456789POST", "expected:<PRE:[hello]:0123456789012345678...> but was:<PRE:[world]:0123456789012345678...>" }, // bug609972
{ "S&P500", "0", "expected:<[S&P50]0> but was:<[]0>" }, // empty expected string
{ "", "a", "expected:<[]> but was:<[a]>" }, // empty actual string
{ "a", "", "expected:<[a]> but was:<[]>" } })
 [L 75] failure.getMessage()
 [L 75] assertEquals(message, failure.getMessage())

/src/test/java/org/junit/tests/assertion/AssertionTest.java
===========================================================
 [L 39] Assert.fail()
 [L 47] exception.toString()
 [L 47] assertEquals("java.lang.AssertionError", exception.toString())
 [L 45] Assert.fail()
 [L 56] exception.toString()
 [L 56] assertEquals("java.lang.AssertionError: woops!", exception.toString())
 [L 54] Assert.fail("woops!")
 [L 62] assertArrayEquals((new Object[] { new Object() }), (new Object[] { new Object() }))
 [L 67] assertArrayEquals("not equal", (new Object[] { new Object() }), (new Object[] { new Object() }))
 [L 75] exception.getMessage()
 [L 75] assertEquals("not equal: expected array was null", exception.getMessage())
 [L 73] assertArrayEquals("not equal", null, (new Object[] { new Object() }))
 [L 84] exception.getMessage()
 [L 84] assertEquals("not equal: actual array was null", exception.getMessage())
 [L 82] assertArrayEquals("not equal", (new Object[] { new Object() }), null)
 [L 93] exception.getMessage()
 [L 93] assertEquals("not equal: array lengths differed, expected.length=0 actual.length=1", exception.getMessage())
 [L 91] assertArrayEquals("not equal", (new Object[0]), (new Object[1]))
 [L 99] assertArrayEquals("not equal", (new Object[] { "this is a very long string in the middle of an array" }), (new Object[] { "this is another very long string in the middle of an array" }))
 [L 107] exception.getMessage()
 [L 107] assertEquals("arrays first differed at element [0]; expected:<true> but was:<false>", exception.getMessage())
 [L 105] assertArrayEquals((new Object[] { true }), (new Object[] { false }))
 [L 118] exception.getMessage()
 [L 118] assertEquals("arrays first differed at element [1]; expected:<true> but was:<false>", exception.getMessage())
 [L 115] assertArrayEquals((new Object[] { true, true }), (new Object[] { true, false }))
 [L 128] exception.getMessage()
 [L 128] assertEquals("message: arrays first differed at element [0]; expected:<true> but was:<false>", exception.getMessage())
 [L 126] assertArrayEquals("message", (new Object[] { true }), (new Object[] { false }))
 [L 139] exception.getMessage()
 [L 139] assertEquals("message: arrays first differed at element [1]; expected:<true> but was:<false>", exception.getMessage())
 [L 136] assertArrayEquals("message", (new Object[] { true, true }), (new Object[] { true, false }))
 [L 137] fail()
 [L 145] assertArrayEquals((new Object[][] { { true, true }, { false, false } }), (new Object[][] { { true, true }, { false, false } }))
 [L 152] assertArrayEquals(int1, int2)
 [L 157] assertArrayEquals(new boolean[] { true }, new boolean[] { true })
 [L 158] assertArrayEquals(new byte[] { 1 }, new byte[] { 1 })
 [L 159] assertArrayEquals(new char[] { 1 }, new char[] { 1 })
 [L 160] assertArrayEquals(new short[] { 1 }, new short[] { 1 })
 [L 161] assertArrayEquals(new int[] { 1 }, new int[] { 1 })
 [L 162] assertArrayEquals(new long[] { 1 }, new long[] { 1 })
 [L 163] assertArrayEquals(new double[] { 1.0 }, new double[] { 1.0 }, 1.0)
 [L 164] assertArrayEquals(new float[] { 1.0f }, new float[] { 1.0f }, 1.0f)
 [L 169] assertArrayEquals(new double[] { 1.0 }, new double[] { 2.5 }, 1.0)
 [L 174] assertArrayEquals(new float[] { 1.0f }, new float[] { 2.5f }, 1.0f)
 [L 179] assertArrayEquals(new boolean[] { true }, new boolean[] { false })
 [L 184] assertEquals(new Integer(1), new Long(1))
 [L 189] assertEquals(1, 1L)
 [L 194] assertArrayEquals((new Object[] { new Object[] { true, true }, new Object[] { false, false } }), (new Object[] { new Object[] { true, true }, new Object[] { false, false } }))
 [L 203] exception.getMessage()
 [L 203] assertEquals("message: arrays first differed at element [1][0]; expected:<false> but was:<true>", exception.getMessage())
 [L 200] assertArrayEquals("message", (new Object[][] { { true, true }, { false, false } }), (new Object[][] { { true, true }, { true, false } }))
 [L 201] fail()
 [L 213] exception.getMessage()
 [L 213] assertEquals("arrays first differed at element [1][0]; expected:<false> but was:<true>", exception.getMessage())
 [L 210] assertArrayEquals((new Object[][] { { true, true }, { false, false } }), (new Object[][] { { true, true }, { true, false } }))
 [L 211] fail()
 [L 222] exception.getMessage()
 [L 222] assertEquals("message: arrays first differed at element [1]; array lengths differed, expected.length=2 actual.length=1", exception.getMessage())
 [L 220] assertArrayEquals("message", new Object[][] { { true, true }, { false, false } }, new Object[][] { { true, true }, { false } })
 [L 226] fail("Expected AssertionError to be thrown")
 [L 234] exception.getMessage()
 [L 234] assertEquals("arrays first differed at element [1]; array lengths differed, expected.length=2 actual.length=1", exception.getMessage())
 [L 232] assertArrayEquals(new Object[][] { { true, true }, { false, false } }, new Object[][] { { true, true }, { false } })
 [L 238] fail("Expected AssertionError to be thrown")
 [L 245] assertArrayEquals(objects1, objects2)
 [L 253] exception.getMessage()
 [L 253] assertEquals("not equal expected:<[one]> but was:<[two]>", exception.getMessage())
 [L 251] assertEquals("not equal", "one", "two")
 [L 262] assertArrayEquals(objects1, objects2)
 [L 270] assertArrayEquals("equal", objects1, objects2)
 [L 276] assertEquals(o, o)
 [L 277] assertEquals("abc", "abc")
 [L 278] assertEquals(true, true)
 [L 279] assertEquals((byte) 1, (byte) 1)
 [L 280] assertEquals('a', 'a')
 [L 281] assertEquals((short) 1, (short) 1)
 [L 282] assertEquals(1, 1)
 [L 283] assertEquals(1l, 1l)
 [L 284] assertEquals(1.0, 1.0, 0.0)
 [L 285] assertEquals(1.0d, 1.0d, 0.0d)
 [L 290] assertEquals(new Object(), null)
 [L 295] assertEquals(null, new Object())
 [L 305] o.toString()
 [L 305] e.getMessage()
 [L 305] assertEquals("message expected:<null> but was:<" + o.toString() + ">", e.getMessage())
 [L 302] assertEquals("message", null, o)
 [L 303] fail()
 [L 316] o.toString()
 [L 316] e.getMessage()
 [L 316] assertEquals("message expected:<" + o.toString() + "> but was:<null>", e.getMessage())
 [L 313] assertEquals("message", o, null)
 [L 314] fail()
 [L 322] assertEquals(new Object(), new Object())
 [L 327] assertEquals("abc", "def")
 [L 332] assertEquals(true, false)
 [L 337] assertEquals((byte) 1, (byte) 2)
 [L 342] assertEquals('a', 'b')
 [L 347] assertEquals((short) 1, (short) 2)
 [L 352] assertEquals(1, 2)
 [L 357] assertEquals(1l, 2l)
 [L 362] assertEquals(1.0, 2.0, 0.9)
 [L 368] assertEquals(1.0, 1.1)
 [L 376] Assert.assertArrayEquals(f1, f2, delta)
 [L 381] assertEquals(new BigDecimal("123.4"), new BigDecimal("123.0"))
 [L 387] assertEquals(1.0d, 2.0d, 0.9d)
 [L 392] assertEquals(Float.NaN, Float.NaN, Float.POSITIVE_INFINITY)
 [L 393] assertEquals(Double.NaN, Double.NaN, Double.POSITIVE_INFINITY)
 [L 403] e.getMessage()
 [L 403] assertEquals("expected null, but was:<junit>", e.getMessage())
 [L 400] assertNull("junit")
 [L 401] fail()
 [L 414] exception.getMessage()
 [L 414] assertEquals("message expected null, but was:<hello>", exception.getMessage())
 [L 411] assertNull("message", "hello")
 [L 412] fail()
 [L 421] assertSame(o1, o1)
 [L 428] assertNotSame(o1, o2)
 [L 433] assertSame(new Object(), new Object())
 [L 439] assertNotSame(o, o)
 [L 449] exception.getMessage()
 [L 448] assertEquals("not same expected same:<hello> was not:<good-bye>", exception.getMessage())
 [L 445] assertSame("not same", "hello", "good-bye")
 [L 446] fail()
 [L 459] exception.getMessage()
 [L 459] assertEquals("expected same:<hello> was not:<good-bye>", exception.getMessage())
 [L 456] assertSame("hello", "good-bye")
 [L 457] fail()
 [L 470] exception.getMessage()
 [L 470] assertEquals("message expected not same", exception.getMessage())
 [L 467] assertNotSame("message", o, o)
 [L 468] fail()
 [L 481] exception.getMessage()
 [L 481] assertEquals("expected not same", exception.getMessage())
 [L 478] assertNotSame(o, o)
 [L 479] fail()
 [L 491] exception.getMessage()
 [L 491] assertNull(exception.getMessage())
 [L 488] fail(null)
 [L 501] e.getMessage()
 [L 501] assertEquals("expected:<[a]> but was:<[b]>", e.getMessage())
 [L 498] assertEquals(null, "a", "b")
 [L 499] fail()
 [L 511] e.getMessage()
 [L 511] assertEquals("expected:<1> but was:<2>", e.getMessage())
 [L 508] assertEquals(null, 1, 2)
 [L 509] fail()
 [L 519] assertEquals(a1, a2)
 [L 531] assertEquals(b, s)
 [L 532] assertEquals(b, i)
 [L 533] assertEquals(b, l)
 [L 534] assertEquals(s, i)
 [L 535] assertEquals(s, l)
 [L 536] assertEquals(i, l)
 [L 537] assertEquals(f, d, 0)
 [L 545] e.getMessage()
 [L 545] assertEquals("expected: java.lang.String<4> but was: java.lang.Integer<4>", e.getMessage())
 [L 543] assertEquals("4", new Integer(4))
 [L 559] e.getMessage()
 [L 559] assertEquals(expectedMessage, e.getMessage())
 [L 557] equalTo(expected)
 [L 557] assertThat("identifier", actual, equalTo(expected))
 [L 570] e.getMessage()
 [L 570] assertEquals(expectedMessage, e.getMessage())
 [L 568] instanceOf(Integer.class)
 [L 568] is(instanceOf(Integer.class))
 [L 568] assertThat("identifier", "actual", is(instanceOf(Integer.class)))
 [L 584] e.getMessage()
 [L 584] assertEquals(expectedMessage, e.getMessage())
 [L 582] equalTo(expected)
 [L 582] assertThat(actual, equalTo(expected))
 [L 593] e.getMessage()
 [L 593] assertEquals("expected: null<null> but was: java.lang.String<null>", e.getMessage())
 [L 591] assertEquals(null, "null")
 [L 599] assertEquals("null", null)
 [L 605] Integer.valueOf("1")
 [L 606] assertEquals(bigDecimal, integer)
 [L 612] assertNotEquals(o, o)
 [L 617] assertNotEquals(new Object(), new Object())
 [L 629] e.getMessage()
 [L 629] assertEquals(message + ". Actual: " + value1, e.getMessage())
 [L 627] assertNotEquals(message, value1, value2)
 [L 633] fail("Failed on assertion.")
 [L 644] value1.toString()
 [L 644] e.getMessage()
 [L 644] e.getMessage().contains(value1.toString())
 [L 644] assertTrue(e.getMessage().contains(value1.toString()))
 [L 642] assertNotEquals(value1, value2)
 [L 648] fail("Failed on assertion.")
 [L 653] assertNotEquals(1L, 2L)
 [L 654] assertNotEquals("The values should be different", 1L, 2L)
 [L 655] assertNotEquals(1.0, 2.0, 0)
 [L 656] assertNotEquals("The values should be different", 1.0, 2.0, 0)
 [L 657] assertNotEquals(1.0f, 2.0f, 0f)
 [L 658] assertNotEquals("The values should be different", 1.0f, 2.0f, 0f)
 [L 663] assertNotEquals(1.0, 0.9, 0.1)
 [L 668] assertNotEquals(1.0f, 0.75f, 0.25f)
 [L 673] assertNotEquals(Double.NaN, Double.NaN, 1)
 [L 678] assertNotEquals(Float.NaN, Float.NaN, 1f)
 [L 683] nonThrowingRunnable()
 [L 683] expectThrows(Throwable.class, nonThrowingRunnable())
 [L 691] ex.getMessage()
 [L 691] assertEquals("expected Throwable to be thrown, but nothing was thrown", ex.getMessage())
 [L 689] nonThrowingRunnable()
 [L 689] expectThrows(Throwable.class, nonThrowingRunnable())
 [L 694] fail()
 [L 701] throwingRunnable(npe)
 [L 701] expectThrows(Throwable.class, throwingRunnable(npe))
 [L 703] assertSame(npe, throwable)
 [L 710] throwingRunnable(npe)
 [L 710] expectThrows(IOException.class, throwingRunnable(npe))
 [L 720] ex.getCause()
 [L 720] assertSame(npe, ex.getCause())
 [L 721] ex.getCause()
 [L 721] ex.getCause().getMessage()
 [L 721] assertEquals("inner-message", ex.getCause().getMessage())
 [L 718] throwingRunnable(npe)
 [L 718] expectThrows(IOException.class, throwingRunnable(npe))
 [L 724] fail()
 [L 735] error.getMessage()
 [L 734] assertEquals("unexpected exception type thrown; expected:<IOException> but was:<NullPointerException>", error.getMessage())
 [L 736] error.getCause()
 [L 736] assertSame(npe, error.getCause())
 [L 732] throwingRunnable(npe)
 [L 732] expectThrows(IOException.class, throwingRunnable(npe))
 [L 739] fail()

/src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java
====================================================================
 [L 29] suite.addTestSuite(OneTest.class)
 [L 38] runner.run(All.class)
 [L 39] assertTrue(run)
 [L 45] tests.testCount()
 [L 45] assertEquals(1, tests.testCount())
 [L 51] tests.getDescription()
 [L 51] tests.getDescription().toString()
 [L 51] containsString("OneTest")
 [L 51] assertThat(tests.getDescription().toString(), containsString("OneTest"))
 [L 65] suite.addTest(new JUnit4TestAdapter(JUnit4Test.class))
 [L 73] tests.testCount()
 [L 73] assertEquals(1, tests.testCount())

/src/test/java/org/junit/tests/junit3compatibility/ClassRequestTest.java
========================================================================
 [L 17] new SuiteMethodBuilder().runnerForClass(PrivateSuiteMethod.class)
 [L 17] assertNull(new SuiteMethodBuilder().runnerForClass(PrivateSuiteMethod.class))

/src/test/java/org/junit/tests/junit3compatibility/JUnit38ClassRunnerTest.java
==============================================================================
 [L 36] runner.testCount()
 [L 36] assertEquals(1, runner.testCount())
 [L 42] Assert.fail()
 [L 49] new JUnitCore().run(runner)
 [L 50] result.getFailures()
 [L 50] result.getFailures().get(0)
 [L 51] Description.createTestDescription(AnnotatedTest.class, "foo")
 [L 51] failure.getDescription()
 [L 51] assertEquals(Description.createTestDescription(AnnotatedTest.class, "foo"), failure.getDescription())
 [L 67] Description.createTestDescription(OneTest.class, "testOne")
 [L 67] assertEquals(Description.createTestDescription(OneTest.class, "testOne"), description)
 [L 73] runner.addListener(listener)
 [L 75] runner.run(OneTest.class)
 [L 76] assertEquals(1, count)
 [L 77] result.getRunCount()
 [L 77] assertEquals(1, result.getRunCount())
 [L 88] JUnitCore.runClasses(ClassWithInvalidMethod.class)
 [L 89] result.getFailures()
 [L 89] result.getFailures().get(0)
 [L 90] failure.getDescription()
 [L 90] failure.getDescription().getMethodName()
 [L 90] assertEquals("warning", failure.getDescription().getMethodName())
 [L 91] failure.getDescription()
 [L 91] failure.getDescription().getClassName()
 [L 91] assertEquals("junit.framework.TestSuite$1", failure.getDescription().getClassName())
 [L 114] assertAnnotationFiltering(runner)
 [L 120] assertAnnotationFiltering(runner)
 [L 124] runner.getDescription()
 [L 125] d.testCount()
 [L 125] assertEquals(2, d.testCount())
 [L 127] methodDesc.getMethodName()
 [L 127] methodDesc.getMethodName().equals("testAnnotated")
 [L 130] methodDesc.getAnnotation(MyAnnotation.class)
 [L 130] assertNull(methodDesc.getAnnotation(MyAnnotation.class))
 [L 128] methodDesc.getAnnotation(MyAnnotation.class)
 [L 128] assertNotNull(methodDesc.getAnnotation(MyAnnotation.class))
 [L 126] d.getChildren()
 [L 138] description.isSuite()
 [L 153] runner.filter(new RejectAllTestsFilter())

/src/test/java/org/junit/tests/junit3compatibility/OldTests.java
================================================================
 [L 10] junit.tests.AllTests.suite()

/src/test/java/org/junit/tests/junit3compatibility/InitializationErrorForwardCompatibilityTest.java
===================================================================================================
 [L 51] fAdapter.getTests()
 [L 51] fAdapter.getTests().size()
 [L 51] assertEquals(1, fAdapter.getTests().size())
 [L 57] fAdapter.run(result)
 [L 58] result.errorCount()
 [L 58] assertEquals(1, result.errorCount())
 [L 59] result.errors()
 [L 59] result.errors().nextElement()
 [L 59] result.errors().nextElement().exceptionMessage()
 [L 59] assertEquals(CantInitialize.UNIQUE_ERROR_MESSAGE, result.errors().nextElement().exceptionMessage())
 [L 87] fAdapter.getTests()
 [L 87] fAdapter.getTests().get(0)
 [L 90] result.addListener(listener)
 [L 91] fAdapter.run(result)
 [L 92] listener.getError()
 [L 92] assertNotNull(listener.getError())
 [L 93] listener.getError()
 [L 93] assertTrue(shouldFail == listener.getError())

/src/test/java/org/junit/tests/junit3compatibility/ForwardCompatibilityPrintingTest.java
========================================================================================
 [L 36] expected(new String[] { ".E", "Time: 0", "Errors here", "", "FAILURES!!!", "Tests run: 1,  Failures: 0,  Errors: 1", "" })
 [L 42] getWriter()
 [L 42] getWriter().println("Errors here")
 [L 45] runner.setPrinter(printer)
 [L 47] suite.addTest(new TestCase() {

    @Override
    public void runTest() throws Exception {
        throw new Exception();
    }
})
 [L 53] runner.doRun(suite)
 [L 54] output.toString()
 [L 54] assertEquals(expected, output.toString())
 [L 60] Assert.fail()
 [L 69] expected(new String[] { ".E", "Time: 0", "Errors here", "", "FAILURES!!!", "Tests run: 1,  Failures: 0,  Errors: 1", "" })
 [L 75] getWriter()
 [L 75] getWriter().println("Errors here")
 [L 78] runner.setPrinter(printer)
 [L 79] runner.doRun(new JUnit4TestAdapter(ATest.class))
 [L 80] output.toString()
 [L 80] assertEquals(expected, output.toString())
 [L 87] expectedWriter.println(lines[i])
 [L 89] expected.toString()

/src/test/java/org/junit/tests/junit3compatibility/ForwardCompatibilityTest.java
================================================================================
 [L 43] adapter.run(result)
 [L 44] assertEquals("before test after ", fLog)
 [L 49] adapter.getTests()
 [L 49] adapter.getTests().get(0)
 [L 50] NewTest.class.getName()
 [L 50] String.format("test(%s)", NewTest.class.getName())
 [L 50] test.toString()
 [L 50] assertEquals(String.format("test(%s)", NewTest.class.getName()), test.toString())
 [L 56] adapter1.getTests()
 [L 56] adapter1.getTests().get(0)
 [L 56] adapter2.getTests()
 [L 56] adapter2.getTests().get(0)
 [L 56] assertSame(adapter1.getTests().get(0), adapter2.getTests().get(0))
 [L 71] adapter.run(result)
 [L 72] result.errors()
 [L 72] result.errors().nextElement()
 [L 72] result.errors().nextElement().thrownException()
 [L 72] assertEquals(exception, result.errors().nextElement().thrownException())
 [L 82] log.append(" start ")
 [L 82] log.append(" start ").append(test)
 [L 86] log.append(" end ")
 [L 86] log.append(" end ").append(test)
 [L 90] log.append(" failure ")
 [L 90] log.append(" failure ").append(test)
 [L 94] log.append(" error " + test)
 [L 79] result.addListener(new TestListener() {

    public void startTest(junit.framework.Test test) {
        log.append(" start ").append(test);
    }

    public void endTest(junit.framework.Test test) {
        log.append(" end ").append(test);
    }

    public void addFailure(junit.framework.Test test, AssertionFailedError t) {
        log.append(" failure ").append(test);
    }

    public void addError(junit.framework.Test test, Throwable e) {
        log.append(" error " + test);
    }
})
 [L 97] adapter.run(result)
 [L 98] ErrorTest.class.getName()
 [L 98] String.format("error(%s)", ErrorTest.class.getName())
 [L 99] String.format(" start %s error %s end %s", testName, testName, testName)
 [L 99] log.toString()
 [L 99] assertEquals(String.format(" start %s error %s end %s", testName, testName, testName), log.toString())
 [L 112] adapter.run(result)
 [L 113] result.wasSuccessful()
 [L 113] assertFalse(result.wasSuccessful())
 [L 126] adapter.run(result)
 [L 127] result.wasSuccessful()
 [L 127] assertTrue(result.wasSuccessful())
 [L 175] adapter.run(result)
 [L 176] assertEquals("before class before test after before test after after class ", log)
 [L 193] adapter.run(result)
 [L 194] result.errorCount()
 [L 194] assertEquals(1, result.errorCount())
 [L 210] adapter.run(result)
 [L 211] result.errorCount()
 [L 211] assertEquals(1, result.errorCount())
 [L 212] result.errors()
 [L 212] result.errors().nextElement()
 [L 213] failure.exceptionMessage()
 [L 213] failure.exceptionMessage().contains("Method shouldBeStatic() should be static")
 [L 213] assertTrue(failure.exceptionMessage().contains("Method shouldBeStatic() should be static"))
 [L 246] adapter.run(result)
 [L 247] assertTrue(wasRun)
 [L 252] NoTests.class.getName()
 [L 252] adapter.toString()
 [L 252] assertEquals(NoTests.class.getName(), adapter.toString())

/src/test/java/org/junit/tests/junit3compatibility/SuiteMethodTest.java
=======================================================================
 [L 28] suite.addTest(new OldTest("notObviouslyATest"))
 [L 40] JUnitCore.runClasses(OldTest.class)
 [L 41] assertTrue(wasRun)
 [L 58] JUnitCore.runClasses(NewTest.class)
 [L 59] assertTrue(wasRun)
 [L 77] JUnitCore.runClasses(CompatibilityTest.class)
 [L 78] result.getIgnoreCount()
 [L 78] assertEquals(0, result.getIgnoreCount())
 [L 80] Request.aClass(CompatibilityTest.class)
 [L 80] Request.aClass(CompatibilityTest.class).getRunner()
 [L 80] Request.aClass(CompatibilityTest.class).getRunner().getDescription()
 [L 81] description.getChildren()
 [L 81] description.getChildren().size()
 [L 81] assertEquals(0, description.getChildren().size())
 [L 91] fail("called with JUnit 4 runner")
 [L 99] JUnitCore.runClasses(NewTestSuiteFails.class)
 [L 100] result.getFailureCount()
 [L 100] assertEquals(1, result.getFailureCount())
 [L 101] assertFalse(wasRun)
 [L 127] JUnitCore.runClasses(NewTestSuiteNotUsed.class)
 [L 128] assertTrue(wasRun)
 [L 129] assertFalse(NewTestSuiteNotUsed.wasIgnoredRun)
 [L 130] res.getFailureCount()
 [L 130] assertEquals(0, res.getFailureCount())
 [L 131] res.getRunCount()
 [L 131] assertEquals(1, res.getRunCount())
 [L 132] res.getIgnoreCount()
 [L 132] assertEquals(0, res.getIgnoreCount())

/src/test/java/org/junit/tests/junit3compatibility/OldTestClassAdaptingListenerTest.java
========================================================================================
 [L 18] result.createListener()
 [L 20] notifier.addFirstListener(listener)
 [L 23] new JUnit38ClassRunner(testCase).createAdaptingListener(notifier)
 [L 25] adaptingListener.addFailure(testCase, new AssertionFailedError())
 [L 26] result.getFailureCount()
 [L 26] assertEquals(1, result.getFailureCount())

/src/test/java/org/junit/tests/description/TestDescriptionMethodNameTest.java
=============================================================================
 [L 29] Arrays.asList(new Object[] { "simple" }, new Object[] { "with space" }, new Object[] { "[]!@#$%^&*()" }, new Object[] { "" }, new Object[] { "\t" }, new Object[] { "\n" }, new Object[] { "\r\n" }, new Object[] { "\r" }, new Object[] { "" }, new Object[] { " " }, new Object[] { " " })
 [L 46] Description.createTestDescription("some-class-name", methodName)
 [L 47] description.getMethodName()
 [L 47] assertNotNull("Method name should be not null", description.getMethodName())
 [L 48] description.getMethodName()
 [L 48] assertEquals(methodName, description.getMethodName())

/src/test/java/org/junit/tests/description/TestDescriptionTest.java
===================================================================
 [L 12] getClass()
 [L 12] Description.createTestDescription(getClass(), "a")
 [L 12] Description.createTestDescription(getClass(), "a").equals(new Integer(5))
 [L 12] assertFalse(Description.createTestDescription(getClass(), "a").equals(new Integer(5)))
 [L 17] Description.createSuiteDescription("Hello")
 [L 17] Description.createSuiteDescription("Hello")
 [L 17] Description.createSuiteDescription("Hello").equals(Description.createSuiteDescription("Hello"))
 [L 17] assertTrue(Description.createSuiteDescription("Hello").equals(Description.createSuiteDescription("Hello")))
 [L 22] Description.createSuiteDescription("Hello", 3)
 [L 22] Description.createSuiteDescription("Hello", 2)
 [L 22] Description.createSuiteDescription("Hello", 2).equals(Description.createSuiteDescription("Hello", 3))
 [L 22] assertFalse(Description.createSuiteDescription("Hello", 2).equals(Description.createSuiteDescription("Hello", 3)))

/src/test/java/org/junit/tests/description/SuiteDescriptionTest.java
====================================================================
 [L 10] Description.createSuiteDescription("a")
 [L 11] Description.createSuiteDescription("a")
 [L 12] Description.createSuiteDescription("b")
 [L 14] descriptionWithTwoKids("foo", "bar")
 [L 15] descriptionWithTwoKids("foo", "baz")
 [L 19] assertEquals(childless, anotherChildless)
 [L 20] childless.equals(namedB)
 [L 20] assertFalse(childless.equals(namedB))
 [L 21] assertEquals(childless, twoKids)
 [L 22] assertEquals(twoKids, anotherTwoKids)
 [L 23] twoKids.equals(new Integer(5))
 [L 23] assertFalse(twoKids.equals(new Integer(5)))
 [L 28] childless.hashCode()
 [L 28] anotherChildless.hashCode()
 [L 28] assertEquals(childless.hashCode(), anotherChildless.hashCode())
 [L 29] childless.hashCode()
 [L 29] namedB.hashCode()
 [L 29] assertFalse(childless.hashCode() == namedB.hashCode())
 [L 33] Description.createSuiteDescription("a")
 [L 34] getClass()
 [L 34] Description.createTestDescription(getClass(), first)
 [L 34] twoKids.addChild(Description.createTestDescription(getClass(), first))
 [L 35] getClass()
 [L 35] Description.createTestDescription(getClass(), second)
 [L 35] twoKids.addChild(Description.createTestDescription(getClass(), second))

/src/test/java/org/junit/tests/description/AnnotatedDescriptionTest.java
========================================================================
 [L 30] describe(AnnotatedClass.class)
 [L 30] describe(AnnotatedClass.class).getAnnotation(MyOwnAnnotation.class)
 [L 30] assertTrue((describe(AnnotatedClass.class).getAnnotation(MyOwnAnnotation.class) != null))
 [L 36] describe(ValueAnnotatedClass.class)
 [L 36] describe(ValueAnnotatedClass.class).getAnnotations()
 [L 36] describe(ValueAnnotatedClass.class).getAnnotations().size()
 [L 36] assertEquals(1, describe(ValueAnnotatedClass.class).getAnnotations().size())
 [L 49] describe(IgnoredClass.class)
 [L 49] describe(IgnoredClass.class).getAnnotation(Ignore.class)
 [L 49] assertTrue((describe(IgnoredClass.class).getAnnotation(Ignore.class) != null))
 [L 66] describe(ValueAnnotatedClass.class)
 [L 67] description.getAnnotation(ValuedAnnotation.class)
 [L 67] description.getAnnotation(ValuedAnnotation.class).value()
 [L 67] assertEquals("hello", description.getAnnotation(ValuedAnnotation.class).value())
 [L 73] describe(ValueAnnotatedClass.class)
 [L 74] description.childlessCopy()
 [L 74] description.childlessCopy().getAnnotation(ValuedAnnotation.class)
 [L 74] description.childlessCopy().getAnnotation(ValuedAnnotation.class).value()
 [L 74] assertEquals("hello", description.childlessCopy().getAnnotation(ValuedAnnotation.class).value())
 [L 90] annotation.annotationType()
 [L 90] assertEquals(Ignore.class, annotation.annotationType())
 [L 94] Request.aClass(testClass)
 [L 94] Request.aClass(testClass).getRunner()
 [L 94] Request.aClass(testClass).getRunner().getDescription()

/src/test/java/org/junit/tests/package-info.java
================================================

/src/test/java/org/junit/tests/validation/BadlyFormedClassesTest.java
=====================================================================
 [L 51] exceptionMessageFrom(FaultyConstructor.class)
 [L 52] assertEquals("Thrown during construction", message)
 [L 57] exceptionMessageFrom(NoTests.class)
 [L 57] assertEquals("No runnable methods", exceptionMessageFrom(NoTests.class))
 [L 63] exceptionMessageFrom(BadBeforeMethodWithLegacyRunner.class)
 [L 62] assertEquals("Method before should be public", exceptionMessageFrom(BadBeforeMethodWithLegacyRunner.class))
 [L 68] core.run(testClass)
 [L 69] result.getFailures()
 [L 69] result.getFailures().get(0)
 [L 70] failure.getException()
 [L 70] failure.getException().getMessage()

/src/test/java/org/junit/tests/validation/anotherpackage/Super.java
===================================================================

/src/test/java/org/junit/tests/validation/anotherpackage/Sub.java
=================================================================

/src/test/java/org/junit/tests/validation/FailedConstructionTest.java
=====================================================================
 [L 23] JUnitCore.runClasses(CantConstruct.class)
 [L 24] result.getFailures()
 [L 24] result.getFailures().get(0)
 [L 25] Description.createTestDescription(CantConstruct.class, "foo")
 [L 26] failure.getDescription()
 [L 26] Assert.assertEquals(expected, failure.getDescription())

/src/test/java/org/junit/tests/validation/ValidationTest.java
=============================================================
 [L 21] WrongBeforeClass.class.getName()
 [L 22] Request.aClass(WrongBeforeClass.class)
 [L 22] Request.aClass(WrongBeforeClass.class).getRunner()
 [L 22] Request.aClass(WrongBeforeClass.class).getRunner().getDescription()
 [L 22] Request.aClass(WrongBeforeClass.class).getRunner().getDescription().getDisplayName()
 [L 21] assertEquals(WrongBeforeClass.class.getName(), Request.aClass(WrongBeforeClass.class).getRunner().getDescription().getDisplayName())
 [L 37] JUnitCore.runClasses(NonStaticBeforeClass.class)
 [L 38] result.getFailures()
 [L 38] result.getFailures().get(0)
 [L 38] result.getFailures().get(0).getMessage()
 [L 38] assertEquals("Method before() should be static", result.getFailures().get(0).getMessage())

/src/test/java/org/junit/tests/ObjectContractTest.java
======================================================
 [L 21] toStringMethod()
 [L 22] toStringMethod()
 [L 27] assumeNotNull(a)
 [L 28] a.equals(b)
 [L 33] assumeNotNull(a, b)
 [L 34] is(b)
 [L 34] assumeThat(a, is(b))
 [L 35] a.hashCode()
 [L 35] b.hashCode()
 [L 35] is(b.hashCode())
 [L 35] assertThat(a.hashCode(), is(b.hashCode()))
 [L 40] Object.class.getMethod("toString")

/src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java
====================================================================
 [L 29] fail()
 [L 35] JUnitCore.runClasses(Example.class)
 [L 36] result.getRunCount()
 [L 36] is(2)
 [L 36] assertThat(result.getRunCount(), is(2))
 [L 37] result.getFailureCount()
 [L 37] is(1)
 [L 37] assertThat(result.getFailureCount(), is(1))
 [L 53] fail()
 [L 60] JUnitCore.runClasses(UnconstructableExample.class)
 [L 61] result.getRunCount()
 [L 61] is(2)
 [L 61] assertThat(result.getRunCount(), is(2))
 [L 62] result.getFailureCount()
 [L 62] is(2)
 [L 62] assertThat(result.getFailureCount(), is(2))

/src/test/java/org/junit/internal/builders/AnnotatedBuilderTest.java
====================================================================
 [L 19] builder.runnerForClass(Object.class)
 [L 20] nullValue()
 [L 20] is(nullValue())
 [L 20] assertThat(runner, is(nullValue()))
 [L 25] builder.runnerForClass(OuterClass.class)
 [L 26] instanceOf(RunnerSpy.class)
 [L 26] is(instanceOf(RunnerSpy.class))
 [L 26] assertThat(runner, is(instanceOf(RunnerSpy.class)))
 [L 29] runnerSpy.getInvokedTestClass()
 [L 29] is((Object) OuterClass.class)
 [L 29] assertThat(runnerSpy.getInvokedTestClass(), is((Object) OuterClass.class))
 [L 34] builder.runnerForClass(OuterClass.InnerClassWithoutOwnRunWith.class)
 [L 35] instanceOf(RunnerSpy.class)
 [L 35] is(instanceOf(RunnerSpy.class))
 [L 35] assertThat(runner, is(instanceOf(RunnerSpy.class)))
 [L 38] runnerSpy.getInvokedTestClass()
 [L 38] is((Object) OuterClass.InnerClassWithoutOwnRunWith.class)
 [L 38] assertThat(runnerSpy.getInvokedTestClass(), is((Object) OuterClass.InnerClassWithoutOwnRunWith.class))
 [L 43] builder.runnerForClass(OuterClass.InnerClassWithoutOwnRunWith.MostInnerClass.class)
 [L 44] instanceOf(RunnerSpy.class)
 [L 44] is(instanceOf(RunnerSpy.class))
 [L 44] assertThat(runner, is(instanceOf(RunnerSpy.class)))
 [L 47] runnerSpy.getInvokedTestClass()
 [L 47] is((Object) OuterClass.InnerClassWithoutOwnRunWith.MostInnerClass.class)
 [L 47] assertThat(runnerSpy.getInvokedTestClass(), is((Object) OuterClass.InnerClassWithoutOwnRunWith.MostInnerClass.class))
 [L 52] builder.runnerForClass(OuterClass.InnerClassWithOwnRunWith.class)
 [L 53] instanceOf(InnerRunner.class)
 [L 53] is(instanceOf(InnerRunner.class))
 [L 53] assertThat(runner, is(instanceOf(InnerRunner.class)))
 [L 56] runnerSpy.getInvokedTestClass()
 [L 56] is((Object) OuterClass.InnerClassWithOwnRunWith.class)
 [L 56] assertThat(runnerSpy.getInvokedTestClass(), is((Object) OuterClass.InnerClassWithOwnRunWith.class))
 [L 61] builder.runnerForClass(OuterClass.InnerClassWithOwnRunWith.MostInnerClass.class)
 [L 62] instanceOf(InnerRunner.class)
 [L 62] is(instanceOf(InnerRunner.class))
 [L 62] assertThat(runner, is(instanceOf(InnerRunner.class)))
 [L 65] runnerSpy.getInvokedTestClass()
 [L 65] is((Object) OuterClass.InnerClassWithOwnRunWith.MostInnerClass.class)
 [L 65] assertThat(runnerSpy.getInvokedTestClass(), is((Object) OuterClass.InnerClassWithOwnRunWith.MostInnerClass.class))

/src/test/java/org/junit/internal/MethodSorterTest.java
=======================================================
 [L 58] MethodSorter.getDeclaredMethods(clazz)
 [L 64] m.isSynthetic()
 [L 65] clazz.getName()
 [L 65] m.toString()
 [L 65] m.toString().replace(clazz.getName() + '.', "")
 [L 65] names.add(m.toString().replace(clazz.getName() + '.', ""))
 [L 74] Arrays.asList(EPSILON, BETA, ALPHA, DELTA, GAMMA_VOID, GAMMA_BOOLEAN)
 [L 75] getDeclaredMethodNames(DummySortWithoutAnnotation.class)
 [L 76] assertEquals(expected, actual)
 [L 81] Arrays.asList(SUPER_METHOD)
 [L 82] getDeclaredMethodNames(Super.class)
 [L 83] assertEquals(expected, actual)
 [L 88] Arrays.asList(SUB_METHOD)
 [L 89] getDeclaredMethodNames(Sub.class)
 [L 90] assertEquals(expected, actual)
 [L 118] Arrays.asList(EPSILON, BETA, ALPHA, DELTA, GAMMA_VOID, GAMMA_BOOLEAN)
 [L 119] getDeclaredMethodNames(DummySortWithDefault.class)
 [L 120] assertEquals(expected, actual)
 [L 148] DummySortJvm.class.getDeclaredMethods()
 [L 149] MethodSorter.getDeclaredMethods(DummySortJvm.class)
 [L 150] assertArrayEquals(fromJvmWithSynthetics, sorted)
 [L 178] Arrays.asList(ALPHA, BETA, DELTA, EPSILON, GAMMA_VOID, GAMMA_BOOLEAN)
 [L 179] getDeclaredMethodNames(DummySortWithNameAsc.class)
 [L 180] assertEquals(expected, actual)

/src/test/java/org/junit/internal/matchers/ThrowableCauseMatcherTest.java
=========================================================================
 [L 16] is(expectedCause)
 [L 16] hasCause(is(expectedCause))
 [L 16] assertThat(actual, hasCause(is(expectedCause)))

/src/test/java/org/junit/internal/matchers/StacktracePrintingMatcherTest.java
=============================================================================
 [L 19] any(Throwable.class)
 [L 19] isThrowable(any(Throwable.class))
 [L 19] isThrowable(any(Throwable.class)).matches(new Exception())
 [L 19] assertTrue(isThrowable(any(Throwable.class)).matches(new Exception()))
 [L 24] notNullValue(Exception.class)
 [L 24] isException(notNullValue(Exception.class))
 [L 24] isException(notNullValue(Exception.class)).matches(null)
 [L 24] assertFalse(isException(notNullValue(Exception.class)).matches(null))
 [L 35] e.getMessage()
 [L 35] containsString("Stacktrace was: java.lang.IllegalArgumentException: my message")
 [L 35] assertThat(e.getMessage(), containsString("Stacktrace was: java.lang.IllegalArgumentException: my message"))
 [L 33] equalTo(expected)
 [L 33] isThrowable(equalTo(expected))
 [L 33] assertThat(actual, isThrowable(equalTo(expected)))

/src/test/java/org/junit/samples/ListTest.java
==============================================
 [L 23] suite()
 [L 23] junit.textui.TestRunner.run(suite())
 [L 30] fgHeavy.add(i)
 [L 38] fFull.add(1)
 [L 39] fFull.add(2)
 [L 40] fFull.add(3)
 [L 50] fFull.size()
 [L 52] fFull.add(i)
 [L 54] fFull.size()
 [L 54] assertTrue(fFull.size() == 100 + size)
 [L 59] fFull.size()
 [L 60] copy.addAll(fFull)
 [L 61] copy.size()
 [L 61] fFull.size()
 [L 61] assertTrue(copy.size() == fFull.size())
 [L 62] copy.contains(1)
 [L 62] assertTrue(copy.contains(1))
 [L 67] fFull.contains(1)
 [L 67] assertTrue(fFull.contains(1))
 [L 68] fEmpty.contains(1)
 [L 68] assertTrue(!fEmpty.contains(1))
 [L 73] fFull.get(0)
 [L 74] assertTrue(i == 1)
 [L 75] fFull.size()
 [L 75] fFull.get(fFull.size())
 [L 80] fFull.removeAll(fFull)
 [L 81] fEmpty.removeAll(fEmpty)
 [L 82] fFull.isEmpty()
 [L 82] assertTrue(fFull.isEmpty())
 [L 83] fEmpty.isEmpty()
 [L 83] assertTrue(fEmpty.isEmpty())
 [L 88] fFull.remove(new Integer(3))
 [L 89] fFull.contains(3)
 [L 89] assertTrue(!fFull.contains(3))

/src/test/java/org/junit/samples/SimpleTest.java
================================================
 [L 37] assertEquals(12, 12)
 [L 38] assertEquals(12L, 12L)
 [L 39] assertEquals(new Long(12), new Long(12))
 [L 41] assertEquals("Size", 12, 13)
 [L 42] assertEquals("Capacity", 12.0, 11.99, 0.0)

/src/test/java/org/junit/samples/money/MoneyTest.java
=====================================================
 [L 34] MoneyBag.create(f12CHF, f7USD)
 [L 35] MoneyBag.create(f14CHF, f21USD)
 [L 41] MoneyBag.create(new Money(24, "CHF"), new Money(14, "USD"))
 [L 42] fMB1.multiply(2)
 [L 42] assertEquals(expected, fMB1.multiply(2))
 [L 43] fMB1.multiply(1)
 [L 43] assertEquals(fMB1, fMB1.multiply(1))
 [L 44] fMB1.multiply(0)
 [L 44] fMB1.multiply(0).isZero()
 [L 44] assertTrue(fMB1.multiply(0).isZero())
 [L 50] MoneyBag.create(new Money(-12, "CHF"), new Money(-7, "USD"))
 [L 51] fMB1.negate()
 [L 51] assertEquals(expected, fMB1.negate())
 [L 57] MoneyBag.create(new Money(26, "CHF"), new Money(7, "USD"))
 [L 58] fMB1.add(f14CHF)
 [L 58] assertEquals(expected, fMB1.add(f14CHF))
 [L 64] MoneyBag.create(new Money(-2, "CHF"), new Money(-14, "USD"))
 [L 65] fMB1.subtract(fMB2)
 [L 65] assertEquals(expected, fMB1.subtract(fMB2))
 [L 71] MoneyBag.create(new Money(26, "CHF"), new Money(28, "USD"))
 [L 72] fMB1.add(fMB2)
 [L 72] assertEquals(expected, fMB1.add(fMB2))
 [L 77] fMB1.subtract(fMB1)
 [L 77] fMB1.subtract(fMB1).isZero()
 [L 77] assertTrue(fMB1.subtract(fMB1).isZero())
 [L 78] MoneyBag.create(new Money(0, "CHF"), new Money(0, "USD"))
 [L 78] MoneyBag.create(new Money(0, "CHF"), new Money(0, "USD")).isZero()
 [L 78] assertTrue(MoneyBag.create(new Money(0, "CHF"), new Money(0, "USD")).isZero())
 [L 84] MoneyBag.create(f12CHF, f7USD)
 [L 85] f12CHF.add(f7USD)
 [L 85] assertEquals(expected, f12CHF.add(f7USD))
 [L 90] MoneyBag.create(f12CHF, f7USD)
 [L 91] new Money(12, "DEM").add(f7USD)
 [L 91] bag.equals(new Money(12, "DEM").add(f7USD))
 [L 91] assertFalse(bag.equals(new Money(12, "DEM").add(f7USD)))
 [L 96] fMB1.equals(null)
 [L 96] assertTrue(!fMB1.equals(null))
 [L 98] assertEquals(fMB1, fMB1)
 [L 99] MoneyBag.create(new Money(12, "CHF"), new Money(7, "USD"))
 [L 100] fMB1.equals(equal)
 [L 100] assertTrue(fMB1.equals(equal))
 [L 101] fMB1.equals(f12CHF)
 [L 101] assertTrue(!fMB1.equals(f12CHF))
 [L 102] f12CHF.equals(fMB1)
 [L 102] assertTrue(!f12CHF.equals(fMB1))
 [L 103] fMB1.equals(fMB2)
 [L 103] assertTrue(!fMB1.equals(fMB2))
 [L 108] MoneyBag.create(new Money(12, "CHF"), new Money(7, "USD"))
 [L 109] fMB1.hashCode()
 [L 109] equal.hashCode()
 [L 109] assertEquals(fMB1.hashCode(), equal.hashCode())
 [L 114] f12CHF.equals(null)
 [L 114] assertTrue(!f12CHF.equals(null))
 [L 116] assertEquals(f12CHF, f12CHF)
 [L 117] assertEquals(f12CHF, equalMoney)
 [L 118] f12CHF.hashCode()
 [L 118] equalMoney.hashCode()
 [L 118] assertEquals(f12CHF.hashCode(), equalMoney.hashCode())
 [L 119] f12CHF.equals(f14CHF)
 [L 119] assertTrue(!f12CHF.equals(f14CHF))
 [L 127] assertEquals(zeroDollars, zeroFrancs)
 [L 128] zeroDollars.hashCode()
 [L 128] zeroFrancs.hashCode()
 [L 128] assertEquals(zeroDollars.hashCode(), zeroFrancs.hashCode())
 [L 133] f12CHF.equals(null)
 [L 133] assertTrue(!f12CHF.equals(null))
 [L 135] f12CHF.hashCode()
 [L 135] equal.hashCode()
 [L 135] assertEquals(f12CHF.hashCode(), equal.hashCode())
 [L 140] MoneyBag.create(new Money(26, "CHF"), new Money(28, "CHF"))
 [L 141] assertEquals(new Money(54, "CHF"), money)
 [L 148] fMB1.subtract(f12CHF)
 [L 148] assertEquals(expected, fMB1.subtract(f12CHF))
 [L 154] MoneyBag.create(new Money(12, "CHF"), new Money(3, "USD"))
 [L 156] fMB1.subtract(ms1)
 [L 156] assertEquals(expected, fMB1.subtract(ms1))
 [L 161] MoneyBag.create(new Money(12, "CHF"), new Money(3, "USD"))
 [L 163] f12CHF.subtract(ms1)
 [L 163] assertEquals(expected, f12CHF.subtract(ms1))
 [L 168] f12CHF.toString()
 [L 168] assertEquals("[12 CHF]", f12CHF.toString())
 [L 175] f12CHF.add(f14CHF)
 [L 175] assertEquals(expected, f12CHF.add(f14CHF))
 [L 181] MoneyBag.create(new Money(26, "CHF"), new Money(7, "USD"))
 [L 182] f14CHF.add(fMB1)
 [L 182] assertEquals(expected, f14CHF.add(fMB1))
 [L 189] f14CHF.multiply(2)
 [L 189] assertEquals(expected, f14CHF.multiply(2))
 [L 196] f14CHF.negate()
 [L 196] assertEquals(expected, f14CHF.negate())
 [L 203] f14CHF.subtract(f12CHF)
 [L 203] assertEquals(expected, f14CHF.subtract(f12CHF))

/src/test/java/org/junit/samples/money/package-info.java
========================================================

/src/test/java/org/junit/samples/package-info.java
==================================================

/src/test/java/org/junit/AssumptionViolatedExceptionTest.java
=============================================================
 [L 21] is(3)
 [L 28] notNullValue()
 [L 28] assumeThat(matcher, notNullValue())
 [L 29] new AssumptionViolatedException(actual, matcher).toString()
 [L 30] matcher.toString()
 [L 30] containsString(matcher.toString())
 [L 29] assertThat(new AssumptionViolatedException(actual, matcher).toString(), containsString(matcher.toString()))
 [L 35] new AssumptionViolatedException(actual, matcher).toString()
 [L 36] String.valueOf(actual)
 [L 36] containsString(String.valueOf(actual))
 [L 35] assertThat(new AssumptionViolatedException(actual, matcher).toString(), containsString(String.valueOf(actual)))
 [L 41] is(2)
 [L 42] StringDescription.asString(e)
 [L 42] is("got: <3>, expected: is <2>")
 [L 42] assertThat(StringDescription.asString(e), is("got: <3>, expected: is <2>"))
 [L 48] StringDescription.asString(e)
 [L 48] is("not enough money")
 [L 48] assertThat(StringDescription.asString(e), is("not enough money"))
 [L 55] e.initCause(cause)
 [L 56] e.getCause()
 [L 56] is(cause)
 [L 56] assertThat(e.getCause(), is(cause))
 [L 65] containsString("test matcher")
 [L 66] e.getCause()
 [L 66] is(testObject)
 [L 66] assertThat(e.getCause(), is(testObject))
 [L 75] containsString("test matcher")
 [L 76] e.getCause()
 [L 76] is(testObject)
 [L 76] assertThat(e.getCause(), is(testObject))
 [L 85] containsString("test matcher")
 [L 86] e.getCause()
 [L 86] is(testObject)
 [L 86] assertThat(e.getCause(), is(testObject))
 [L 93] e.getCause()
 [L 93] is(cause)
 [L 93] assertThat(e.getCause(), is(cause))

/src/test/java/org/junit/rules/DisableOnDebugTest.java
======================================================
 [L 19] Collections.emptyList()
 [L 22] Arrays.asList("-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,address=8000")
 [L 26] Arrays.asList("-Xrunjdwp:transport=dt_socket,server=y,address=8000", "-Xdebug")
 [L 30] Arrays.asList("-agentlib:jdwp=transport=dt_socket,server=y,address=8000")
 [L 106] subject.isDebugging()
 [L 106] assertTrue("Should be debugging", subject.isDebugging())
 [L 114] subject.isDebugging()
 [L 114] assertTrue("Should be debugging", subject.isDebugging())
 [L 121] subject.isDebugging()
 [L 121] assertTrue("Should be debugging", subject.isDebugging())
 [L 128] subject.isDebugging()
 [L 128] Assert.assertFalse("Should not be debugging", subject.isDebugging())
 [L 134] core.run(PreJava5DebugArgumentsTest.class)
 [L 135] result.getRunCount()
 [L 135] assertEquals("Should run the test", 1, result.getRunCount())
 [L 136] result.getFailureCount()
 [L 136] assertEquals("Test should not have failed", 0, result.getFailureCount())
 [L 142] core.run(PreJava5DebugArgumentsReversedTest.class)
 [L 144] result.getRunCount()
 [L 144] assertEquals("Should run the test", 1, result.getRunCount())
 [L 145] result.getFailureCount()
 [L 145] assertEquals("Test should not have failed", 0, result.getFailureCount())
 [L 151] core.run(PostJava5DebugArgumentsTest.class)
 [L 152] result.getRunCount()
 [L 152] assertEquals("Should run the test", 1, result.getRunCount())
 [L 153] result.getFailureCount()
 [L 153] assertEquals("Test should not have failed", 0, result.getFailureCount())
 [L 159] core.run(WithoutDebugArgumentsTest.class)
 [L 160] result.getRunCount()
 [L 160] assertEquals("Should run the test", 1, result.getRunCount())
 [L 161] result.getFailureCount()
 [L 161] assertEquals("Test should have failed", 1, result.getFailureCount())

/src/test/java/org/junit/rules/StopwatchTest.java
=================================================
 [L 48] description.getMethodName()
 [L 69] simulateTimePassing(1)
 [L 75] simulateTimePassing(1)
 [L 81] simulateTimePassing(1)
 [L 93] afterStopwatchRule()
 [L 98] RuleChain.outerRule(watcher)
 [L 98] RuleChain.outerRule(watcher).around(stopwatch)
 [L 115] fail()
 [L 122] assumeTrue(false)
 [L 129] simulateTimePassing(300L)
 [L 130] stopwatch.runtime(MILLISECONDS)
 [L 130] assertEquals(300L, stopwatch.runtime(MILLISECONDS))
 [L 131] simulateTimePassing(500L)
 [L 132] stopwatch.runtime(MILLISECONDS)
 [L 132] assertEquals(800L, stopwatch.runtime(MILLISECONDS))
 [L 139] simulateTimePassing(300L)
 [L 140] stopwatch.runtime(MILLISECONDS)
 [L 140] assertEquals(300L, stopwatch.runtime(MILLISECONDS))
 [L 145] stopwatch.runtime(MILLISECONDS)
 [L 145] assertEquals(300L, stopwatch.runtime(MILLISECONDS))
 [L 146] simulateTimePassing(500L)
 [L 147] stopwatch.runtime(MILLISECONDS)
 [L 147] assertEquals(300L, stopwatch.runtime(MILLISECONDS))
 [L 155] simulateTimePassing(1L)
 [L 159] simulateTimePassing(1L)
 [L 161] Request.aClass(test)
 [L 161] Request.aClass(test).getRunner()
 [L 161] junitCore.run(Request.aClass(test).getRunner())
 [L 165] TimeUnit.MILLISECONDS.toNanos(millis)
 [L 170] runTest(SuccessfulTest.class)
 [L 171] result.getFailureCount()
 [L 171] assertEquals(0, result.getFailureCount())
 [L 172] is("successfulTest")
 [L 172] assertThat(record.name, is("successfulTest"))
 [L 173] is(finishedRecord.name)
 [L 173] assertThat(record.name, is(finishedRecord.name))
 [L 174] is(TestStatus.SUCCEEDED)
 [L 174] assertThat(record.status, is(TestStatus.SUCCEEDED))
 [L 175] assertTrue("timeSpent > 0", record.duration > 0)
 [L 176] is(finishedRecord.duration)
 [L 176] assertThat(record.duration, is(finishedRecord.duration))
 [L 181] runTest(FailedTest.class)
 [L 182] result.getFailureCount()
 [L 182] assertEquals(1, result.getFailureCount())
 [L 183] is("failedTest")
 [L 183] assertThat(record.name, is("failedTest"))
 [L 184] is(finishedRecord.name)
 [L 184] assertThat(record.name, is(finishedRecord.name))
 [L 185] is(TestStatus.FAILED)
 [L 185] assertThat(record.status, is(TestStatus.FAILED))
 [L 186] assertTrue("timeSpent > 0", record.duration > 0)
 [L 187] is(finishedRecord.duration)
 [L 187] assertThat(record.duration, is(finishedRecord.duration))
 [L 192] runTest(SkippedTest.class)
 [L 193] result.getFailureCount()
 [L 193] assertEquals(0, result.getFailureCount())
 [L 194] is("skippedTest")
 [L 194] assertThat(record.name, is("skippedTest"))
 [L 195] is(finishedRecord.name)
 [L 195] assertThat(record.name, is(finishedRecord.name))
 [L 196] is(TestStatus.SKIPPED)
 [L 196] assertThat(record.status, is(TestStatus.SKIPPED))
 [L 197] assertTrue("timeSpent > 0", record.duration > 0)
 [L 198] is(finishedRecord.duration)
 [L 198] assertThat(record.duration, is(finishedRecord.duration))
 [L 203] runTest(DurationDuringTestTest.class)
 [L 204] result.wasSuccessful()
 [L 204] assertTrue(result.wasSuccessful())
 [L 209] runTest(DurationAfterTestTest.class)
 [L 210] result.wasSuccessful()
 [L 210] assertTrue(result.wasSuccessful())

/src/test/java/org/junit/runners/parameterized/BlockJUnit4ClassRunnerWithParametersTest.java
============================================================================================
 [L 19] emptyList()
 [L 36] runner.getRunnerAnnotations()
 [L 37] assertEquals(1, annotations.length)
 [L 38] annotations[0].annotationType()
 [L 38] assertEquals(annotations[0].annotationType(), DummyAnnotation.class)

/src/test/java/org/junit/runners/parameterized/ParameterizedNamesTest.java
==========================================================================
 [L 27] Arrays.asList(new Object[] { "\n" }, new Object[] { "\r\n" }, new Object[] { "\r" }, new Object[] { "" }, new Object[] { " " }, new Object[] { " " })
 [L 44] Request.aClass(ParametrizedWithSpecialCharsInName.class)
 [L 47] parent.getDisplayName()
 [L 47] description.getMethodName()
 [L 47] assertEquals("test" + parent.getDisplayName(), description.getMethodName())
 [L 46] parent.getChildren()
 [L 45] request.getRunner()
 [L 45] request.getRunner().getDescription()
 [L 45] request.getRunner().getDescription().getChildren()

/src/test/java/org/junit/runners/parameterized/TestWithParametersTest.java
==========================================================================
 [L 22] Arrays.<Object>asList("a", "b")
 [L 26] none()
 [L 30] thrown.expect(NullPointerException.class)
 [L 31] thrown.expectMessage("The name is missing.")
 [L 37] thrown.expect(NullPointerException.class)
 [L 38] thrown.expectMessage("The test class is missing.")
 [L 44] thrown.expect(NullPointerException.class)
 [L 45] thrown.expectMessage("The parameters are missing.")
 [L 54] thrown.expect(UnsupportedOperationException.class)
 [L 55] test.getParameters()
 [L 55] test.getParameters().set(0, "another parameter")
 [L 60] Arrays.<Object>asList("dummy parameter")
 [L 63] parameters.set(0, "another parameter")
 [L 64] asList("dummy parameter")
 [L 64] test.getParameters()
 [L 64] assertEquals(asList("dummy parameter"), test.getParameters())
 [L 70] Arrays.<Object>asList("a", "b")
 [L 73] Arrays.<Object>asList("a", "b")
 [L 75] assertEquals(firstTest, secondTest)
 [L 84] assertNotEquals(firstTest, secondTest)
 [L 93] assertNotEquals(firstTest, secondTest)
 [L 99] Arrays.<Object>asList("a")
 [L 101] Arrays.<Object>asList("b")
 [L 102] assertNotEquals(firstTest, secondTest)
 [L 109] assertNotEquals(test, new Integer(3))
 [L 118] firstTest.hashCode()
 [L 118] secondTest.hashCode()
 [L 118] assertEquals(firstTest.hashCode(), secondTest.hashCode())
 [L 124] Arrays.<Object>asList("first parameter", "second parameter")
 [L 129] test.toString()
 [L 126] assertEquals("Wrong toString().", "org.junit.runners.parameterized.TestWithParametersTest$DummyClass 'name' with parameters [first parameter, second parameter]", test.toString())

/src/test/java/org/junit/runners/CustomBlockJUnit4ClassRunnerTest.java
======================================================================
 [L 29] notifier.addListener(listener)
 [L 31] new CustomBlockJUnit4ClassRunner(CustomBlockJUnit4ClassRunnerTestCase.class).run(notifier)
 [L 32] listener.testStartedCount.get()
 [L 32] assertEquals("tests started.", 2, listener.testStartedCount.get())
 [L 33] listener.testFailureCount.get()
 [L 33] assertEquals("tests failed.", 1, listener.testFailureCount.get())
 [L 34] listener.testFinishedCount.get()
 [L 34] assertEquals("tests finished.", 2, listener.testFinishedCount.get())
 [L 56] method.getName()
 [L 56] "throwException".equals(method.getName())
 [L 59] super.methodBlock(method)
 [L 76] testStartedCount.incrementAndGet()
 [L 81] testFailureCount.incrementAndGet()
 [L 86] testFinishedCount.incrementAndGet()

/src/test/java/org/junit/runners/model/FrameworkMethodTest.java
===============================================================
 [L 19] none()
 [L 23] thrown.expect(NullPointerException.class)
 [L 24] thrown.expectMessage("FrameworkMethod cannot be created without an underlying method.")
 [L 30] ClassWithDummyMethod.class.getMethod("dummyMethod")
 [L 32] frameworkMethod.toString()
 [L 32] frameworkMethod.toString().contains("dummyMethod")
 [L 32] assertTrue(frameworkMethod.toString().contains("dummyMethod"))
 [L 37] ClassWithDummyMethod.class.getMethod("annotatedDummyMethod")
 [L 39] frameworkMethod.getAnnotation(Rule.class)
 [L 40] annotation.getClass()
 [L 40] Rule.class.isAssignableFrom(annotation.getClass())
 [L 40] assertTrue(Rule.class.isAssignableFrom(annotation.getClass()))
 [L 45] ClassWithDummyMethod.class.getMethod("annotatedDummyMethod")
 [L 47] frameworkMethod.getAnnotation(ClassRule.class)
 [L 48] nullValue()
 [L 48] is(nullValue())
 [L 48] assertThat(annotation, is(nullValue()))

/src/test/java/org/junit/runners/model/FrameworkFieldTest.java
==============================================================
 [L 19] none()
 [L 23] thrown.expect(NullPointerException.class)
 [L 24] thrown.expectMessage("FrameworkField cannot be created without an underlying field.")
 [L 30] ClassWithDummyField.class.getField("dummyField")
 [L 32] frameworkField.toString()
 [L 32] frameworkField.toString().contains("dummyField")
 [L 32] assertTrue(frameworkField.toString().contains("dummyField"))
 [L 37] ClassWithDummyField.class.getField("annotatedField")
 [L 39] frameworkField.getAnnotation(Rule.class)
 [L 40] annotation.getClass()
 [L 40] Rule.class.isAssignableFrom(annotation.getClass())
 [L 40] assertTrue(Rule.class.isAssignableFrom(annotation.getClass()))
 [L 45] ClassWithDummyField.class.getField("annotatedField")
 [L 47] frameworkField.getAnnotation(ClassRule.class)
 [L 48] nullValue()
 [L 48] is(nullValue())
 [L 48] assertThat(annotation, is(nullValue()))

/src/test/java/org/junit/runners/model/RunnerBuilderStub.java
=============================================================

/src/test/java/org/junit/runners/model/TestClassTest.java
=========================================================
 [L 24] ExpectedException.none()
 [L 51] new TestClass(SubclassWithField.class).getAnnotatedFields(Rule.class)
 [L 51] new TestClass(SubclassWithField.class).getAnnotatedFields(Rule.class).size()
 [L 52] is(1)
 [L 51] assertThat(new TestClass(SubclassWithField.class).getAnnotatedFields(Rule.class).size(), is(1))
 [L 63] new TestClass(OuterClass.NonStaticInnerClass.class).isANonStaticInnerClass()
 [L 65] is(true)
 [L 62] assertThat(new TestClass(OuterClass.NonStaticInnerClass.class).isANonStaticInnerClass(), is(true))
 [L 76] new TestClass(OuterClass2.StaticInnerClass.class).isANonStaticInnerClass()
 [L 78] is(false)
 [L 75] assertThat(new TestClass(OuterClass2.StaticInnerClass.class).isANonStaticInnerClass(), is(false))
 [L 86] new TestClass(SimpleClass.class).isANonStaticInnerClass()
 [L 87] is(false)
 [L 86] assertThat(new TestClass(SimpleClass.class).isANonStaticInnerClass(), is(false))
 [L 104] tc.getAnnotatedFields()
 [L 105] annotatedFields.size()
 [L 105] is(3)
 [L 105] assertThat("Wrong number of annotated fields.", annotatedFields.size(), is(3))
 [L 106] annotatedFields.iterator()
 [L 106] annotatedFields.iterator().next()
 [L 106] annotatedFields.iterator().next().getName()
 [L 107] is("fieldA")
 [L 106] assertThat("First annotated field is wrong.", annotatedFields.iterator().next().getName(), is("fieldA"))
 [L 113] tc.getAnnotatedFieldValues(new FieldAnnotated(), Rule.class, String.class)
 [L 114] hasItem("andromeda")
 [L 114] assertThat(values, hasItem("andromeda"))
 [L 115] values.size()
 [L 115] is(1)
 [L 115] assertThat(values.size(), is(1))
 [L 141] tc.getAnnotatedMethods()
 [L 143] annotatedMethods.size()
 [L 143] is(3)
 [L 142] assertThat("Wrong number of annotated methods.", annotatedMethods.size(), is(3))
 [L 144] annotatedMethods.iterator()
 [L 144] annotatedMethods.iterator().next()
 [L 144] annotatedMethods.iterator().next().getName()
 [L 145] is("methodA")
 [L 144] assertThat("First annotated method is wrong.", annotatedMethods.iterator().next().getName(), is("methodA"))
 [L 151] tc.getAnnotatedMethodValues(new MethodsAnnotated(), Ignore.class, String.class)
 [L 153] hasItem("jupiter")
 [L 153] assertThat(values, hasItem("jupiter"))
 [L 154] values.size()
 [L 154] is(1)
 [L 154] assertThat(values.size(), is(1))
 [L 162] testClass.equals(testClassThatWrapsSameJavaClass)
 [L 162] assertTrue(testClass.equals(testClassThatWrapsSameJavaClass))
 [L 169] testClass.equals(testClassThatWrapsNoJavaClassToo)
 [L 169] assertTrue(testClass.equals(testClassThatWrapsNoJavaClassToo))
 [L 177] testClass.equals(testClassThatWrapsADifferentJavaClass)
 [L 177] assertFalse(testClass.equals(testClassThatWrapsADifferentJavaClass))
 [L 183] testClass.equals(null)
 [L 183] assertFalse(testClass.equals(null))
 [L 197] testClass.hashCode()
 [L 198] testClassThatWrapsSameJavaClass.hashCode()
 [L 197] assertEquals(testClass.hashCode(), testClassThatWrapsSameJavaClass.hashCode())
 [L 204] testClass.hashCode()
 [L 215] tc.isPublic()
 [L 215] assertEquals("Wrong flag 'public',", true, tc.isPublic())
 [L 225] tc.isPublic()
 [L 225] assertEquals("Wrong flag 'public',", false, tc.isPublic())
 [L 235] tc.getAnnotation(Ignore.class)
 [L 236] annotation.getClass()
 [L 236] Ignore.class.isAssignableFrom(annotation.getClass())
 [L 236] assertTrue(Ignore.class.isAssignableFrom(annotation.getClass()))
 [L 242] tc.getAnnotation(RunWith.class)
 [L 243] nullValue()
 [L 243] is(nullValue())
 [L 243] assertThat(annotation, is(nullValue()))

/src/main/java/junit/textui/TestRunner.java
===========================================
 [L 62] run(new TestSuite(testClass))
 [L 77] runner.doRun(test)
 [L 86] aTestRunner.doRun(suite, true)
 [L 109] doRun(test, false)
 [L 113] createTestResult()
 [L 114] result.addListener(fPrinter)
 [L 115] System.currentTimeMillis()
 [L 116] suite.run(result)
 [L 117] System.currentTimeMillis()
 [L 119] fPrinter.print(result, runTime)
 [L 121] pause(wait)
 [L 127] fPrinter.printWaitPrompt()
 [L 129] System.in.read()
 [L 143] e.getMessage()
 [L 143] System.err.println(e.getMessage())
 [L 144] System.exit(EXCEPTION_EXIT)
 [L 137] aTestRunner.start(args)
 [L 138] r.wasSuccessful()
 [L 139] System.exit(FAILURE_EXIT)
 [L 141] System.exit(SUCCESS_EXIT)
 [L 158] args[i].equals("-wait")
 [L 160] args[i].equals("-c")
 [L 162] args[i].equals("-m")
 [L 167] args[i].equals("-v")
 [L 168] Version.id()
 [L 168] System.err.println("JUnit " + Version.id() + " by Kent Beck and Erich Gamma")
 [L 164] arg.lastIndexOf('.')
 [L 165] arg.substring(0, lastIndex)
 [L 166] arg.substring(lastIndex + 1)
 [L 161] extractClassName(args[++i])
 [L 174] testCase.equals("")
 [L 179] method.equals("")
 [L 180] runSingleMethod(testCase, method, wait)
 [L 182] getTest(testCase)
 [L 183] doRun(suite, wait)
 [L 190] loadSuiteClass(testCase)
 [L 190] loadSuiteClass(testCase).asSubclass(TestCase.class)
 [L 191] TestSuite.createTest(testClass, method)
 [L 192] doRun(test, wait)
 [L 197] System.err.println(message)
 [L 198] System.exit(FAILURE_EXIT)

/src/main/java/junit/textui/ResultPrinter.java
==============================================
 [L 25] printHeader(runTime)
 [L 26] printErrors(result)
 [L 27] printFailures(result)
 [L 28] printFooter(result)
 [L 32] getWriter()
 [L 32] getWriter().println()
 [L 33] getWriter()
 [L 33] getWriter().println("<RETURN> to continue")
 [L 39] getWriter()
 [L 39] getWriter().println()
 [L 40] elapsedTimeAsString(runTime)
 [L 40] getWriter()
 [L 40] getWriter().println("Time: " + elapsedTimeAsString(runTime))
 [L 44] result.errors()
 [L 44] result.errorCount()
 [L 44] printDefects(result.errors(), result.errorCount(), "error")
 [L 48] result.failures()
 [L 48] result.failureCount()
 [L 48] printDefects(result.failures(), result.failureCount(), "failure")
 [L 56] getWriter()
 [L 56] getWriter().println("There were " + count + " " + type + "s:")
 [L 54] getWriter()
 [L 54] getWriter().println("There was " + count + " " + type + ":")
 [L 59] booBoos.nextElement()
 [L 59] printDefect(booBoos.nextElement(), i)
 [L 58] booBoos.hasMoreElements()
 [L 64] printDefectHeader(booBoo, count)
 [L 65] printDefectTrace(booBoo)
 [L 71] booBoo.failedTest()
 [L 71] getWriter()
 [L 71] getWriter().print(count + ") " + booBoo.failedTest())
 [L 75] booBoo.trace()
 [L 75] BaseTestRunner.getFilteredTrace(booBoo.trace())
 [L 75] getWriter()
 [L 75] getWriter().print(BaseTestRunner.getFilteredTrace(booBoo.trace()))
 [L 79] result.wasSuccessful()
 [L 85] getWriter()
 [L 85] getWriter().println()
 [L 86] getWriter()
 [L 86] getWriter().println("FAILURES!!!")
 [L 87] result.runCount()
 [L 88] result.failureCount()
 [L 89] result.errorCount()
 [L 87] getWriter()
 [L 87] getWriter().println("Tests run: " + result.runCount() + ",  Failures: " + result.failureCount() + ",  Errors: " + result.errorCount())
 [L 80] getWriter()
 [L 80] getWriter().println()
 [L 81] getWriter()
 [L 81] getWriter().print("OK")
 [L 82] result.runCount()
 [L 82] result.runCount()
 [L 82] getWriter()
 [L 82] getWriter().println(" (" + result.runCount() + " test" + (result.runCount() == 1 ? "" : "s") + ")")
 [L 91] getWriter()
 [L 91] getWriter().println()
 [L 99] NumberFormat.getInstance()
 [L 99] NumberFormat.getInstance().format((double) runTime / 1000)
 [L 110] getWriter()
 [L 110] getWriter().print("E")
 [L 117] getWriter()
 [L 117] getWriter().print("F")
 [L 130] getWriter()
 [L 130] getWriter().print(".")
 [L 132] getWriter()
 [L 132] getWriter().println()

/src/main/java/junit/textui/package-info.java
=============================================

/src/main/java/junit/framework/ComparisonCompactor.java
=======================================================
 [L 23] areStringsEqual()
 [L 24] Assert.format(message, fExpected, fActual)
 [L 27] findCommonPrefix()
 [L 28] findCommonSuffix()
 [L 29] compactString(fExpected)
 [L 30] compactString(fActual)
 [L 31] Assert.format(message, expected, actual)
 [L 35] source.length()
 [L 35] source.substring(fPrefix, source.length() - fSuffix + 1)
 [L 37] computeCommonPrefix()
 [L 40] computeCommonSuffix()
 [L 47] fExpected.length()
 [L 47] fActual.length()
 [L 47] Math.min(fExpected.length(), fActual.length())
 [L 49] fExpected.charAt(fPrefix)
 [L 49] fActual.charAt(fPrefix)
 [L 56] fExpected.length()
 [L 57] fActual.length()
 [L 59] fExpected.charAt(expectedSuffix)
 [L 59] fActual.charAt(actualSuffix)
 [L 63] fExpected.length()
 [L 67] Math.max(0, fPrefix - fContextLength)
 [L 67] fExpected.substring(Math.max(0, fPrefix - fContextLength), fPrefix)
 [L 71] fExpected.length()
 [L 71] fExpected.length()
 [L 71] Math.min(fExpected.length() - fSuffix + 1 + fContextLength, fExpected.length())
 [L 72] fExpected.length()
 [L 72] fExpected.substring(fExpected.length() - fSuffix + 1, end)
 [L 72] fExpected.length()
 [L 72] fExpected.length()
 [L 76] fExpected.equals(fActual)

/src/main/java/junit/framework/JUnit4TestCaseFacade.java
========================================================
 [L 15] getDescription()
 [L 15] getDescription().toString()

/src/main/java/junit/framework/JUnit4TestAdapter.java
=====================================================
 [L 24] JUnit4TestAdapterCache.getDefault()
 [L 30] Request.classWithoutSuiteMethod(newTestClass)
 [L 30] Request.classWithoutSuiteMethod(newTestClass).getRunner()
 [L 34] fRunner.testCount()
 [L 38] fCache.getNotifier(result, this)
 [L 38] fRunner.run(fCache.getNotifier(result, this))
 [L 43] getDescription()
 [L 43] fCache.asTestList(getDescription())
 [L 52] fRunner.getDescription()
 [L 53] removeIgnored(description)
 [L 57] isIgnored(description)
 [L 60] description.childlessCopy()
 [L 62] removeIgnored(each)
 [L 63] child.isEmpty()
 [L 64] result.addChild(child)
 [L 61] description.getChildren()
 [L 71] description.getAnnotation(Ignore.class)
 [L 76] fNewTestClass.getName()
 [L 80] filter.apply(fRunner)
 [L 84] sorter.apply(fRunner)

/src/main/java/junit/framework/TestListener.java
================================================

/src/main/java/junit/framework/ComparisonFailure.java
=====================================================
 [L 36] super.getMessage()
 [L 36] new ComparisonCompactor(MAX_CONTEXT_LENGTH, fExpected, fActual).compact(super.getMessage())

/src/main/java/junit/framework/AssertionFailedError.java
========================================================
 [L 23] defaultString(message)

/src/main/java/junit/framework/TestFailure.java
===============================================
 [L 44] fThrownException.getMessage()
 [L 54] thrownException()
 [L 54] thrownException().printStackTrace(writer)
 [L 55] stringWriter.toString()
 [L 62] thrownException()
 [L 62] thrownException().getMessage()
 [L 71] thrownException()

/src/main/java/junit/framework/Assert.java
==========================================
 [L 22] fail(message)
 [L 31] assertTrue(null, condition)
 [L 39] assertTrue(message, !condition)
 [L 47] assertFalse(null, condition)
 [L 64] fail(null)
 [L 75] expected.equals(actual)
 [L 78] failNotEquals(message, expected, actual)
 [L 86] assertEquals(null, expected, actual)
 [L 96] expected.equals(actual)
 [L 107] assertEquals(null, expected, actual)
 [L 116] Double.compare(expected, actual)
 [L 119] Math.abs(expected - actual)
 [L 120] failNotEquals(message, new Double(expected), new Double(actual))
 [L 129] assertEquals(null, expected, actual, delta)
 [L 138] Float.compare(expected, actual)
 [L 141] Math.abs(expected - actual)
 [L 142] failNotEquals(message, new Float(expected), new Float(actual))
 [L 151] assertEquals(null, expected, actual, delta)
 [L 159] Long.valueOf(expected)
 [L 159] Long.valueOf(actual)
 [L 159] assertEquals(message, Long.valueOf(expected), Long.valueOf(actual))
 [L 166] assertEquals(null, expected, actual)
 [L 174] Boolean.valueOf(expected)
 [L 174] Boolean.valueOf(actual)
 [L 174] assertEquals(message, Boolean.valueOf(expected), Boolean.valueOf(actual))
 [L 181] assertEquals(null, expected, actual)
 [L 189] Byte.valueOf(expected)
 [L 189] Byte.valueOf(actual)
 [L 189] assertEquals(message, Byte.valueOf(expected), Byte.valueOf(actual))
 [L 196] assertEquals(null, expected, actual)
 [L 204] Character.valueOf(expected)
 [L 204] Character.valueOf(actual)
 [L 204] assertEquals(message, Character.valueOf(expected), Character.valueOf(actual))
 [L 211] assertEquals(null, expected, actual)
 [L 219] Short.valueOf(expected)
 [L 219] Short.valueOf(actual)
 [L 219] assertEquals(message, Short.valueOf(expected), Short.valueOf(actual))
 [L 226] assertEquals(null, expected, actual)
 [L 234] Integer.valueOf(expected)
 [L 234] Integer.valueOf(actual)
 [L 234] assertEquals(message, Integer.valueOf(expected), Integer.valueOf(actual))
 [L 241] assertEquals(null, expected, actual)
 [L 248] assertNotNull(null, object)
 [L 256] assertTrue(message, object != null)
 [L 268] object.toString()
 [L 268] assertNull("Expected: <null> but was: " + object.toString(), object)
 [L 277] assertTrue(message, object == null)
 [L 288] failNotSame(message, expected, actual)
 [L 296] assertSame(null, expected, actual)
 [L 306] failSame(message)
 [L 315] assertNotSame(null, expected, actual)
 [L 320] fail(formatted + "expected not same")
 [L 325] fail(formatted + "expected same:<" + expected + "> was not:<" + actual + ">")
 [L 329] format(message, expected, actual)
 [L 329] fail(format(message, expected, actual))
 [L 334] message.length()

/src/main/java/junit/framework/Test.java
========================================

/src/main/java/junit/framework/Protectable.java
===============================================

/src/main/java/junit/framework/TestResult.java
==============================================
 [L 37] fErrors.add(new TestFailure(test, e))
 [L 39] each.addError(test, e)
 [L 38] cloneListeners()
 [L 48] fFailures.add(new TestFailure(test, e))
 [L 50] each.addFailure(test, e)
 [L 49] cloneListeners()
 [L 58] fListeners.add(listener)
 [L 65] fListeners.remove(listener)
 [L 73] result.addAll(fListeners)
 [L 82] each.endTest(test)
 [L 81] cloneListeners()
 [L 90] fErrors.size()
 [L 97] Collections.enumeration(fErrors)
 [L 105] fFailures.size()
 [L 112] Collections.enumeration(fFailures)
 [L 119] startTest(test)
 [L 122] test.runBare()
 [L 125] runProtected(test, p)
 [L 127] endTest(test)
 [L 144] addFailure(test, e)
 [L 148] addError(test, e)
 [L 142] p.protect()
 [L 163] test.countTestCases()
 [L 168] each.startTest(test)
 [L 167] cloneListeners()
 [L 183] failureCount()
 [L 183] errorCount()

/src/main/java/junit/framework/TestCase.java
============================================
 [L 121] createResult()
 [L 122] run(result)
 [L 130] result.run(this)
 [L 140] setUp()
 [L 147] tearDown()
 [L 142] runTest()
 [L 161] assertNotNull("TestCase.fName cannot be null", fName)
 [L 170] fail("Method \"" + fName + "\" not found")
 [L 168] getClass()
 [L 168] getClass().getMethod(fName, (Class[]) null)
 [L 172] runMethod.getModifiers()
 [L 172] Modifier.isPublic(runMethod.getModifiers())
 [L 173] fail("Method \"" + fName + "\" should be public")
 [L 179] e.fillInStackTrace()
 [L 180] e.getTargetException()
 [L 182] e.fillInStackTrace()
 [L 177] runMethod.invoke(this)
 [L 192] Assert.assertTrue(message, condition)
 [L 200] Assert.assertTrue(condition)
 [L 208] Assert.assertFalse(message, condition)
 [L 216] Assert.assertFalse(condition)
 [L 223] Assert.fail(message)
 [L 230] Assert.fail()
 [L 238] Assert.assertEquals(message, expected, actual)
 [L 246] Assert.assertEquals(expected, actual)
 [L 253] Assert.assertEquals(message, expected, actual)
 [L 260] Assert.assertEquals(expected, actual)
 [L 269] Assert.assertEquals(message, expected, actual, delta)
 [L 277] Assert.assertEquals(expected, actual, delta)
 [L 286] Assert.assertEquals(message, expected, actual, delta)
 [L 294] Assert.assertEquals(expected, actual, delta)
 [L 302] Assert.assertEquals(message, expected, actual)
 [L 309] Assert.assertEquals(expected, actual)
 [L 317] Assert.assertEquals(message, expected, actual)
 [L 324] Assert.assertEquals(expected, actual)
 [L 332] Assert.assertEquals(message, expected, actual)
 [L 339] Assert.assertEquals(expected, actual)
 [L 347] Assert.assertEquals(message, expected, actual)
 [L 354] Assert.assertEquals(expected, actual)
 [L 362] Assert.assertEquals(message, expected, actual)
 [L 369] Assert.assertEquals(expected, actual)
 [L 377] Assert.assertEquals(message, expected, actual)
 [L 384] Assert.assertEquals(expected, actual)
 [L 391] Assert.assertNotNull(object)
 [L 399] Assert.assertNotNull(message, object)
 [L 410] Assert.assertNull(object)
 [L 418] Assert.assertNull(message, object)
 [L 426] Assert.assertSame(message, expected, actual)
 [L 434] Assert.assertSame(expected, actual)
 [L 443] Assert.assertNotSame(message, expected, actual)
 [L 451] Assert.assertNotSame(expected, actual)
 [L 455] Assert.failSame(message)
 [L 459] Assert.failNotSame(message, expected, actual)
 [L 463] Assert.failNotEquals(message, expected, actual)
 [L 467] Assert.format(message, expected, actual)
 [L 489] getName()
 [L 489] getClass()
 [L 489] getClass().getName()

/src/main/java/junit/framework/package-info.java
================================================

/src/main/java/junit/framework/JUnit4TestAdapterCache.java
==========================================================
 [L 22] description.isSuite()
 [L 25] containsKey(description)
 [L 26] createTest(description)
 [L 26] put(description, createTest(description))
 [L 28] get(description)
 [L 23] createTest(description)
 [L 33] description.isTest()
 [L 36] description.getDisplayName()
 [L 38] asTest(child)
 [L 38] suite.addTest(asTest(child))
 [L 37] description.getChildren()
 [L 49] failure.getDescription()
 [L 49] asTest(failure.getDescription())
 [L 49] failure.getException()
 [L 49] result.addError(asTest(failure.getDescription()), failure.getException())
 [L 54] asTest(description)
 [L 54] result.endTest(asTest(description))
 [L 59] asTest(description)
 [L 59] result.startTest(asTest(description))
 [L 46] notifier.addListener(new RunListener() {

    @Override
    public void testFailure(Failure failure) throws Exception {
        result.addError(asTest(failure.getDescription()), failure.getException());
    }

    @Override
    public void testFinished(Description description) throws Exception {
        result.endTest(asTest(description));
    }

    @Override
    public void testStarted(Description description) throws Exception {
        result.startTest(asTest(description));
    }
})
 [L 66] description.isTest()
 [L 71] asTest(child)
 [L 71] returnThis.add(asTest(child))
 [L 70] description.getChildren()
 [L 67] asTest(description)
 [L 67] Arrays.asList(asTest(description))

/src/main/java/junit/framework/TestSuite.java
=============================================
 [L 55] theClass.getName()
 [L 55] warning("Class " + theClass.getName() + " has no public constructor TestCase(String name) or TestCase()")
 [L 53] getTestConstructor(theClass)
 [L 68] exceptionToString(e)
 [L 68] warning("Cannot instantiate test case: " + name + " (" + exceptionToString(e) + ")")
 [L 70] e.getTargetException()
 [L 70] exceptionToString(e.getTargetException())
 [L 70] warning("Exception in constructor: " + name + " (" + exceptionToString(e.getTargetException()) + ")")
 [L 72] exceptionToString(e)
 [L 72] warning("Cannot access test case: " + name + " (" + exceptionToString(e) + ")")
 [L 59] constructor.getParameterTypes()
 [L 65] constructor.newInstance(new Object[] { name })
 [L 60] constructor.newInstance(new Object[0])
 [L 62] ((TestCase) test).setName(name)
 [L 83] theClass.getConstructor(String.class)
 [L 87] theClass.getConstructor()
 [L 97] fail(message)
 [L 108] e.printStackTrace(writer)
 [L 109] stringWriter.toString()
 [L 129] addTestsFromTestCase(theClass)
 [L 133] theClass.getName()
 [L 137] theClass.getName()
 [L 137] warning("Class " + theClass.getName() + " has no public constructor TestCase(String name) or TestCase()")
 [L 137] addTest(warning("Class " + theClass.getName() + " has no public constructor TestCase(String name) or TestCase()"))
 [L 135] getTestConstructor(theClass)
 [L 141] theClass.getModifiers()
 [L 141] Modifier.isPublic(theClass.getModifiers())
 [L 142] theClass.getName()
 [L 142] warning("Class " + theClass.getName() + " is not public")
 [L 142] addTest(warning("Class " + theClass.getName() + " is not public"))
 [L 150] addTestMethod(each, names, theClass)
 [L 149] MethodSorter.getDeclaredMethods(superClass)
 [L 152] superClass.getSuperclass()
 [L 148] Test.class.isAssignableFrom(superClass)
 [L 154] fTests.size()
 [L 155] theClass.getName()
 [L 155] warning("No tests found in " + theClass.getName())
 [L 155] addTest(warning("No tests found in " + theClass.getName()))
 [L 166] setName(name)
 [L 173] setName(name)
 [L 183] testCaseForClass(each)
 [L 183] addTest(testCaseForClass(each))
 [L 188] TestCase.class.isAssignableFrom(each)
 [L 191] each.getCanonicalName()
 [L 191] warning(each.getCanonicalName() + " does not extend TestCase")
 [L 189] each.asSubclass(TestCase.class)
 [L 202] setName(name)
 [L 209] fTests.add(test)
 [L 216] addTest(new TestSuite(testClass))
 [L 225] each.countTestCases()
 [L 244] result.shouldStop()
 [L 247] runTest(each, result)
 [L 252] test.run(result)
 [L 268] fTests.get(index)
 [L 275] fTests.size()
 [L 282] fTests.elements()
 [L 289] getName()
 [L 290] getName()
 [L 292] super.toString()
 [L 296] m.getName()
 [L 297] names.contains(name)
 [L 300] isPublicTestMethod(m)
 [L 301] isTestMethod(m)
 [L 302] m.getName()
 [L 302] theClass.getCanonicalName()
 [L 302] warning("Test method isn't public: " + m.getName() + "(" + theClass.getCanonicalName() + ")")
 [L 302] addTest(warning("Test method isn't public: " + m.getName() + "(" + theClass.getCanonicalName() + ")"))
 [L 306] names.add(name)
 [L 307] createTest(theClass, name)
 [L 307] addTest(createTest(theClass, name))
 [L 311] isTestMethod(m)
 [L 311] m.getModifiers()
 [L 311] Modifier.isPublic(m.getModifiers())
 [L 315] m.getParameterTypes()
 [L 316] m.getName()
 [L 316] m.getName().startsWith("test")
 [L 317] m.getReturnType()
 [L 317] m.getReturnType().equals(Void.TYPE)

/src/main/java/junit/runner/BaseTestRunner.java
===============================================
 [L 39] test.toString()
 [L 39] testStarted(test.toString())
 [L 49] fPreferences.put("loading", "true")
 [L 50] fPreferences.put("filterstack", "true")
 [L 51] readPreferences()
 [L 57] getPreferencesFile()
 [L 61] fos.close()
 [L 59] getPreferences()
 [L 59] getPreferences().store(fos, "")
 [L 66] getPreferences()
 [L 66] getPreferences().put(key, value)
 [L 70] test.toString()
 [L 70] testEnded(test.toString())
 [L 74] testFailed(TestRunListener.STATUS_ERROR, test, e)
 [L 78] testFailed(TestRunListener.STATUS_FAILURE, test, e)
 [L 94] suiteClassName.length()
 [L 95] clearStatus()
 [L 102] e.getMessage()
 [L 106] runFailed("Class not found \"" + clazz + "\"")
 [L 109] e.toString()
 [L 109] runFailed("Error: " + e.toString())
 [L 100] loadSuiteClass(suiteClassName)
 [L 117] clearStatus()
 [L 114] testClass.getMethod(SUITE_METHODNAME)
 [L 120] suiteMethod.getModifiers()
 [L 120] Modifier.isStatic(suiteMethod.getModifiers())
 [L 121] runFailed("Suite() method must be static")
 [L 131] e.getTargetException()
 [L 131] e.getTargetException().toString()
 [L 131] runFailed("Failed to invoke suite():" + e.getTargetException().toString())
 [L 134] e.toString()
 [L 134] runFailed("Failed to invoke suite():" + e.toString())
 [L 126] suiteMethod.invoke(null)
 [L 138] clearStatus()
 [L 146] NumberFormat.getInstance()
 [L 146] NumberFormat.getInstance().format((double) runTime / 1000)
 [L 156] args[i].equals("-noloading")
 [L 158] args[i].equals("-nofilterstack")
 [L 160] args[i].equals("-c")
 [L 164] System.out.println("Missing Test class name")
 [L 162] extractClassName(args[i + 1])
 [L 157] setLoading(false)
 [L 185] className.startsWith("Default package for")
 [L 186] className.lastIndexOf(".")
 [L 186] className.substring(className.lastIndexOf(".") + 1)
 [L 195] s.length()
 [L 196] s.substring(0, fgMaxMessageLength)
 [L 211] Class.forName(suiteClassName)
 [L 221] getPreference("loading")
 [L 221] getPreference("loading").equals("true")
 [L 225] System.getProperty("user.home")
 [L 239] is.close()
 [L 232] getPreferencesFile()
 [L 233] getPreferences()
 [L 233] setPreferences(new Properties(getPreferences()))
 [L 234] getPreferences()
 [L 234] getPreferences().load(is)
 [L 247] getPreferences()
 [L 247] getPreferences().getProperty(key)
 [L 251] getPreference(key)
 [L 257] Integer.parseInt(value)
 [L 269] e.printStackTrace(writer)
 [L 270] stringWriter.toString()
 [L 271] BaseTestRunner.getFilteredTrace(trace)
 [L 278] showStackRaw()
 [L 290] filterLine(line)
 [L 291] pw.println(line)
 [L 289] br.readLine()
 [L 297] sw.toString()
 [L 301] getPreference("filterstack")
 [L 301] getPreference("filterstack").equals("true")
 [L 316] line.indexOf(patterns[i])
 [L 324] getPreference("maxmessage", fgMaxMessageLength)

/src/main/java/junit/runner/TestRunListener.java
================================================

/src/main/java/junit/runner/Version.java
========================================
 [L 16] id()
 [L 16] System.out.println(id())

/src/main/java/junit/runner/package-info.java
=============================================

/src/main/java/junit/extensions/ActiveTestSuite.java
====================================================
 [L 35] super.run(result)
 [L 36] waitUntilFinished()
 [L 49] ActiveTestSuite.this.runFinished()
 [L 47] test.run(result)
 [L 53] t.start()
 [L 59] wait()
 [L 57] testCount()
 [L 68] notifyAll()

/src/main/java/junit/extensions/RepeatedTest.java
=================================================
 [L 22] super.countTestCases()
 [L 28] result.shouldStop()
 [L 31] super.run(result)
 [L 37] super.toString()

/src/main/java/junit/extensions/TestSetup.java
==============================================
 [L 22] setUp()
 [L 23] basicRun(result)
 [L 24] tearDown()
 [L 27] result.runProtected(this, p)

/src/main/java/junit/extensions/TestDecorator.java
==================================================
 [L 24] fTest.run(result)
 [L 28] fTest.countTestCases()
 [L 32] basicRun(result)
 [L 37] fTest.toString()

/src/main/java/junit/extensions/package-info.java
=================================================

/src/main/java/org/junit/ClassRule.java
=======================================

/src/main/java/org/junit/experimental/ParallelComputer.java
===========================================================
 [L 35] Executors.newCachedThreadPool()
 [L 38] fService.submit(childStatement)
 [L 46] e.printStackTrace(System.err)
 [L 43] fService.shutdown()
 [L 44] fService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS)
 [L 34] ((ParentRunner<?>) runner).setScheduler(new RunnerScheduler() {

    private final ExecutorService fService = Executors.newCachedThreadPool();

    public void schedule(Runnable childStatement) {
        fService.submit(childStatement);
    }

    public void finished() {
        try {
            fService.shutdown();
            fService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace(System.err);
        }
    }
})
 [L 57] super.getSuite(builder, classes)
 [L 58] parallelize(suite)
 [L 64] super.getRunner(builder, testClass)
 [L 65] parallelize(runner)

/src/main/java/org/junit/experimental/theories/PotentialAssignment.java
=======================================================================
 [L 26] format("[%s]", value)
 [L 40] e.getClass()
 [L 40] e.getClass().getSimpleName()
 [L 40] e.getMessage()
 [L 39] format("[toString() threw %s: %s]", e.getClass().getSimpleName(), e.getMessage())
 [L 37] format("\"%s\"", value)
 [L 44] format("%s <from %s>", valueString, name)

/src/main/java/org/junit/experimental/theories/Theories.java
============================================================
 [L 78] super.collectInitializationErrors(errors)
 [L 79] validateDataPointFields(errors)
 [L 80] validateDataPointMethods(errors)
 [L 84] getTestClass()
 [L 84] getTestClass().getJavaClass()
 [L 84] getTestClass().getJavaClass().getDeclaredFields()
 [L 87] field.getAnnotation(DataPoint.class)
 [L 87] field.getAnnotation(DataPoints.class)
 [L 90] field.getModifiers()
 [L 90] Modifier.isStatic(field.getModifiers())
 [L 91] field.getName()
 [L 91] errors.add(new Error("DataPoint field " + field.getName() + " must be static"))
 [L 93] field.getModifiers()
 [L 93] Modifier.isPublic(field.getModifiers())
 [L 94] field.getName()
 [L 94] errors.add(new Error("DataPoint field " + field.getName() + " must be public"))
 [L 100] getTestClass()
 [L 100] getTestClass().getJavaClass()
 [L 100] getTestClass().getJavaClass().getDeclaredMethods()
 [L 103] method.getAnnotation(DataPoint.class)
 [L 103] method.getAnnotation(DataPoints.class)
 [L 106] method.getModifiers()
 [L 106] Modifier.isStatic(method.getModifiers())
 [L 107] method.getName()
 [L 107] errors.add(new Error("DataPoint method " + method.getName() + " must be static"))
 [L 109] method.getModifiers()
 [L 109] Modifier.isPublic(method.getModifiers())
 [L 110] method.getName()
 [L 110] errors.add(new Error("DataPoint method " + method.getName() + " must be public"))
 [L 117] validateOnlyOneConstructor(errors)
 [L 123] each.getAnnotation(Theory.class)
 [L 127] each.validatePublicVoidNoArg(false, errors)
 [L 124] each.validatePublicVoid(false, errors)
 [L 125] each.validateNoTypeParametersOnArgs(errors)
 [L 131] signature.findDeepAnnotation(ParametersSuppliedBy.class)
 [L 133] annotation.value()
 [L 133] validateParameterSupplier(annotation.value(), errors)
 [L 130] each.getMethod()
 [L 130] ParameterSignature.signatures(each.getMethod())
 [L 122] computeTestMethods()
 [L 140] supplierClass.getConstructors()
 [L 146] constructors[0].getParameterTypes()
 [L 147] paramTypes[0].equals(TestClass.class)
 [L 148] supplierClass.getName()
 [L 148] errors.add(new Error("ParameterSupplier " + supplierClass.getName() + " constructor must take either nothing or a single TestClass instance"))
 [L 143] supplierClass.getName()
 [L 143] errors.add(new Error("ParameterSupplier " + supplierClass.getName() + " must have only one constructor (either empty or taking only a TestClass)"))
 [L 156] super.computeTestMethods()
 [L 157] getTestClass()
 [L 157] getTestClass().getAnnotatedMethods(Theory.class)
 [L 158] testMethods.removeAll(theoryMethods)
 [L 159] testMethods.addAll(theoryMethods)
 [L 165] getTestClass()
 [L 188] testMethod.getMethod()
 [L 188] getTestClass()
 [L 187] Assignments.allUnassigned(testMethod.getMethod(), getTestClass())
 [L 187] runWithAssignment(Assignments.allUnassigned(testMethod.getMethod(), getTestClass()))
 [L 191] testMethod.getAnnotation(Theory.class)
 [L 193] Assert.fail("Never found parameters that satisfied method assumptions.  Violated assumptions: " + fInvalidParameters)
 [L 201] parameterAssignment.isComplete()
 [L 204] runWithCompleteAssignment(parameterAssignment)
 [L 202] runWithIncompleteAssignment(parameterAssignment)
 [L 212] incomplete.assignNext(source)
 [L 212] runWithAssignment(incomplete.assignNext(source))
 [L 210] incomplete.potentialsForNextUnassigned()
 [L 227] super.methodBlock(method)
 [L 235] handleAssumptionViolation(e)
 [L 238] nullsOk()
 [L 237] complete.getArgumentStrings(nullsOk())
 [L 237] reportParameterizedError(e, complete.getArgumentStrings(nullsOk()))
 [L 232] statement.evaluate()
 [L 233] handleDataPointSuccess()
 [L 247] methodCompletesWithParameters(method, complete, test)
 [L 252] complete.getConstructorArguments()
 [L 254] nullsOk()
 [L 255] Assume.assumeNotNull(params)
 [L 258] getTestClass()
 [L 258] getTestClass().getOnlyConstructor()
 [L 258] getTestClass().getOnlyConstructor().newInstance(params)
 [L 218] getTestClass()
 [L 218] getTestClass().getJavaClass()
 [L 218] new BlockJUnit4ClassRunner(getTestClass().getJavaClass()) {

    @Override
    protected void collectInitializationErrors(List<Throwable> errors) {
    // do nothing
    }

    @Override
    public Statement methodBlock(FrameworkMethod method) {
        final Statement statement = super.methodBlock(method);
        return new Statement() {

            @Override
            public void evaluate() throws Throwable {
                try {
                    statement.evaluate();
                    handleDataPointSuccess();
                } catch (AssumptionViolatedException e) {
                    handleAssumptionViolation(e);
                } catch (Throwable e) {
                    reportParameterizedError(e, complete.getArgumentStrings(nullsOk()));
                }
            }
        };
    }

    @Override
    protected Statement methodInvoker(FrameworkMethod method, Object test) {
        return methodCompletesWithParameters(method, complete, test);
    }

    @Override
    public Object createTest() throws Exception {
        Object[] params = complete.getConstructorArguments();
        if (!nullsOk()) {
            Assume.assumeNotNull(params);
        }
        return getTestClass().getOnlyConstructor().newInstance(params);
    }
}.methodBlock(testMethod)
 [L 218] new BlockJUnit4ClassRunner(getTestClass().getJavaClass()) {

    @Override
    protected void collectInitializationErrors(List<Throwable> errors) {
    // do nothing
    }

    @Override
    public Statement methodBlock(FrameworkMethod method) {
        final Statement statement = super.methodBlock(method);
        return new Statement() {

            @Override
            public void evaluate() throws Throwable {
                try {
                    statement.evaluate();
                    handleDataPointSuccess();
                } catch (AssumptionViolatedException e) {
                    handleAssumptionViolation(e);
                } catch (Throwable e) {
                    reportParameterizedError(e, complete.getArgumentStrings(nullsOk()));
                }
            }
        };
    }

    @Override
    protected Statement methodInvoker(FrameworkMethod method, Object test) {
        return methodCompletesWithParameters(method, complete, test);
    }

    @Override
    public Object createTest() throws Exception {
        Object[] params = complete.getConstructorArguments();
        if (!nullsOk()) {
            Assume.assumeNotNull(params);
        }
        return getTestClass().getOnlyConstructor().newInstance(params);
    }
}.methodBlock(testMethod).evaluate()
 [L 268] complete.getMethodArguments()
 [L 270] nullsOk()
 [L 271] Assume.assumeNotNull(values)
 [L 274] method.invokeExplosively(freshInstance, values)
 [L 280] fInvalidParameters.add(e)
 [L 288] testMethod.getName()
 [L 293] testMethod.getMethod()
 [L 293] testMethod.getMethod().getAnnotation(Theory.class)
 [L 298] annotation.nullsAccepted()

/src/main/java/org/junit/experimental/theories/suppliers/TestedOnSupplier.java
==============================================================================
 [L 18] sig.getAnnotation(TestedOn.class)
 [L 19] testedOn.ints()
 [L 21] PotentialAssignment.forValue("ints", i)
 [L 21] list.add(PotentialAssignment.forValue("ints", i))

/src/main/java/org/junit/experimental/theories/suppliers/TestedOn.java
======================================================================

/src/main/java/org/junit/experimental/theories/ParameterSupplier.java
=====================================================================

/src/main/java/org/junit/experimental/theories/DataPoints.java
==============================================================

/src/main/java/org/junit/experimental/theories/DataPoint.java
=============================================================

/src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java
===============================================================================
 [L 42] method.getAnnotation(DataPoint.class)
 [L 43] annotation.ignoredExceptions()
 [L 43] isAssignableToAnyOf(annotation.ignoredExceptions(), throwable)
 [L 43] Assume.assumeTrue(annotation == null || !isAssignableToAnyOf(annotation.ignoredExceptions(), throwable))
 [L 34] method.invokeExplosively(null)
 [L 51] method.getName()
 [L 68] addSinglePointFields(sig, list)
 [L 69] addMultiPointFields(sig, list)
 [L 70] addSinglePointMethods(sig, list)
 [L 71] addMultiPointMethods(sig, list)
 [L 78] dataPointsMethod.getReturnType()
 [L 80] returnType.isArray()
 [L 80] returnType.getComponentType()
 [L 80] sig.canPotentiallyAcceptType(returnType.getComponentType())
 [L 81] Iterable.class.isAssignableFrom(returnType)
 [L 86] dataPointsMethod.getAnnotation(DataPoints.class)
 [L 87] annotation.ignoredExceptions()
 [L 87] isAssignableToAnyOf(annotation.ignoredExceptions(), throwable)
 [L 83] dataPointsMethod.getName()
 [L 84] dataPointsMethod.invokeExplosively(null)
 [L 83] addDataPointsValues(returnType, sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null))
 [L 77] getDataPointsMethods(sig)
 [L 99] dataPointMethod.getType()
 [L 99] sig.canAcceptType(dataPointMethod.getType())
 [L 100] list.add(new MethodParameterValue(dataPointMethod))
 [L 98] getSingleDataPointMethods(sig)
 [L 107] field.getType()
 [L 108] field.getName()
 [L 108] getStaticFieldValue(field)
 [L 108] addDataPointsValues(type, sig, field.getName(), list, getStaticFieldValue(field))
 [L 106] getDataPointsFields(sig)
 [L 114] getStaticFieldValue(field)
 [L 116] sig.canAcceptValue(value)
 [L 117] field.getName()
 [L 117] PotentialAssignment.forValue(field.getName(), value)
 [L 117] list.add(PotentialAssignment.forValue(field.getName(), value))
 [L 113] getSingleDataPointFields(sig)
 [L 124] type.isArray()
 [L 127] Iterable.class.isAssignableFrom(type)
 [L 128] addIterableValues(sig, name, list, (Iterable<?>) value)
 [L 125] addArrayValues(sig, name, list, value)
 [L 134] Array.get(array, i)
 [L 135] sig.canAcceptValue(value)
 [L 136] PotentialAssignment.forValue(name + "[" + i + "]", value)
 [L 136] list.add(PotentialAssignment.forValue(name + "[" + i + "]", value))
 [L 133] Array.getLength(array)
 [L 142] iterable.iterator()
 [L 145] iterator.next()
 [L 146] sig.canAcceptValue(value)
 [L 147] PotentialAssignment.forValue(name + "[" + i + "]", value)
 [L 147] list.add(PotentialAssignment.forValue(name + "[" + i + "]", value))
 [L 144] iterator.hasNext()
 [L 155] field.get(null)
 [L 167] target.getClass()
 [L 167] type.isAssignableFrom(target.getClass())
 [L 175] clazz.getAnnotatedMethods(DataPoints.class)
 [L 179] clazz.getAnnotatedFields(DataPoint.class)
 [L 183] frameworkField.getField()
 [L 183] validFields.add(frameworkField.getField())
 [L 190] clazz.getAnnotatedFields(DataPoints.class)
 [L 194] frameworkField.getField()
 [L 194] validFields.add(frameworkField.getField())
 [L 201] clazz.getAnnotatedMethods(DataPoint.class)

/src/main/java/org/junit/experimental/theories/internal/BooleanSupplier.java
============================================================================
 [L 14] PotentialAssignment.forValue("true", true)
 [L 15] PotentialAssignment.forValue("false", false)
 [L 14] Arrays.asList(PotentialAssignment.forValue("true", true), PotentialAssignment.forValue("false", false))

/src/main/java/org/junit/experimental/theories/internal/ParameterizedAssertionError.java
========================================================================================
 [L 12] join(", ", params)
 [L 12] String.format("%s(%s)", methodName, join(", ", params))
 [L 13] this.initCause(targetException)
 [L 18] obj.toString()
 [L 18] toString()
 [L 18] toString().equals(obj.toString())
 [L 23] toString()
 [L 23] toString().hashCode()
 [L 27] Arrays.asList(params)
 [L 27] join(delimiter, Arrays.asList(params))
 [L 32] values.iterator()
 [L 34] iter.next()
 [L 35] stringValueOf(next)
 [L 35] sb.append(stringValueOf(next))
 [L 36] iter.hasNext()
 [L 37] sb.append(delimiter)
 [L 33] iter.hasNext()
 [L 40] sb.toString()
 [L 45] String.valueOf(next)

/src/main/java/org/junit/experimental/theories/internal/EnumSupplier.java
=========================================================================
 [L 20] enumType.getEnumConstants()
 [L 24] value.toString()
 [L 24] PotentialAssignment.forValue(value.toString(), value)
 [L 24] assignments.add(PotentialAssignment.forValue(value.toString(), value))

/src/main/java/org/junit/experimental/theories/internal/SpecificDataPointsSupplier.java
=======================================================================================
 [L 24] super.getSingleDataPointFields(sig)
 [L 25] sig.getAnnotation(FromDataPoints.class)
 [L 25] sig.getAnnotation(FromDataPoints.class).value()
 [L 30] field.getAnnotation(DataPoint.class)
 [L 30] field.getAnnotation(DataPoint.class).value()
 [L 31] Arrays.asList(fieldNames)
 [L 31] Arrays.asList(fieldNames).contains(requestedName)
 [L 32] fieldsWithMatchingNames.add(field)
 [L 41] super.getDataPointsFields(sig)
 [L 42] sig.getAnnotation(FromDataPoints.class)
 [L 42] sig.getAnnotation(FromDataPoints.class).value()
 [L 47] field.getAnnotation(DataPoints.class)
 [L 47] field.getAnnotation(DataPoints.class).value()
 [L 48] Arrays.asList(fieldNames)
 [L 48] Arrays.asList(fieldNames).contains(requestedName)
 [L 49] fieldsWithMatchingNames.add(field)
 [L 58] super.getSingleDataPointMethods(sig)
 [L 59] sig.getAnnotation(FromDataPoints.class)
 [L 59] sig.getAnnotation(FromDataPoints.class).value()
 [L 64] method.getAnnotation(DataPoint.class)
 [L 64] method.getAnnotation(DataPoint.class).value()
 [L 65] Arrays.asList(methodNames)
 [L 65] Arrays.asList(methodNames).contains(requestedName)
 [L 66] methodsWithMatchingNames.add(method)
 [L 75] super.getDataPointsMethods(sig)
 [L 76] sig.getAnnotation(FromDataPoints.class)
 [L 76] sig.getAnnotation(FromDataPoints.class).value()
 [L 81] method.getAnnotation(DataPoints.class)
 [L 81] method.getAnnotation(DataPoints.class).value()
 [L 82] Arrays.asList(methodNames)
 [L 82] Arrays.asList(methodNames).contains(requestedName)
 [L 83] methodsWithMatchingNames.add(method)

/src/main/java/org/junit/experimental/theories/internal/Assignments.java
========================================================================
 [L 42] testClass.getOnlyConstructor()
 [L 42] ParameterSignature.signatures(testClass.getOnlyConstructor())
 [L 44] ParameterSignature.signatures(testMethod)
 [L 44] signatures.addAll(ParameterSignature.signatures(testMethod))
 [L 50] unassigned.isEmpty()
 [L 54] unassigned.get(0)
 [L 59] potentialAssignments.add(source)
 [L 62] unassigned.size()
 [L 61] unassigned.subList(1, unassigned.size())
 [L 69] assigned.get(i)
 [L 69] assigned.get(i).getValue()
 [L 76] nextUnassigned()
 [L 77] getSupplier(unassigned)
 [L 77] getSupplier(unassigned).getValueSources(unassigned)
 [L 79] assignments.isEmpty()
 [L 80] generateAssignmentsFromTypeAlone(unassigned)
 [L 87] unassigned.getType()
 [L 89] paramType.isEnum()
 [L 91] paramType.equals(Boolean.class)
 [L 91] paramType.equals(boolean.class)
 [L 94] emptyList()
 [L 92] new BooleanSupplier().getValueSources(unassigned)
 [L 90] new EnumSupplier(paramType).getValueSources(unassigned)
 [L 100] unassigned.findDeepAnnotation(ParametersSuppliedBy.class)
 [L 104] annotation.value()
 [L 104] buildParameterSupplierFromClass(annotation.value())
 [L 112] cls.getConstructors()
 [L 115] constructor.getParameterTypes()
 [L 117] parameterTypes[0].equals(TestClass.class)
 [L 118] constructor.newInstance(clazz)
 [L 122] cls.newInstance()
 [L 127] getConstructorParameterCount()
 [L 127] getActualValues(0, getConstructorParameterCount())
 [L 131] getConstructorParameterCount()
 [L 131] assigned.size()
 [L 131] getActualValues(getConstructorParameterCount(), assigned.size())
 [L 135] assigned.size()
 [L 135] getActualValues(0, assigned.size())
 [L 140] clazz.getOnlyConstructor()
 [L 139] ParameterSignature.signatures(clazz.getOnlyConstructor())
 [L 141] signatures.size()
 [L 147] assigned.size()
 [L 149] assigned.get(i)
 [L 149] assigned.get(i).getDescription()

/src/main/java/org/junit/experimental/theories/ParameterSignature.java
======================================================================
 [L 15] buildConvertableTypesMap()
 [L 20] putSymmetrically(map, boolean.class, Boolean.class)
 [L 21] putSymmetrically(map, byte.class, Byte.class)
 [L 22] putSymmetrically(map, short.class, Short.class)
 [L 23] putSymmetrically(map, char.class, Character.class)
 [L 24] putSymmetrically(map, int.class, Integer.class)
 [L 25] putSymmetrically(map, long.class, Long.class)
 [L 26] putSymmetrically(map, float.class, Float.class)
 [L 27] putSymmetrically(map, double.class, Double.class)
 [L 29] Collections.unmodifiableMap(map)
 [L 33] map.put(a, b)
 [L 34] map.put(b, a)
 [L 38] method.getParameterTypes()
 [L 38] method.getParameterAnnotations()
 [L 38] signatures(method.getParameterTypes(), method.getParameterAnnotations())
 [L 43] constructor.getParameterTypes()
 [L 43] constructor.getParameterAnnotations()
 [L 43] signatures(constructor.getParameterTypes(), constructor.getParameterAnnotations())
 [L 51] sigs.add(new ParameterSignature(parameterTypes[i], parameterAnnotations[i]))
 [L 67] candidate.getClass()
 [L 67] canAcceptType(candidate.getClass())
 [L 67] type.isPrimitive()
 [L 71] type.isAssignableFrom(candidate)
 [L 72] isAssignableViaTypeConversion(type, candidate)
 [L 76] candidate.isAssignableFrom(type)
 [L 77] isAssignableViaTypeConversion(candidate, type)
 [L 78] canAcceptType(candidate)
 [L 82] CONVERTABLE_TYPES_MAP.containsKey(candidate)
 [L 83] CONVERTABLE_TYPES_MAP.get(candidate)
 [L 84] targetType.isAssignableFrom(wrapperClass)
 [L 95] Arrays.asList(annotations)
 [L 99] getAnnotation(type)
 [L 104] findDeepAnnotation(annotations2, annotationType, 3)
 [L 113] annotationType.isInstance(each)
 [L 114] annotationType.cast(each)
 [L 116] each.annotationType()
 [L 116] each.annotationType().getAnnotations()
 [L 116] findDeepAnnotation(each.annotationType().getAnnotations(), annotationType, depth - 1)
 [L 119] annotationType.cast(candidate)
 [L 128] annotationType.isInstance(each)
 [L 129] annotationType.cast(each)
 [L 127] getAnnotations()

/src/main/java/org/junit/experimental/theories/Theory.java
==========================================================

/src/main/java/org/junit/experimental/theories/ParametersSuppliedBy.java
========================================================================

/src/main/java/org/junit/experimental/theories/FromDataPoints.java
==================================================================

/src/main/java/org/junit/experimental/max/MaxCore.java
======================================================
 [L 42] storedLocally(new File(folderName))
 [L 55] MaxHistory.forFolder(storedResults)
 [L 64] Request.aClass(testClass)
 [L 64] run(Request.aClass(testClass))
 [L 74] run(request, new JUnitCore())
 [L 88] history.listener()
 [L 88] core.addListener(history.listener())
 [L 89] sortRequest(request)
 [L 89] sortRequest(request).getRunner()
 [L 89] core.run(sortRequest(request).getRunner())
 [L 100] findLeaves(request)
 [L 101] history.testComparator()
 [L 101] Collections.sort(leaves, history.testComparator())
 [L 102] constructLeafRequest(leaves)
 [L 108] buildRunner(each)
 [L 108] runners.add(buildRunner(each))
 [L 124] each.toString()
 [L 124] each.toString().equals("TestSuite with 0 tests")
 [L 125] Suite.emptySuite()
 [L 127] each.toString()
 [L 127] each.toString().startsWith(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX)
 [L 132] getMalformedTestClass(each)
 [L 134] each.getTestClass()
 [L 138] each.getMethodName()
 [L 140] Request.aClass(type)
 [L 140] Request.aClass(type).getRunner()
 [L 142] Request.method(type, methodName)
 [L 142] Request.method(type, methodName).getRunner()
 [L 147] each.toString()
 [L 147] each.toString().replace(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX, "")
 [L 147] Class.forName(each.toString().replace(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX, ""))
 [L 159] sortRequest(request)
 [L 159] findLeaves(sortRequest(request))
 [L 164] request.getRunner()
 [L 164] request.getRunner().getDescription()
 [L 164] findLeaves(null, request.getRunner().getDescription(), results)
 [L 169] description.getChildren()
 [L 169] description.getChildren().isEmpty()
 [L 177] findLeaves(description, each, results)
 [L 176] description.getChildren()
 [L 170] description.toString()
 [L 170] description.toString().equals("warning(junit.framework.TestSuite$1)")
 [L 173] results.add(description)
 [L 171] Description.createSuiteDescription(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX + parent)
 [L 171] results.add(Description.createSuiteDescription(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX + parent))

/src/main/java/org/junit/experimental/max/CouldNotReadCoreException.java
========================================================================

/src/main/java/org/junit/experimental/max/MaxHistory.java
=========================================================
 [L 34] file.exists()
 [L 38] e.printStackTrace()
 [L 39] file.delete()
 [L 36] readHistory(file)
 [L 57] file.close()
 [L 54] stream.close()
 [L 52] stream.readObject()
 [L 80] stream.writeObject(this)
 [L 81] stream.close()
 [L 85] key.toString()
 [L 85] fFailureTimestamps.get(key.toString())
 [L 89] key.toString()
 [L 89] fFailureTimestamps.put(key.toString(), end)
 [L 93] key.toString()
 [L 93] fDurations.containsKey(key.toString())
 [L 97] key.toString()
 [L 97] fDurations.get(key.toString())
 [L 101] description.toString()
 [L 101] fDurations.put(description.toString(), duration)
 [L 105] System.currentTimeMillis()
 [L 111] System.nanoTime()
 [L 111] starts.put(description, System.nanoTime())
 [L 117] System.nanoTime()
 [L 118] starts.get(description)
 [L 119] putTestDuration(description, end - start)
 [L 124] failure.getDescription()
 [L 124] putTestFailureTimestamp(failure.getDescription(), overallStart)
 [L 129] save()
 [L 136] isNewTest(o1)
 [L 139] isNewTest(o2)
 [L 143] getFailure(o1)
 [L 143] getFailure(o2)
 [L 143] getFailure(o2).compareTo(getFailure(o1))
 [L 146] getTestDuration(o2)
 [L 146] getTestDuration(o1)
 [L 146] // Then shorter tests first
getTestDuration(o1).compareTo(getTestDuration(o2))
 [L 150] getFailureTimestamp(key)

/src/main/java/org/junit/experimental/results/PrintableResult.java
==================================================================
 [L 29] Request.aClass(type)
 [L 29] testResult(Request.aClass(type))
 [L 36] new JUnitCore().run(request)
 [L 43] new FailureList(failures).result()
 [L 54] result.getFailures()
 [L 54] result.getFailures().size()
 [L 60] new TextListener(new PrintStream(stream)).testRunFinished(result)
 [L 61] stream.toString()

/src/main/java/org/junit/experimental/results/FailureList.java
==============================================================
 [L 18] result.createListener()
 [L 21] listener.testFailure(failure)

/src/main/java/org/junit/experimental/results/ResultMatchers.java
=================================================================
 [L 30] failureCountIs(0)
 [L 39] description.appendText("has " + count + " failures")
 [L 44] item.failureCount()
 [L 55] item.toString()
 [L 55] item.toString().contains(string)
 [L 55] failureCountIs(1)
 [L 55] failureCountIs(1).matches(item)
 [L 59] description.appendText("has single failure containing " + string)
 [L 71] item.toString()
 [L 71] item.toString().contains(string)
 [L 75] description.appendText("has failure containing " + string)

/src/main/java/org/junit/experimental/runners/Enclosed.java
===========================================================
 [L 31] klass.getClasses()
 [L 31] filterAbstractClasses(klass.getClasses())
 [L 38] clazz.getModifiers()
 [L 38] Modifier.isAbstract(clazz.getModifiers())
 [L 39] filteredList.add(clazz)
 [L 43] filteredList.size()
 [L 43] filteredList.toArray(new Class<?>[filteredList.size()])

/src/main/java/org/junit/experimental/categories/IncludeCategories.java
=======================================================================
 [L 49] super.describe()

/src/main/java/org/junit/experimental/categories/Category.java
==============================================================

/src/main/java/org/junit/experimental/categories/CategoryValidator.java
=======================================================================
 [L 31] asList(BeforeClass.class, AfterClass.class, Before.class, After.class)
 [L 30] unmodifiableSet(new HashSet<Class<? extends Annotation>>(asList(BeforeClass.class, AfterClass.class, Before.class, After.class)))
 [L 46] method.getAnnotations()
 [L 49] annotation.annotationType()
 [L 49] annotation.annotationType().isAssignableFrom(clazz)
 [L 50] addErrorMessage(errors, clazz)
 [L 54] unmodifiableList(errors)
 [L 59] clazz.getSimpleName()
 [L 58] String.format("@%s can not be combined with @Category", clazz.getSimpleName())
 [L 60] errors.add(new Exception(message))

/src/main/java/org/junit/experimental/categories/CategoryFilterFactory.java
===========================================================================
 [L 23] params.getArgs()
 [L 23] parseCategories(params.getArgs())
 [L 23] createFilter(parseCategories(params.getArgs()))
 [L 40] Classes.getClass(category)
 [L 42] categoryClasses.add(categoryClass)
 [L 39] categories.split(",")

/src/main/java/org/junit/experimental/categories/ExcludeCategories.java
=======================================================================
 [L 49] super.describe()

/src/main/java/org/junit/experimental/categories/Categories.java
================================================================
 [L 120] hasNull(categories)
 [L 123] createSet(categories)
 [L 123] categoryFilter(matchAny, createSet(categories), true, null)
 [L 127] include(true, category)
 [L 131] include(true, categories)
 [L 135] hasNull(categories)
 [L 138] createSet(categories)
 [L 138] categoryFilter(true, null, matchAny, createSet(categories))
 [L 142] exclude(true, category)
 [L 146] exclude(true, categories)
 [L 158] copyAndRefine(includes)
 [L 159] copyAndRefine(excludes)
 [L 167] toString()
 [L 185] included.isEmpty()
 [L 184] new StringBuilder("categories ").append(included.isEmpty() ? "[all]" : included)
 [L 186] excluded.isEmpty()
 [L 187] description.append(" - ")
 [L 187] description.append(" - ").append(excluded)
 [L 189] description.toString()
 [L 194] hasCorrectCategoryAnnotation(description)
 [L 199] shouldRun(each)
 [L 198] description.getChildren()
 [L 208] categories(description)
 [L 211] childCategories.isEmpty()
 [L 212] included.isEmpty()
 [L 215] excluded.isEmpty()
 [L 221] matchesAllParentCategories(childCategories, excluded)
 [L 217] matchesAnyParentCategories(childCategories, excluded)
 [L 227] included.isEmpty()
 [L 234] matchesAllParentCategories(childCategories, included)
 [L 232] matchesAnyParentCategories(childCategories, included)
 [L 245] hasAssignableTo(childCategories, parentCategory)
 [L 258] hasAssignableTo(childCategories, parentCategory)
 [L 267] directCategories(description)
 [L 267] Collections.addAll(categories, directCategories(description))
 [L 268] parentDescription(description)
 [L 268] directCategories(parentDescription(description))
 [L 268] Collections.addAll(categories, directCategories(parentDescription(description)))
 [L 273] description.getTestClass()
 [L 274] Description.createSuiteDescription(testClass)
 [L 282] description.getAnnotation(Category.class)
 [L 283] annotation.value()
 [L 289] c.addAll(classes)
 [L 291] c.remove(null)
 [L 309] getIncludedCategory(klass)
 [L 310] getExcludedCategory(klass)
 [L 311] isAnyIncluded(klass)
 [L 312] isAnyExcluded(klass)
 [L 314] CategoryFilter.categoryFilter(isAnyIncluded, included, isAnyExcluded, excluded)
 [L 314] filter(CategoryFilter.categoryFilter(isAnyIncluded, included, isAnyExcluded, excluded))
 [L 321] klass.getAnnotation(IncludeCategory.class)
 [L 322] annotation.value()
 [L 322] createSet(annotation == null ? null : annotation.value())
 [L 326] klass.getAnnotation(IncludeCategory.class)
 [L 327] annotation.matchAny()
 [L 331] klass.getAnnotation(ExcludeCategory.class)
 [L 332] annotation.value()
 [L 332] createSet(annotation == null ? null : annotation.value())
 [L 336] klass.getAnnotation(ExcludeCategory.class)
 [L 337] annotation.matchAny()
 [L 342] to.isAssignableFrom(from)
 [L 352] Collections.addAll(set, t)

/src/main/java/org/junit/validator/AnnotationsValidator.java
============================================================
 [L 22] Arrays.<AnnotatableValidator<?>>asList(new ClassValidator(), new MethodValidator(), new FieldValidator())
 [L 36] validator.validateTestClass(testClass)
 [L 38] validationErrors.addAll(additionalErrors)
 [L 54] validateAnnotatable(annotatable)
 [L 55] validationErrors.addAll(additionalErrors)
 [L 53] getAnnotatablesForTestClass(testClass)
 [L 63] annotation.annotationType()
 [L 65] annotationType.getAnnotation(ValidateWith.class)
 [L 68] ANNOTATION_VALIDATOR_FACTORY.createAnnotationValidator(validateWith)
 [L 70] validateAnnotatable(annotationValidator, annotatable)
 [L 72] validationErrors.addAll(errors)
 [L 62] annotatable.getAnnotations()
 [L 82] singletonList(testClass)
 [L 88] validator.validateAnnotatedClass(testClass)
 [L 97] testClass.getAnnotatedMethods()
 [L 103] validator.validateAnnotatedMethod(method)
 [L 111] testClass.getAnnotatedFields()
 [L 117] validator.validateAnnotatedField(field)

/src/main/java/org/junit/validator/AnnotationValidatorFactory.java
==================================================================
 [L 24] VALIDATORS_FOR_ANNOTATION_TYPES.get(validateWithAnnotation)
 [L 29] validateWithAnnotation.value()
 [L 35] clazz.getName()
 [L 31] clazz.newInstance()
 [L 32] VALIDATORS_FOR_ANNOTATION_TYPES.putIfAbsent(validateWithAnnotation, annotationValidator)
 [L 33] VALIDATORS_FOR_ANNOTATION_TYPES.get(validateWithAnnotation)

/src/main/java/org/junit/validator/AnnotationValidator.java
===========================================================
 [L 22] emptyList()

/src/main/java/org/junit/validator/ValidateWith.java
====================================================

/src/main/java/org/junit/validator/TestClassValidator.java
==========================================================

/src/main/java/org/junit/validator/PublicClassValidator.java
============================================================
 [L 16] emptyList()
 [L 26] testClass.isPublic()
 [L 30] testClass.getName()
 [L 29] singletonList(new Exception("The class " + testClass.getName() + " is not public."))

/src/main/java/org/junit/BeforeClass.java
=========================================

/src/main/java/org/junit/ComparisonFailure.java
===============================================
 [L 49] super.getMessage()
 [L 49] new ComparisonCompactor(MAX_CONTEXT_LENGTH, fExpected, fActual).compact(super.getMessage())
 [L 96] expected.equals(actual)
 [L 100] extractor.compactPrefix()
 [L 101] extractor.compactSuffix()
 [L 103] extractor.expectedDiff()
 [L 104] extractor.actualDiff()
 [L 102] Assert.format(message, compactedPrefix + extractor.expectedDiff() + compactedSuffix, compactedPrefix + extractor.actualDiff() + compactedSuffix)
 [L 97] Assert.format(message, expected, actual)
 [L 109] expected.length()
 [L 109] actual.length()
 [L 109] Math.min(expected.length(), actual.length())
 [L 111] expected.charAt(i)
 [L 111] actual.charAt(i)
 [L 112] expected.substring(0, i)
 [L 115] expected.substring(0, end)
 [L 120] expected.length()
 [L 120] prefix.length()
 [L 121] actual.length()
 [L 121] prefix.length()
 [L 120] Math.min(expected.length() - prefix.length(), actual.length() - prefix.length())
 [L 123] expected.length()
 [L 123] expected.charAt(expected.length() - 1 - suffixLength)
 [L 124] actual.length()
 [L 124] actual.charAt(actual.length() - 1 - suffixLength)
 [L 128] expected.length()
 [L 128] expected.substring(expected.length() - suffixLength)
 [L 139] sharedPrefix()
 [L 140] sharedSuffix(sharedPrefix)
 [L 144] extractDiff(expected)
 [L 148] extractDiff(actual)
 [L 152] sharedPrefix.length()
 [L 155] sharedPrefix.length()
 [L 155] sharedPrefix.substring(sharedPrefix.length() - contextLength)
 [L 159] sharedSuffix.length()
 [L 162] sharedSuffix.substring(0, contextLength)
 [L 166] sharedPrefix.length()
 [L 166] source.length()
 [L 166] sharedSuffix.length()
 [L 166] source.substring(sharedPrefix.length(), source.length() - sharedSuffix.length())

/src/main/java/org/junit/runner/FilterFactory.java
==================================================
 [L 22] exception.getMessage()

/src/main/java/org/junit/runner/manipulation/Filterable.java
============================================================

/src/main/java/org/junit/runner/manipulation/Sortable.java
==========================================================

/src/main/java/org/junit/runner/manipulation/Sorter.java
========================================================
 [L 41] sortable.sort(this)
 [L 46] comparator.compare(o1, o2)

/src/main/java/org/junit/runner/manipulation/package-info.java
==============================================================

/src/main/java/org/junit/runner/manipulation/Filter.java
========================================================
 [L 51] description.isTest()
 [L 52] desiredDescription.equals(description)
 [L 57] shouldRun(each)
 [L 56] description.getChildren()
 [L 66] desiredDescription.getDisplayName()
 [L 66] String.format("Method %s", desiredDescription.getDisplayName())
 [L 97] filterable.filter(this)
 [L 112] first.shouldRun(description)
 [L 113] second.shouldRun(description)
 [L 118] first.describe()
 [L 118] second.describe()

/src/main/java/org/junit/runner/manipulation/NoTestsRemainException.java
========================================================================

/src/main/java/org/junit/runner/notification/Failure.java
=========================================================
 [L 44] fDescription.getDisplayName()
 [L 64] getTestHeader()
 [L 64] fThrownException.getMessage()
 [L 75] getException()
 [L 75] getException().printStackTrace(writer)
 [L 76] stringWriter.toString()
 [L 85] getException()
 [L 85] getException().getMessage()

/src/main/java/org/junit/runner/notification/StoppedByUserException.java
========================================================================

/src/main/java/org/junit/runner/notification/SynchronizedRunListener.java
=========================================================================
 [L 35] listener.testRunStarted(description)
 [L 42] listener.testRunFinished(result)
 [L 49] listener.testStarted(description)
 [L 56] listener.testFinished(description)
 [L 63] listener.testFailure(failure)
 [L 70] listener.testAssumptionFailure(failure)
 [L 77] listener.testIgnored(description)
 [L 83] listener.hashCode()
 [L 96] listener.equals(that.listener)
 [L 101] listener.toString()

/src/main/java/org/junit/runner/notification/RunListener.java
=============================================================

/src/main/java/org/junit/runner/notification/RunNotifier.java
=============================================================
 [L 32] wrapIfNotThreadSafe(listener)
 [L 32] listeners.add(wrapIfNotThreadSafe(listener))
 [L 42] wrapIfNotThreadSafe(listener)
 [L 42] listeners.remove(wrapIfNotThreadSafe(listener))
 [L 50] listener.getClass()
 [L 50] listener.getClass().isAnnotationPresent(RunListener.ThreadSafe.class)
 [L 67] currentListeners.size()
 [L 75] failures.add(new Failure(Description.TEST_MECHANISM, e))
 [L 72] notifyListener(listener)
 [L 73] safeListeners.add(listener)
 [L 78] fireTestFailures(safeListeners, failures)
 [L 91] each.testRunStarted(description)
 [L 88] new SafeNotifier() {

    @Override
    protected void notifyListener(RunListener each) throws Exception {
        each.testRunStarted(description);
    }
}.run()
 [L 103] each.testRunFinished(result)
 [L 100] new SafeNotifier() {

    @Override
    protected void notifyListener(RunListener each) throws Exception {
        each.testRunFinished(result);
    }
}.run()
 [L 121] each.testStarted(description)
 [L 118] new SafeNotifier() {

    @Override
    protected void notifyListener(RunListener each) throws Exception {
        each.testStarted(description);
    }
}.run()
 [L 132] asList(failure)
 [L 132] fireTestFailures(listeners, asList(failure))
 [L 137] failures.isEmpty()
 [L 142] listener.testFailure(each)
 [L 138] new SafeNotifier(listeners) {

    @Override
    protected void notifyListener(RunListener listener) throws Exception {
        for (Failure each : failures) {
            listener.testFailure(each);
        }
    }
}.run()
 [L 160] each.testAssumptionFailure(failure)
 [L 157] new SafeNotifier() {

    @Override
    protected void notifyListener(RunListener each) throws Exception {
        each.testAssumptionFailure(failure);
    }
}.run()
 [L 174] each.testIgnored(description)
 [L 171] new SafeNotifier() {

    @Override
    protected void notifyListener(RunListener each) throws Exception {
        each.testIgnored(description);
    }
}.run()
 [L 190] each.testFinished(description)
 [L 187] new SafeNotifier() {

    @Override
    protected void notifyListener(RunListener each) throws Exception {
        each.testFinished(description);
    }
}.run()
 [L 212] wrapIfNotThreadSafe(listener)
 [L 212] listeners.add(0, wrapIfNotThreadSafe(listener))

/src/main/java/org/junit/runner/notification/package-info.java
==============================================================

/src/main/java/org/junit/runner/Runner.java
===========================================
 [L 41] getDescription()
 [L 41] getDescription().testCount()

/src/main/java/org/junit/runner/Computer.java
=============================================
 [L 31] getRunner(builder, testClass)
 [L 40] builder.runnerForClass(testClass)

/src/main/java/org/junit/runner/Description.java
================================================
 [L 33] Pattern.compile("([\\s\\S]*)\\((.*)\\)")
 [L 73] formatDisplayName(name, className)
 [L 86] clazz.getName()
 [L 86] formatDisplayName(name, clazz.getName())
 [L 99] clazz.getName()
 [L 99] formatDisplayName(name, clazz.getName())
 [L 110] formatDisplayName(name, className)
 [L 114] String.format("%s(%s)", name, className)
 [L 124] testClass.getName()
 [L 124] testClass.getAnnotations()
 [L 155] displayName.length()
 [L 182] fChildren.add(description)
 [L 197] isTest()
 [L 204] fChildren.isEmpty()
 [L 211] isTest()
 [L 216] child.testCount()
 [L 223] fUniqueId.hashCode()
 [L 232] fUniqueId.equals(d.fUniqueId)
 [L 237] getDisplayName()
 [L 244] equals(EMPTY)
 [L 261] each.annotationType()
 [L 261] each.annotationType().equals(annotationType)
 [L 262] annotationType.cast(each)
 [L 272] Arrays.asList(fAnnotations)
 [L 283] getClassName()
 [L 288] getClass()
 [L 288] getClass().getClassLoader()
 [L 288] Class.forName(name, false, getClass().getClassLoader())
 [L 300] toString()
 [L 300] methodAndClassNamePatternGroupOrDefault(2, toString())
 [L 300] fTestClass.getName()
 [L 308] methodAndClassNamePatternGroupOrDefault(1, null)
 [L 313] toString()
 [L 313] METHOD_AND_CLASS_NAME_PATTERN.matcher(toString())
 [L 314] matcher.matches()
 [L 314] matcher.group(group)

/src/main/java/org/junit/runner/RunWith.java
============================================

/src/main/java/org/junit/runner/FilterFactories.java
====================================================
 [L 23] request.getRunner()
 [L 23] request.getRunner().getDescription()
 [L 26] filterSpec.contains("=")
 [L 27] filterSpec.split("=", 2)
 [L 32] createFilter(tuple[0], new FilterFactoryParams(topLevelDescription, tuple[1]))
 [L 43] createFilterFactory(filterFactoryFqcn)
 [L 45] filterFactory.createFilter(params)
 [L 57] createFilterFactory(filterFactoryClass)
 [L 59] filterFactory.createFilter(params)
 [L 66] Classes.getClass(filterFactoryFqcn)
 [L 66] Classes.getClass(filterFactoryFqcn).asSubclass(FilterFactory.class)
 [L 71] createFilterFactory(filterFactoryClass)
 [L 77] filterFactoryClass.getConstructor()
 [L 77] filterFactoryClass.getConstructor().newInstance()

/src/main/java/org/junit/runner/FilterFactoryParams.java
========================================================

/src/main/java/org/junit/runner/JUnitCommandLineParseResult.java
================================================================
 [L 26] Collections.unmodifiableList(filterSpecs)
 [L 33] Collections.unmodifiableList(classes)
 [L 44] result.parseArgs(args)
 [L 50] parseOptions(args)
 [L 50] parseParameters(parseOptions(args))
 [L 57] arg.equals("--")
 [L 59] arg.startsWith("--")
 [L 80] copyArray(args, i, args.length)
 [L 60] arg.startsWith("--filter=")
 [L 60] arg.equals("--filter")
 [L 77] parserErrors.add(new CommandLineParserError("JUnit knows nothing about the " + arg + " option"))
 [L 62] arg.equals("--filter")
 [L 72] arg.indexOf('=')
 [L 72] arg.substring(arg.indexOf('=') + 1)
 [L 68] parserErrors.add(new CommandLineParserError(arg + " value not specified"))
 [L 75] filterSpecs.add(filterSpec)
 [L 58] copyArray(args, i + 1, args.length)
 [L 91] result.add(args[j])
 [L 94] result.size()
 [L 94] result.toArray(new String[result.size()])
 [L 102] parserErrors.add(new IllegalArgumentException("Could not find class [" + arg + "]", e))
 [L 100] Classes.getClass(arg)
 [L 100] classes.add(Classes.getClass(arg))
 [L 108] Request.errorReport(JUnitCommandLineParseResult.class, cause)
 [L 117] parserErrors.isEmpty()
 [L 122] errorReport(new InitializationError(parserErrors))
 [L 119] classes.size()
 [L 119] classes.toArray(new Class<?>[classes.size()])
 [L 118] Request.classes(computer, classes.toArray(new Class<?>[classes.size()]))
 [L 120] applyFilterSpecs(request)
 [L 135] errorReport(e)
 [L 129] FilterFactories.createFilterFromFilterSpec(request, filterSpec)
 [L 131] request.filterWith(filter)

/src/main/java/org/junit/runner/Describable.java
================================================

/src/main/java/org/junit/runner/JUnitCore.java
==============================================
 [L 36] new JUnitCore().runMain(new RealSystem(), args)
 [L 37] result.wasSuccessful()
 [L 37] System.exit(result.wasSuccessful() ? 0 : 1)
 [L 49] defaultComputer()
 [L 49] runClasses(defaultComputer(), classes)
 [L 62] new JUnitCore().run(computer, classes)
 [L 70] Version.id()
 [L 70] system.out()
 [L 70] system.out().println("JUnit version " + Version.id())
 [L 72] JUnitCommandLineParseResult.parse(args)
 [L 75] addListener(listener)
 [L 77] defaultComputer()
 [L 77] jUnitCommandLineParseResult.createRequest(defaultComputer())
 [L 77] run(jUnitCommandLineParseResult.createRequest(defaultComputer()))
 [L 84] Version.id()
 [L 94] defaultComputer()
 [L 94] run(defaultComputer(), classes)
 [L 105] Request.classes(computer, classes)
 [L 105] run(Request.classes(computer, classes))
 [L 115] request.getRunner()
 [L 115] run(request.getRunner())
 [L 125] run(new JUnit38ClassRunner(test))
 [L 133] result.createListener()
 [L 134] notifier.addFirstListener(listener)
 [L 140] removeListener(listener)
 [L 136] runner.getDescription()
 [L 136] notifier.fireTestRunStarted(runner.getDescription())
 [L 137] runner.run(notifier)
 [L 138] notifier.fireTestRunFinished(result)
 [L 152] notifier.addListener(listener)
 [L 161] notifier.removeListener(listener)

/src/main/java/org/junit/runner/Result.java
===========================================
 [L 28] ObjectStreamClass.lookup(SerializedForm.class)
 [L 28] ObjectStreamClass.lookup(SerializedForm.class).getFields()
 [L 58] count.get()
 [L 65] failures.size()
 [L 72] runTime.get()
 [L 86] ignoreCount.get()
 [L 93] getFailureCount()
 [L 98] serializedForm.serialize(s)
 [L 103] SerializedForm.deserialize(s)
 [L 114] System.currentTimeMillis()
 [L 114] startTime.set(System.currentTimeMillis())
 [L 119] System.currentTimeMillis()
 [L 120] startTime.get()
 [L 120] runTime.addAndGet(endTime - startTime.get())
 [L 125] count.getAndIncrement()
 [L 130] failures.add(failure)
 [L 135] ignoreCount.getAndIncrement()
 [L 166] Collections.synchronizedList(new ArrayList<Failure>(result.failures))
 [L 167] result.runTime.longValue()
 [L 168] result.startTime.longValue()
 [L 173] fields.get("fCount", null)
 [L 174] fields.get("fIgnoreCount", null)
 [L 175] fields.get("fFailures", null)
 [L 176] fields.get("fRunTime", 0L)
 [L 177] fields.get("fStartTime", 0L)
 [L 181] s.putFields()
 [L 182] fields.put("fCount", fCount)
 [L 183] fields.put("fIgnoreCount", fIgnoreCount)
 [L 184] fields.put("fFailures", fFailures)
 [L 185] fields.put("fRunTime", fRunTime)
 [L 186] fields.put("fStartTime", fStartTime)
 [L 187] s.writeFields()
 [L 192] s.readFields()

/src/main/java/org/junit/runner/package-info.java
=================================================

/src/main/java/org/junit/runner/Request.java
============================================
 [L 38] Description.createTestDescription(clazz, methodName)
 [L 39] Request.aClass(clazz)
 [L 39] Request.aClass(clazz).filterWith(method)
 [L 78] runner(new ErrorReportingRunner(e, classes))
 [L 75] computer.getSuite(builder, classes)
 [L 76] runner(suite)
 [L 90] JUnitCore.defaultComputer()
 [L 90] classes(JUnitCore.defaultComputer(), classes)
 [L 99] runner(new ErrorReportingRunner(klass, cause))
 [L 141] Filter.matchMethodDescription(desiredDescription)
 [L 141] filterWith(Filter.matchMethodDescription(desiredDescription))

/src/main/java/org/junit/Ignore.java
====================================

/src/main/java/org/junit/internal/builders/JUnit4Builder.java
=============================================================

/src/main/java/org/junit/internal/builders/IgnoredClassRunner.java
==================================================================
 [L 16] getDescription()
 [L 16] notifier.fireTestIgnored(getDescription())
 [L 21] Description.createSuiteDescription(clazz)

/src/main/java/org/junit/internal/builders/AnnotatedBuilder.java
================================================================
 [L 84] currentTestClass.getAnnotation(RunWith.class)
 [L 86] annotation.value()
 [L 86] buildRunner(annotation.value(), testClass)
 [L 83] getEnclosingClassForNonStaticMemberClass(currentTestClass)
 [L 94] currentTestClass.isMemberClass()
 [L 94] currentTestClass.getModifiers()
 [L 94] Modifier.isStatic(currentTestClass.getModifiers())
 [L 95] currentTestClass.getEnclosingClass()
 [L 110] runnerClass.getSimpleName()
 [L 111] String.format(CONSTRUCTOR_ERROR_FORMAT, simpleName, simpleName)
 [L 107] runnerClass.getConstructor(Class.class, RunnerBuilder.class)
 [L 107] runnerClass.getConstructor(Class.class, RunnerBuilder.class).newInstance(testClass, suiteBuilder)
 [L 104] runnerClass.getConstructor(Class.class)
 [L 104] runnerClass.getConstructor(Class.class).newInstance(testClass)

/src/main/java/org/junit/internal/builders/NullBuilder.java
===========================================================

/src/main/java/org/junit/internal/builders/IgnoredBuilder.java
==============================================================
 [L 10] testClass.getAnnotation(Ignore.class)

/src/main/java/org/junit/internal/builders/AllDefaultPossibilitiesBuilder.java
==============================================================================
 [L 19] ignoredBuilder()
 [L 20] annotatedBuilder()
 [L 21] suiteMethodBuilder()
 [L 22] junit3Builder()
 [L 23] junit4Builder()
 [L 18] Arrays.asList(ignoredBuilder(), annotatedBuilder(), suiteMethodBuilder(), junit3Builder(), junit4Builder())
 [L 26] each.safeRunnerForClass(testClass)

/src/main/java/org/junit/internal/builders/JUnit3Builder.java
=============================================================
 [L 10] isPre4Test(testClass)
 [L 17] junit.framework.TestCase.class.isAssignableFrom(testClass)

/src/main/java/org/junit/internal/builders/SuiteMethodBuilder.java
==================================================================
 [L 10] hasSuiteMethod(each)
 [L 18] testClass.getMethod("suite")

/src/main/java/org/junit/internal/InexactComparisonCriteria.java
================================================================
 [L 21] Assert.assertEquals((Float) expected, (Float) actual, (Float) fDelta)
 [L 19] Assert.assertEquals((Double) expected, (Double) actual, (Double) fDelta)

/src/main/java/org/junit/internal/ArrayComparisonFailure.java
=============================================================
 [L 35] initCause(cause)
 [L 36] addDimension(index)
 [L 40] fIndices.add(0, index)
 [L 47] sb.append(fMessage)
 [L 49] sb.append("arrays first differed at element ")
 [L 51] sb.append("[")
 [L 52] sb.append(each)
 [L 53] sb.append("]")
 [L 55] sb.append("; ")
 [L 56] getCause()
 [L 56] getCause().getMessage()
 [L 56] sb.append(getCause().getMessage())
 [L 57] sb.toString()
 [L 65] getMessage()

/src/main/java/org/junit/internal/requests/ClassRequest.java
============================================================
 [L 33] new AllDefaultPossibilitiesBuilder(canUseSuiteMethod).safeRunnerForClass(fTestClass)

/src/main/java/org/junit/internal/requests/SortingRequest.java
==============================================================
 [L 21] request.getRunner()
 [L 22] new Sorter(comparator).apply(runner)

/src/main/java/org/junit/internal/requests/FilterRequest.java
=============================================================
 [L 41] fFilter.describe()
 [L 42] request.toString()
 [L 40] String.format("No tests found matching %s from %s", fFilter.describe(), request.toString())
 [L 36] request.getRunner()
 [L 37] fFilter.apply(runner)

/src/main/java/org/junit/internal/requests/package-info.java
============================================================

/src/main/java/org/junit/internal/Throwables.java
=================================================
 [L 34] Throwables.<Exception>rethrow(e)

/src/main/java/org/junit/internal/JUnitSystem.java
==================================================

/src/main/java/org/junit/internal/RealSystem.java
=================================================
 [L 12] System.exit(code)

/src/main/java/org/junit/internal/MethodSorter.java
===================================================
 [L 15] m1.getName()
 [L 15] m1.getName().hashCode()
 [L 16] m2.getName()
 [L 16] m2.getName().hashCode()
 [L 20] NAME_ASCENDING.compare(m1, m2)
 [L 29] m2.getName()
 [L 29] m1.getName()
 [L 29] m1.getName().compareTo(m2.getName())
 [L 33] m2.toString()
 [L 33] m1.toString()
 [L 33] m1.toString().compareTo(m2.toString())
 [L 52] clazz.getAnnotation(FixMethodOrder.class)
 [L 52] getSorter(clazz.getAnnotation(FixMethodOrder.class))
 [L 54] clazz.getDeclaredMethods()
 [L 56] Arrays.sort(methods, comparator)
 [L 70] fixMethodOrder.value()
 [L 70] fixMethodOrder.value().getComparator()

/src/main/java/org/junit/internal/ComparisonCriteria.java
=========================================================
 [L 28] arrayEquals(message, expecteds, actuals, true)
 [L 34] Arrays.deepEquals(new Object[] { expecteds }, new Object[] { actuals })
 [L 44] assertArraysAreSameLength(expecteds, actuals, exceptionMessage)
 [L 47] Array.get(expecteds, i)
 [L 48] Array.get(actuals, i)
 [L 50] isArray(expected)
 [L 50] isArray(actual)
 [L 62] assertElementsEqual(expected, actual)
 [L 54] e.addDimension(i)
 [L 52] arrayEquals(message, expected, actual, false)
 [L 71] expected.getClass()
 [L 71] expected.getClass().isArray()
 [L 77] Assert.fail(header + "expected array was null")
 [L 80] Assert.fail(header + "actual array was null")
 [L 82] Array.getLength(actuals)
 [L 83] Array.getLength(expecteds)
 [L 85] Assert.fail(header + "array lengths differed, expected.length=" + expectedsLength + " actual.length=" + actualsLength)

/src/main/java/org/junit/internal/Classes.java
==============================================
 [L 25] currentThread()
 [L 25] currentThread().getContextClassLoader()
 [L 25] Class.forName(className, true, currentThread().getContextClassLoader())

/src/main/java/org/junit/internal/TextListener.java
===================================================
 [L 17] system.out()
 [L 26] result.getRunTime()
 [L 26] printHeader(result.getRunTime())
 [L 27] printFailures(result)
 [L 28] printFooter(result)
 [L 33] writer.append('.')
 [L 38] writer.append('E')
 [L 43] writer.append('I')
 [L 55] getWriter()
 [L 55] getWriter().println()
 [L 56] elapsedTimeAsString(runTime)
 [L 56] getWriter()
 [L 56] getWriter().println("Time: " + elapsedTimeAsString(runTime))
 [L 60] result.getFailures()
 [L 61] failures.isEmpty()
 [L 64] failures.size()
 [L 67] failures.size()
 [L 67] getWriter()
 [L 67] getWriter().println("There were " + failures.size() + " failures:")
 [L 65] failures.size()
 [L 65] getWriter()
 [L 65] getWriter().println("There was " + failures.size() + " failure:")
 [L 71] printFailure(each, "" + i++)
 [L 76] each.getTestHeader()
 [L 76] getWriter()
 [L 76] getWriter().println(prefix + ") " + each.getTestHeader())
 [L 77] each.getTrace()
 [L 77] getWriter()
 [L 77] getWriter().print(each.getTrace())
 [L 81] result.wasSuccessful()
 [L 87] getWriter()
 [L 87] getWriter().println()
 [L 88] getWriter()
 [L 88] getWriter().println("FAILURES!!!")
 [L 89] result.getRunCount()
 [L 89] result.getFailureCount()
 [L 89] getWriter()
 [L 89] getWriter().println("Tests run: " + result.getRunCount() + ",  Failures: " + result.getFailureCount())
 [L 82] getWriter()
 [L 82] getWriter().println()
 [L 83] getWriter()
 [L 83] getWriter().print("OK")
 [L 84] result.getRunCount()
 [L 84] result.getRunCount()
 [L 84] getWriter()
 [L 84] getWriter().println(" (" + result.getRunCount() + " test" + (result.getRunCount() == 1 ? "" : "s") + ")")
 [L 91] getWriter()
 [L 91] getWriter().println()
 [L 99] NumberFormat.getInstance()
 [L 99] NumberFormat.getInstance().format((double) runTime / 1000)

/src/main/java/org/junit/internal/AssumptionViolatedException.java
==================================================================
 [L 39] initCause((Throwable) value)
 [L 83] initCause(e)
 [L 88] StringDescription.asString(this)
 [L 93] description.appendText(fAssumption)
 [L 99] description.appendText(": ")
 [L 102] description.appendText("got: ")
 [L 103] description.appendValue(fValue)
 [L 106] description.appendText(", expected: ")
 [L 107] description.appendDescriptionOf(fMatcher)

/src/main/java/org/junit/internal/runners/TestClass.java
========================================================
 [L 31] getAnnotatedMethods(Test.class)
 [L 35] getAnnotatedMethods(BeforeClass.class)
 [L 39] getAnnotatedMethods(AfterClass.class)
 [L 45] MethodSorter.getDeclaredMethods(eachClass)
 [L 47] eachMethod.getAnnotation(annotationClass)
 [L 48] isShadowed(eachMethod, results)
 [L 49] results.add(eachMethod)
 [L 44] getSuperClasses(klass)
 [L 53] runsTopToBottom(annotationClass)
 [L 54] Collections.reverse(results)
 [L 60] annotation.equals(Before.class)
 [L 60] annotation.equals(BeforeClass.class)
 [L 65] isShadowed(method, each)
 [L 73] current.getName()
 [L 73] previous.getName()
 [L 73] previous.getName().equals(current.getName())
 [L 76] previous.getParameterTypes()
 [L 76] current.getParameterTypes()
 [L 80] current.getParameterTypes()
 [L 80] previous.getParameterTypes()
 [L 80] previous.getParameterTypes()[i].equals(current.getParameterTypes()[i])
 [L 79] previous.getParameterTypes()
 [L 91] results.add(current)
 [L 92] current.getSuperclass()
 [L 98] klass.getConstructor()
 [L 106] klass.getName()

/src/main/java/org/junit/internal/runners/TestMethod.java
=========================================================
 [L 30] method.getAnnotation(Ignore.class)
 [L 34] method.getAnnotation(Test.class)
 [L 38] annotation.timeout()
 [L 43] method.getAnnotation(Test.class)
 [L 44] annotation.expected()
 [L 47] annotation.expected()
 [L 52] exception.getClass()
 [L 52] getExpectedException()
 [L 52] getExpectedException().isAssignableFrom(exception.getClass())
 [L 56] getExpectedException()
 [L 60] testClass.getAnnotatedMethods(Before.class)
 [L 64] testClass.getAnnotatedMethods(After.class)
 [L 68] method.invoke(test)

/src/main/java/org/junit/internal/runners/MethodRoadie.java
===========================================================
 [L 40] testMethod.isIgnored()
 [L 41] notifier.fireTestIgnored(description)
 [L 44] notifier.fireTestStarted(description)
 [L 53] notifier.fireTestFinished(description)
 [L 46] testMethod.getTimeout()
 [L 50] runTest()
 [L 48] runWithTimeout(timeout)
 [L 61] Executors.newSingleThreadExecutor()
 [L 64] runTestMethod()
 [L 68] service.submit(callable)
 [L 69] service.shutdown()
 [L 78] addFailure(new TestTimedOutException(timeout, TimeUnit.MILLISECONDS))
 [L 80] addFailure(e)
 [L 71] service.awaitTermination(timeout, TimeUnit.MILLISECONDS)
 [L 74] service.shutdownNow()
 [L 76] result.get(0, TimeUnit.MILLISECONDS)
 [L 58] runBeforesThenTestThenAfters(new Runnable() {

    public void run() {
        ExecutorService service = Executors.newSingleThreadExecutor();
        Callable<Object> callable = new Callable<Object>() {

            public Object call() throws Exception {
                runTestMethod();
                return null;
            }
        };
        Future<Object> result = service.submit(callable);
        service.shutdown();
        try {
            boolean terminated = service.awaitTermination(timeout, TimeUnit.MILLISECONDS);
            if (!terminated) {
                service.shutdownNow();
            }
            // throws the exception if one occurred during the invocation
            result.get(0, TimeUnit.MILLISECONDS);
        } catch (TimeoutException e) {
            addFailure(new TestTimedOutException(timeout, TimeUnit.MILLISECONDS));
        } catch (Exception e) {
            addFailure(e);
        }
    }
})
 [L 89] runTestMethod()
 [L 87] runBeforesThenTestThenAfters(new Runnable() {

    public void run() {
        runTestMethod();
    }
})
 [L 102] runAfters()
 [L 96] runBefores()
 [L 97] test.run()
 [L 113] e.getTargetException()
 [L 116] testMethod.expectsException()
 [L 118] testMethod.isUnexpected(actual)
 [L 119] testMethod.getExpectedException()
 [L 119] testMethod.getExpectedException().getName()
 [L 120] actual.getClass()
 [L 120] actual.getClass().getName()
 [L 121] addFailure(new Exception(message, actual))
 [L 117] addFailure(actual)
 [L 124] addFailure(e)
 [L 108] testMethod.invoke(test)
 [L 109] testMethod.expectsException()
 [L 110] testMethod.getExpectedException()
 [L 110] testMethod.getExpectedException().getName()
 [L 110] addFailure(new AssertionError("Expected exception: " + testMethod.getExpectedException().getName()))
 [L 141] addFailure(e)
 [L 136] e.getTargetException()
 [L 131] testMethod.getBefores()
 [L 133] before.invoke(test)
 [L 147] testMethod.getAfters()
 [L 152] e.getTargetException()
 [L 152] addFailure(e.getTargetException())
 [L 154] addFailure(e)
 [L 150] after.invoke(test)
 [L 160] notifier.fireTestFailure(new Failure(description, e))

/src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java
=================================================================
 [L 33] asDescription(test)
 [L 33] notifier.fireTestFinished(asDescription(test))
 [L 37] asDescription(test)
 [L 37] notifier.fireTestStarted(asDescription(test))
 [L 42] asDescription(test)
 [L 43] notifier.fireTestFailure(failure)
 [L 49] facade.getDescription()
 [L 51] getEffectiveClass(test)
 [L 51] getName(test)
 [L 51] Description.createTestDescription(getEffectiveClass(test), getName(test))
 [L 55] test.getClass()
 [L 62] test.toString()
 [L 60] ((TestCase) test).getName()
 [L 67] addError(test, t)
 [L 74] klass.asSubclass(TestCase.class)
 [L 79] setTest(test)
 [L 85] createAdaptingListener(notifier)
 [L 85] result.addListener(createAdaptingListener(notifier))
 [L 86] getTest()
 [L 86] getTest().run(result)
 [L 95] getTest()
 [L 95] makeDescription(getTest())
 [L 121] test.getClass()
 [L 121] Description.createSuiteDescription(test.getClass())
 [L 118] decorator.getTest()
 [L 118] makeDescription(decorator.getTest())
 [L 115] adapter.getDescription()
 [L 105] ts.getName()
 [L 105] ts.getName()
 [L 105] createSuiteDescription(ts)
 [L 106] Description.createSuiteDescription(name)
 [L 107] ts.testCount()
 [L 109] ts.testAt(i)
 [L 109] makeDescription(ts.testAt(i))
 [L 110] description.addChild(made)
 [L 101] tc.getClass()
 [L 101] tc.getName()
 [L 102] getAnnotations(tc)
 [L 101] Description.createTestDescription(tc.getClass(), tc.getName(), getAnnotations(tc))
 [L 131] test.getName()
 [L 131] test.getClass()
 [L 131] test.getClass().getMethod(test.getName())
 [L 132] m.getDeclaredAnnotations()
 [L 140] ts.countTestCases()
 [L 141] ts.testAt(0)
 [L 141] String.format(" [example: %s]", ts.testAt(0))
 [L 142] String.format("TestSuite with %s tests%s", count, example)
 [L 146] getTest()
 [L 149] getTest()
 [L 150] getTest()
 [L 151] suite.getName()
 [L 152] suite.testCount()
 [L 154] suite.testAt(i)
 [L 155] makeDescription(test)
 [L 155] filter.shouldRun(makeDescription(test))
 [L 156] filtered.addTest(test)
 [L 159] setTest(filtered)
 [L 160] filtered.testCount()
 [L 147] getTest()
 [L 148] adapter.filter(filter)
 [L 167] getTest()
 [L 168] getTest()
 [L 169] adapter.sort(sorter)

/src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java
================================================================
 [L 34] getTestMethods()
 [L 35] validate()
 [L 39] testClass.getTestMethods()
 [L 44] methodValidator.validateMethodsForDefaultRunner()
 [L 45] methodValidator.assertValid()
 [L 50] getDescription()
 [L 52] runMethods(notifier)
 [L 50] new ClassRoadie(notifier, testClass, getDescription(), new Runnable() {

    public void run() {
        runMethods(notifier);
    }
}).runProtected()
 [L 59] invokeTestMethod(method, notifier)
 [L 65] getName()
 [L 65] classAnnotations()
 [L 65] Description.createSuiteDescription(getName(), classAnnotations())
 [L 68] methodDescription(method)
 [L 68] spec.addChild(methodDescription(method))
 [L 74] testClass.getJavaClass()
 [L 74] testClass.getJavaClass().getAnnotations()
 [L 78] getTestClass()
 [L 78] getTestClass().getName()
 [L 82] getTestClass()
 [L 82] getTestClass().getConstructor()
 [L 82] getTestClass().getConstructor().newInstance()
 [L 86] methodDescription(method)
 [L 91] e.getCause()
 [L 91] testAborted(notifier, description, e.getCause())
 [L 94] testAborted(notifier, description, e)
 [L 89] createTest()
 [L 97] wrapMethod(method)
 [L 98] new MethodRoadie(test, testMethod, notifier, description).run()
 [L 103] notifier.fireTestStarted(description)
 [L 104] notifier.fireTestFailure(new Failure(description, e))
 [L 105] notifier.fireTestFinished(description)
 [L 113] method.getName()
 [L 117] getTestClass()
 [L 117] getTestClass().getJavaClass()
 [L 117] testName(method)
 [L 117] testAnnotations(method)
 [L 117] Description.createTestDescription(getTestClass().getJavaClass(), testName(method), testAnnotations(method))
 [L 121] method.getAnnotations()
 [L 126] iter.next()
 [L 127] methodDescription(method)
 [L 127] filter.shouldRun(methodDescription(method))
 [L 128] iter.remove()
 [L 125] iter.hasNext()
 [L 125] testMethods.iterator()
 [L 131] testMethods.isEmpty()
 [L 139] methodDescription(o1)
 [L 139] methodDescription(o2)
 [L 139] sorter.compare(methodDescription(o1), methodDescription(o2))
 [L 137] Collections.sort(testMethods, new Comparator<Method>() {

    public int compare(Method o1, Method o2) {
        return sorter.compare(methodDescription(o1), methodDescription(o2));
    }
})

/src/main/java/org/junit/internal/runners/MethodValidator.java
==============================================================
 [L 33] validateTestMethods(After.class, false)
 [L 34] validateTestMethods(Before.class, false)
 [L 35] validateTestMethods(Test.class, false)
 [L 37] testClass.getAnnotatedMethods(Test.class)
 [L 38] methods.size()
 [L 39] errors.add(new Exception("No runnable methods"))
 [L 44] validateTestMethods(BeforeClass.class, true)
 [L 45] validateTestMethods(AfterClass.class, true)
 [L 49] validateNoArgConstructor()
 [L 50] validateStaticMethods()
 [L 51] validateInstanceMethods()
 [L 56] errors.isEmpty()
 [L 65] errors.add(new Exception("Test class should have public zero-argument constructor", e))
 [L 63] testClass.getConstructor()
 [L 71] testClass.getAnnotatedMethods(annotation)
 [L 74] each.getModifiers()
 [L 74] Modifier.isStatic(each.getModifiers())
 [L 76] each.getName()
 [L 76] errors.add(new Exception("Method " + each.getName() + "() " + state + " be static"))
 [L 79] each.getDeclaringClass()
 [L 79] each.getDeclaringClass().getModifiers()
 [L 79] Modifier.isPublic(each.getDeclaringClass().getModifiers())
 [L 80] each.getDeclaringClass()
 [L 80] each.getDeclaringClass().getName()
 [L 80] errors.add(new Exception("Class " + each.getDeclaringClass().getName() + " should be public"))
 [L 83] each.getModifiers()
 [L 83] Modifier.isPublic(each.getModifiers())
 [L 84] each.getName()
 [L 84] errors.add(new Exception("Method " + each.getName() + " should be public"))
 [L 87] each.getReturnType()
 [L 88] each.getName()
 [L 88] errors.add(new Exception("Method " + each.getName() + "should have a return type of void"))
 [L 91] each.getParameterTypes()
 [L 92] each.getName()
 [L 92] errors.add(new Exception("Method " + each.getName() + " should have no parameters"))

/src/main/java/org/junit/internal/runners/FailedBefore.java
===========================================================

/src/main/java/org/junit/internal/runners/ErrorReportingRunner.java
===================================================================
 [L 31] getClassNames(testClasses)
 [L 32] getCauses(cause)
 [L 37] Description.createSuiteDescription(classNames)
 [L 39] describeCause(each)
 [L 39] description.addChild(describeCause(each))
 [L 47] runCause(each, notifier)
 [L 54] builder.length()
 [L 55] builder.append(", ")
 [L 57] testClass.getName()
 [L 57] builder.append(testClass.getName())
 [L 59] builder.toString()
 [L 65] cause.getCause()
 [L 65] getCauses(cause.getCause())
 [L 68] ((InitializationError) cause).getCauses()
 [L 71] ((org.junit.internal.runners.InitializationError) cause).getCauses()
 [L 74] Arrays.asList(cause)
 [L 78] Description.createTestDescription(classNames, "initializationError")
 [L 82] describeCause(child)
 [L 83] notifier.fireTestStarted(description)
 [L 84] notifier.fireTestFailure(new Failure(description, child))
 [L 85] notifier.fireTestFinished(description)

/src/main/java/org/junit/internal/runners/statements/Fail.java
==============================================================

/src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java
=======================================================================
 [L 43] builder()
 [L 43] builder().withTimeout(timeoutMillis, TimeUnit.MILLISECONDS)
 [L 125] thread.setDaemon(true)
 [L 126] thread.start()
 [L 127] callable.awaitStarted()
 [L 128] getResult(task, thread)
 [L 150] e.getCause()
 [L 152] createTimeoutException(thread)
 [L 144] task.get()
 [L 142] task.get(timeout, timeUnit)
 [L 157] thread.getStackTrace()
 [L 158] getStuckThread(thread)
 [L 161] currThreadException.setStackTrace(stackTrace)
 [L 162] thread.interrupt()
 [L 167] stuckThread.getName()
 [L 168] getStackTrace(stuckThread)
 [L 168] stuckThreadException.setStackTrace(getStackTrace(stuckThread))
 [L 170] Arrays.<Throwable>asList(currThreadException, stuckThreadException)
 [L 184] thread.getStackTrace()
 [L 201] mainThread.getThreadGroup()
 [L 201] getThreadsInGroup(mainThread.getThreadGroup())
 [L 202] threadsInGroup.isEmpty()
 [L 214] thread.getState()
 [L 215] cpuTime(thread)
 [L 234] group.activeCount()
 [L 235] Math.max(activeThreadCount * 2, 100)
 [L 238] group.enumerate(threads)
 [L 240] Arrays.asList(threads)
 [L 240] Arrays.asList(threads).subList(0, enumCount)
 [L 249] Collections.emptyList()
 [L 258] ManagementFactory.getThreadMXBean()
 [L 259] mxBean.isThreadCpuTimeSupported()
 [L 261] thr.getId()
 [L 261] mxBean.getThreadCpuTime(thr.getId())
 [L 273] startLatch.countDown()
 [L 274] originalStatement.evaluate()
 [L 284] startLatch.await()

/src/main/java/org/junit/internal/runners/statements/RunBefores.java
====================================================================
 [L 24] before.invokeExplosively(target)
 [L 26] next.evaluate()

/src/main/java/org/junit/internal/runners/statements/InvokeMethod.java
======================================================================
 [L 17] testMethod.invokeExplosively(target)

/src/main/java/org/junit/internal/runners/statements/ExpectException.java
=========================================================================
 [L 24] e.getClass()
 [L 24] expected.isAssignableFrom(e.getClass())
 [L 26] expected.getName()
 [L 27] e.getClass()
 [L 27] e.getClass().getName()
 [L 19] next.evaluate()
 [L 33] expected.getName()

/src/main/java/org/junit/internal/runners/statements/RunAfters.java
===================================================================
 [L 29] errors.add(e)
 [L 35] errors.add(e)
 [L 33] each.invokeExplosively(target)
 [L 27] next.evaluate()
 [L 39] MultipleFailureException.assertEmpty(errors)

/src/main/java/org/junit/internal/runners/ClassRoadie.java
==========================================================
 [L 34] runnable.run()
 [L 38] notifier.fireTestFailure(new Failure(description, targetException))
 [L 47] runAfters()
 [L 43] runBefores()
 [L 44] runUnprotected()
 [L 64] addFailure(e)
 [L 59] e.getTargetException()
 [L 54] testClass.getBefores()
 [L 56] before.invoke(null)
 [L 70] testClass.getAfters()
 [L 75] e.getTargetException()
 [L 75] addFailure(e.getTargetException())
 [L 77] addFailure(e)
 [L 73] after.invoke(null)

/src/main/java/org/junit/internal/runners/model/ReflectiveCallable.java
=======================================================================
 [L 14] e.getTargetException()
 [L 12] runReflectiveCall()

/src/main/java/org/junit/internal/runners/model/EachTestNotifier.java
=====================================================================
 [L 23] notifier.fireTestFailure(new Failure(description, targetException))
 [L 21] addMultipleFailureException((MultipleFailureException) targetException)
 [L 29] addFailure(each)
 [L 28] mfe.getFailures()
 [L 34] notifier.fireTestAssumptionFailed(new Failure(description, e))
 [L 38] notifier.fireTestFinished(description)
 [L 42] notifier.fireTestStarted(description)
 [L 46] notifier.fireTestIgnored(description)

/src/main/java/org/junit/internal/runners/model/MultipleFailureException.java
=============================================================================

/src/main/java/org/junit/internal/runners/SuiteMethod.java
==========================================================
 [L 24] testFromSuiteMethod(klass)
 [L 37] e.getCause()
 [L 31] klass.getMethod("suite")
 [L 32] suiteMethod.getModifiers()
 [L 32] Modifier.isStatic(suiteMethod.getModifiers())
 [L 33] klass.getName()
 [L 35] suiteMethod.invoke(null)

/src/main/java/org/junit/internal/runners/rules/RuleMemberValidator.java
========================================================================
 [L 33] classRuleValidatorBuilder()
 [L 33] classRuleValidatorBuilder().withValidator(new DeclaringClassMustBePublic())
 [L 33] classRuleValidatorBuilder().withValidator(new DeclaringClassMustBePublic()).withValidator(new MemberMustBeStatic())
 [L 33] classRuleValidatorBuilder().withValidator(new DeclaringClassMustBePublic()).withValidator(new MemberMustBeStatic()).withValidator(new MemberMustBePublic())
 [L 33] classRuleValidatorBuilder().withValidator(new DeclaringClassMustBePublic()).withValidator(new MemberMustBeStatic()).withValidator(new MemberMustBePublic()).withValidator(new FieldMustBeATestRule())
 [L 33] classRuleValidatorBuilder().withValidator(new DeclaringClassMustBePublic()).withValidator(new MemberMustBeStatic()).withValidator(new MemberMustBePublic()).withValidator(new FieldMustBeATestRule()).build()
 [L 43] testRuleValidatorBuilder()
 [L 43] testRuleValidatorBuilder().withValidator(new MemberMustBeNonStaticOrAlsoClassRule())
 [L 43] testRuleValidatorBuilder().withValidator(new MemberMustBeNonStaticOrAlsoClassRule()).withValidator(new MemberMustBePublic())
 [L 43] testRuleValidatorBuilder().withValidator(new MemberMustBeNonStaticOrAlsoClassRule()).withValidator(new MemberMustBePublic()).withValidator(new FieldMustBeARule())
 [L 43] testRuleValidatorBuilder().withValidator(new MemberMustBeNonStaticOrAlsoClassRule()).withValidator(new MemberMustBePublic()).withValidator(new FieldMustBeARule()).build()
 [L 52] classRuleValidatorBuilder()
 [L 52] classRuleValidatorBuilder().forMethods()
 [L 52] classRuleValidatorBuilder().forMethods().withValidator(new DeclaringClassMustBePublic())
 [L 52] classRuleValidatorBuilder().forMethods().withValidator(new DeclaringClassMustBePublic()).withValidator(new MemberMustBeStatic())
 [L 52] classRuleValidatorBuilder().forMethods().withValidator(new DeclaringClassMustBePublic()).withValidator(new MemberMustBeStatic()).withValidator(new MemberMustBePublic())
 [L 52] classRuleValidatorBuilder().forMethods().withValidator(new DeclaringClassMustBePublic()).withValidator(new MemberMustBeStatic()).withValidator(new MemberMustBePublic()).withValidator(new MethodMustBeATestRule())
 [L 52] classRuleValidatorBuilder().forMethods().withValidator(new DeclaringClassMustBePublic()).withValidator(new MemberMustBeStatic()).withValidator(new MemberMustBePublic()).withValidator(new MethodMustBeATestRule()).build()
 [L 64] testRuleValidatorBuilder()
 [L 64] testRuleValidatorBuilder().forMethods()
 [L 64] testRuleValidatorBuilder().forMethods().withValidator(new MemberMustBeNonStaticOrAlsoClassRule())
 [L 64] testRuleValidatorBuilder().forMethods().withValidator(new MemberMustBeNonStaticOrAlsoClassRule()).withValidator(new MemberMustBePublic())
 [L 64] testRuleValidatorBuilder().forMethods().withValidator(new MemberMustBeNonStaticOrAlsoClassRule()).withValidator(new MemberMustBePublic()).withValidator(new MethodMustBeARule())
 [L 64] testRuleValidatorBuilder().forMethods().withValidator(new MemberMustBeNonStaticOrAlsoClassRule()).withValidator(new MemberMustBePublic()).withValidator(new MethodMustBeARule()).build()
 [L 90] target.getAnnotatedFields(annotation)
 [L 89] target.getAnnotatedMethods(annotation)
 [L 93] validateMember(each, errors)
 [L 99] strategy.validate(member, annotation, errors)
 [L 128] validators.add(validator)
 [L 138] isMethodRule(member)
 [L 138] isTestRule(member)
 [L 142] member.getType()
 [L 142] TestRule.class.isAssignableFrom(member.getType())
 [L 146] member.getType()
 [L 146] MethodRule.class.isAssignableFrom(member.getType())
 [L 168] isMethodRule(member)
 [L 169] member.getAnnotation(ClassRule.class)
 [L 176] member.isStatic()
 [L 178] isMethodRule(member)
 [L 183] errors.add(new ValidationError(member, annotation, message))
 [L 193] member.isStatic()
 [L 194] errors.add(new ValidationError(member, annotation, "must be static."))
 [L 205] isDeclaringClassPublic(member)
 [L 206] errors.add(new ValidationError(member, annotation, "must be declared in a public class."))
 [L 212] member.getDeclaringClass()
 [L 212] member.getDeclaringClass().getModifiers()
 [L 212] Modifier.isPublic(member.getDeclaringClass().getModifiers())
 [L 221] member.isPublic()
 [L 222] errors.add(new ValidationError(member, annotation, "must be public."))
 [L 233] isRuleType(member)
 [L 234] errors.add(new ValidationError(member, annotation, "must implement MethodRule or TestRule."))
 [L 246] isRuleType(member)
 [L 247] errors.add(new ValidationError(member, annotation, "must return an implementation of MethodRule or TestRule."))
 [L 259] isTestRule(member)
 [L 260] errors.add(new ValidationError(member, annotation, "must return an implementation of TestRule."))
 [L 273] isTestRule(member)
 [L 274] errors.add(new ValidationError(member, annotation, "must implement TestRule."))

/src/main/java/org/junit/internal/runners/rules/ValidationError.java
====================================================================
 [L 12] annotation.getSimpleName()
 [L 12] member.getName()
 [L 12] String.format("The @%s '%s' %s", annotation.getSimpleName(), member.getName(), suffix)

/src/main/java/org/junit/internal/runners/InitializationError.java
==================================================================
 [L 27] Arrays.asList(errors)

/src/main/java/org/junit/internal/runners/package-info.java
===========================================================

/src/main/java/org/junit/internal/ExactComparisonCriteria.java
==============================================================
 [L 8] Assert.assertEquals(expected, actual)

/src/main/java/org/junit/internal/matchers/StacktracePrintingMatcher.java
=========================================================================
 [L 28] throwableMatcher.describeTo(description)
 [L 33] throwableMatcher.matches(item)
 [L 38] throwableMatcher.describeMismatch(item, description)
 [L 39] description.appendText("\nStacktrace was: ")
 [L 40] readStacktrace(item)
 [L 40] description.appendText(readStacktrace(item))
 [L 45] throwable.printStackTrace(new PrintWriter(stringWriter))
 [L 46] stringWriter.toString()

/src/main/java/org/junit/internal/matchers/ThrowableCauseMatcher.java
=====================================================================
 [L 26] description.appendText("exception with cause ")
 [L 27] description.appendDescriptionOf(causeMatcher)
 [L 32] item.getCause()
 [L 32] causeMatcher.matches(item.getCause())
 [L 37] description.appendText("cause ")
 [L 38] item.getCause()
 [L 38] causeMatcher.describeMismatch(item.getCause(), description)

/src/main/java/org/junit/internal/matchers/ThrowableMessageMatcher.java
=======================================================================
 [L 18] description.appendText("exception with message ")
 [L 19] description.appendDescriptionOf(matcher)
 [L 24] item.getMessage()
 [L 24] matcher.matches(item.getMessage())
 [L 29] description.appendText("message ")
 [L 30] item.getMessage()
 [L 30] matcher.describeMismatch(item.getMessage(), description)

/src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java
===============================================================
 [L 27] getClass()
 [L 27] findExpectedType(getClass())
 [L 33] isMatchesSafelyMethod(method)
 [L 34] method.getParameterTypes()
 [L 32] MethodSorter.getDeclaredMethods(c)
 [L 31] c.getSuperclass()
 [L 43] method.getName()
 [L 43] "matchesSafely".equals(method.getName())
 [L 44] method.getParameterTypes()
 [L 45] method.isSynthetic()
 [L 60] expectedType.isInstance(item)
 [L 61] matchesSafely((T) item)

/src/main/java/org/junit/FixMethodOrder.java
============================================

/src/main/java/org/junit/Assert.java
====================================
 [L 41] fail(message)
 [L 52] assertTrue(null, condition)
 [L 64] assertTrue(message, !condition)
 [L 74] assertFalse(null, condition)
 [L 95] fail(null)
 [L 111] equalsRegardingNull(expected, actual)
 [L 119] failNotEquals(message, expected, actual)
 [L 128] isEquals(expected, actual)
 [L 132] expected.equals(actual)
 [L 145] assertEquals(null, expected, actual)
 [L 161] equalsRegardingNull(unexpected, actual)
 [L 162] failEquals(message, actual)
 [L 176] assertNotEquals(null, unexpected, actual)
 [L 186] fail(formatted)
 [L 200] Long.valueOf(actual)
 [L 200] failEquals(message, Long.valueOf(actual))
 [L 212] assertNotEquals(null, unexpected, actual)
 [L 232] doubleIsDifferent(unexpected, actual, delta)
 [L 233] Double.valueOf(actual)
 [L 233] failEquals(message, Double.valueOf(actual))
 [L 250] assertNotEquals(null, unexpected, actual, delta)
 [L 266] assertNotEquals(null, unexpected, actual, delta)
 [L 284] internalArrayEquals(message, expecteds, actuals)
 [L 299] assertArrayEquals(null, expecteds, actuals)
 [L 315] internalArrayEquals(message, expecteds, actuals)
 [L 328] assertArrayEquals(null, expecteds, actuals)
 [L 342] internalArrayEquals(message, expecteds, actuals)
 [L 353] assertArrayEquals(null, expecteds, actuals)
 [L 367] internalArrayEquals(message, expecteds, actuals)
 [L 378] assertArrayEquals(null, expecteds, actuals)
 [L 392] internalArrayEquals(message, expecteds, actuals)
 [L 403] assertArrayEquals(null, expecteds, actuals)
 [L 417] internalArrayEquals(message, expecteds, actuals)
 [L 428] assertArrayEquals(null, expecteds, actuals)
 [L 442] internalArrayEquals(message, expecteds, actuals)
 [L 453] assertArrayEquals(null, expecteds, actuals)
 [L 470] new InexactComparisonCriteria(delta).arrayEquals(message, expecteds, actuals)
 [L 484] assertArrayEquals(null, expecteds, actuals, delta)
 [L 501] new InexactComparisonCriteria(delta).arrayEquals(message, expecteds, actuals)
 [L 515] assertArrayEquals(null, expecteds, actuals, delta)
 [L 533] new ExactComparisonCriteria().arrayEquals(message, expecteds, actuals)
 [L 553] doubleIsDifferent(expected, actual, delta)
 [L 554] Double.valueOf(expected)
 [L 554] Double.valueOf(actual)
 [L 554] failNotEquals(message, Double.valueOf(expected), Double.valueOf(actual))
 [L 575] floatIsDifferent(expected, actual, delta)
 [L 576] Float.valueOf(expected)
 [L 576] Float.valueOf(actual)
 [L 576] failNotEquals(message, Float.valueOf(expected), Float.valueOf(actual))
 [L 597] floatIsDifferent(unexpected, actual, delta)
 [L 598] failEquals(message, actual)
 [L 603] Double.compare(d1, d2)
 [L 606] Math.abs(d1 - d2)
 [L 614] Float.compare(f1, f2)
 [L 617] Math.abs(f1 - f2)
 [L 632] assertEquals(null, expected, actual)
 [L 646] Long.valueOf(expected)
 [L 646] Long.valueOf(actual)
 [L 646] failNotEquals(message, Long.valueOf(expected), Long.valueOf(actual))
 [L 657] assertEquals(null, expected, actual)
 [L 668] fail("Use assertEquals(expected, actual, delta) to compare floating-point numbers")
 [L 684] assertEquals(null, expected, actual, delta)
 [L 700] assertEquals(null, expected, actual, delta)
 [L 712] assertTrue(message, object != null)
 [L 722] assertNotNull(null, object)
 [L 737] failNotNull(message, object)
 [L 747] assertNull(null, object)
 [L 755] fail(formatted + "expected null, but was:<" + actual + ">")
 [L 771] failNotSame(message, expected, actual)
 [L 782] assertSame(null, expected, actual)
 [L 798] failSame(message)
 [L 811] assertNotSame(null, unexpected, actual)
 [L 819] fail(formatted + "expected not same")
 [L 828] fail(formatted + "expected same:<" + expected + "> was not:<" + actual + ">")
 [L 834] format(message, expected, actual)
 [L 834] fail(format(message, expected, actual))
 [L 839] "".equals(message)
 [L 842] String.valueOf(expected)
 [L 843] String.valueOf(actual)
 [L 844] expectedString.equals(actualString)
 [L 846] formatClassAndValue(expected, expectedString)
 [L 847] formatClassAndValue(actual, actualString)
 [L 855] value.getClass()
 [L 855] value.getClass().getName()
 [L 876] assertArrayEquals(message, expecteds, actuals)
 [L 893] assertArrayEquals(expecteds, actuals)
 [L 925] assertThat("", actual, matcher)
 [L 960] MatcherAssert.assertThat(reason, actual, matcher)
 [L 986] expectThrows(expectedThrowable, runnable)
 [L 1005] expectedThrowable.isInstance(actualThrown)
 [L 1010] expectedThrowable.getSimpleName()
 [L 1010] actualThrown.getClass()
 [L 1010] actualThrown.getClass().getSimpleName()
 [L 1009] format("unexpected exception type thrown;", expectedThrowable.getSimpleName(), actualThrown.getClass().getSimpleName())
 [L 1014] assertionError.initCause(actualThrown)
 [L 1003] runnable.run()
 [L 1019] expectedThrowable.getSimpleName()
 [L 1018] String.format("expected %s to be thrown, but nothing was thrown", expectedThrowable.getSimpleName())

/src/main/java/org/junit/After.java
===================================

/src/main/java/org/junit/Test.java
==================================

/src/main/java/org/junit/Assume.java
====================================
 [L 50] is(true)
 [L 50] assumeThat(b, is(true))
 [L 57] assumeTrue(!b)
 [L 75] assumeTrue(message, !b)
 [L 82] asList(objects)
 [L 82] notNullValue()
 [L 82] everyItem(notNullValue())
 [L 82] assumeThat(asList(objects), everyItem(notNullValue()))
 [L 105] matcher.matches(actual)
 [L 130] matcher.matches(actual)
 [L 155] nullValue()
 [L 155] assumeThat(e, nullValue())
 [L 169] nullValue()
 [L 169] assumeThat(message, e, nullValue())

/src/main/java/org/junit/rules/TestRule.java
============================================

/src/main/java/org/junit/rules/Verifier.java
============================================
 [L 35] base.evaluate()
 [L 36] verify()

/src/main/java/org/junit/rules/Stopwatch.java
=============================================
 [L 99] getNanos()
 [L 99] unit.convert(getNanos(), TimeUnit.NANOSECONDS)
 [L 132] clock.nanoTime()
 [L 139] clock.nanoTime()
 [L 144] clock.nanoTime()
 [L 148] new InternalWatcher().apply(base, description)
 [L 154] Stopwatch.this.starting()
 [L 158] getNanos()
 [L 158] Stopwatch.this.finished(getNanos(), description)
 [L 162] Stopwatch.this.stopping()
 [L 163] getNanos()
 [L 163] Stopwatch.this.succeeded(getNanos(), description)
 [L 167] Stopwatch.this.stopping()
 [L 168] getNanos()
 [L 168] Stopwatch.this.failed(getNanos(), e, description)
 [L 172] Stopwatch.this.stopping()
 [L 173] getNanos()
 [L 173] Stopwatch.this.skipped(getNanos(), e, description)
 [L 180] System.nanoTime()

/src/main/java/org/junit/rules/RunRules.java
============================================
 [L 15] applyAll(base, rules, description)
 [L 20] statement.evaluate()
 [L 26] each.apply(result, description)

/src/main/java/org/junit/rules/TestName.java
============================================
 [L 32] d.getMethodName()

/src/main/java/org/junit/rules/RuleChain.java
=============================================
 [L 45] Collections.<TestRule>emptyList()
 [L 67] emptyRuleChain()
 [L 67] emptyRuleChain().around(outerRule)
 [L 83] rulesOfNewChain.add(enclosedRule)
 [L 84] rulesOfNewChain.addAll(rulesStartingWithInnerMost)
 [L 93] each.apply(base, description)

/src/main/java/org/junit/rules/ErrorCollector.java
==================================================
 [L 39] MultipleFailureException.assertEmpty(errors)
 [L 46] errors.add(error)
 [L 57] checkThat("", value, matcher)
 [L 71] assertThat(reason, value, matcher)
 [L 69] checkSucceeds(new Callable<Object>() {

    public Object call() throws Exception {
        assertThat(reason, value, matcher);
        return value;
    }
})
 [L 86] addError(e)
 [L 84] callable.call()

/src/main/java/org/junit/rules/ExpectedExceptionMatcherBuilder.java
===================================================================
 [L 19] matchers.add(matcher)
 [L 23] matchers.isEmpty()
 [L 27] allOfTheMatchers()
 [L 27] isThrowable(allOfTheMatchers())
 [L 31] matchers.size()
 [L 32] matchers.get(0)
 [L 32] cast(matchers.get(0))
 [L 34] castedMatchers()
 [L 34] allOf(castedMatchers())

/src/main/java/org/junit/rules/Timeout.java
===========================================
 [L 93] builder.getTimeout()
 [L 94] builder.getTimeUnit()
 [L 95] builder.getLookingForStuckThread()
 [L 124] unit.convert(timeout, timeUnit)
 [L 147] FailOnTimeout.builder()
 [L 147] FailOnTimeout.builder().withTimeout(timeout, timeUnit)
 [L 147] FailOnTimeout.builder().withTimeout(timeout, timeUnit).withLookingForStuckThread(lookForStuckThread)
 [L 147] FailOnTimeout.builder().withTimeout(timeout, timeUnit).withLookingForStuckThread(lookForStuckThread).build(statement)
 [L 155] createFailOnTimeoutStatement(base)

/src/main/java/org/junit/rules/TestWatchman.java
================================================
 [L 51] starting(method)
 [L 58] failed(e, method)
 [L 61] finished(method)
 [L 53] base.evaluate()
 [L 54] succeeded(method)

/src/main/java/org/junit/rules/TemporaryFolder.java
===================================================
 [L 130] create()
 [L 135] delete()
 [L 144] createTemporaryFolderIn(parentFolder)
 [L 151] getRoot()
 [L 152] file.createNewFile()
 [L 163] getRoot()
 [L 163] File.createTempFile("junit", null, getRoot())
 [L 171] newFolder(new String[] { folder })
 [L 179] getRoot()
 [L 182] validateFolderName(folderName)
 [L 184] file.mkdir()
 [L 184] isLastElementInArray(i, folderNames)
 [L 200] tempFile.getParent()
 [L 215] getRoot()
 [L 215] createTemporaryFolderIn(getRoot())
 [L 219] File.createTempFile("junit", "", parentFolder)
 [L 220] createdFolder.delete()
 [L 221] createdFolder.mkdir()
 [L 244] tryDelete()
 [L 246] fail("Unable to clean up temporary folder " + folder)
 [L 263] recursiveDelete(folder)
 [L 268] file.listFiles()
 [L 271] recursiveDelete(each)
 [L 274] file.delete()

/src/main/java/org/junit/rules/DisableOnDebug.java
==================================================
 [L 57] ManagementFactory.getRuntimeMXBean()
 [L 57] ManagementFactory.getRuntimeMXBean().getInputArguments()
 [L 70] isDebugging(inputArguments)
 [L 80] rule.apply(base, description)
 [L 106] "-Xdebug".equals(argument)
 [L 108] argument.startsWith("-agentlib:jdwp")

/src/main/java/org/junit/rules/ExpectedException.java
=====================================================
 [L 175] matcherBuilder.add(matcher)
 [L 188] instanceOf(type)
 [L 188] expect(instanceOf(type))
 [L 201] containsString(substring)
 [L 201] expectMessage(containsString(substring))
 [L 217] hasMessage(matcher)
 [L 217] expect(hasMessage(matcher))
 [L 234] hasCause(expectedCause)
 [L 234] expect(hasCause(expectedCause))
 [L 249] handleException(e)
 [L 247] next.evaluate()
 [L 252] isAnyExceptionExpected()
 [L 253] failDueToMissingException()
 [L 259] isAnyExceptionExpected()
 [L 260] matcherBuilder.build()
 [L 260] assertThat(e, matcherBuilder.build())
 [L 267] matcherBuilder.expectsThrowable()
 [L 271] missingExceptionMessage()
 [L 271] fail(missingExceptionMessage())
 [L 275] matcherBuilder.build()
 [L 275] StringDescription.toString(matcherBuilder.build())
 [L 276] format(missingExceptionMessage, expectation)

/src/main/java/org/junit/rules/MethodRule.java
==============================================

/src/main/java/org/junit/rules/ExternalResource.java
====================================================
 [L 39] statement(base)
 [L 46] before()
 [L 50] after()
 [L 48] base.evaluate()

/src/main/java/org/junit/rules/TestWatcher.java
===============================================
 [L 53] startingQuietly(description, errors)
 [L 58] errors.add(e)
 [L 59] skippedQuietly(e, description, errors)
 [L 61] errors.add(e)
 [L 62] failedQuietly(e, description, errors)
 [L 64] finishedQuietly(description, errors)
 [L 55] base.evaluate()
 [L 56] succeededQuietly(description, errors)
 [L 67] MultipleFailureException.assertEmpty(errors)
 [L 77] errors.add(e)
 [L 75] succeeded(description)
 [L 86] errors.add(e1)
 [L 84] failed(e, description)
 [L 100] errors.add(e1)
 [L 97] skipped(e, description)
 [L 95] skipped((AssumptionViolatedException) e, description)
 [L 109] errors.add(e)
 [L 107] starting(description)
 [L 118] errors.add(e)
 [L 116] finished(description)
 [L 140] skipped(asInternalException, description)

/src/main/java/org/junit/AssumptionViolatedException.java
=========================================================

/src/main/java/org/junit/runners/AllTests.java
==============================================

/src/main/java/org/junit/runners/parameterized/BlockJUnit4ClassRunnerWithParametersFactory.java
===============================================================================================

/src/main/java/org/junit/runners/parameterized/ParametersRunnerFactory.java
===========================================================================

/src/main/java/org/junit/runners/parameterized/TestWithParameters.java
======================================================================
 [L 26] notNull(name, "The name is missing.")
 [L 27] notNull(testClass, "The test class is missing.")
 [L 28] notNull(parameters, "The parameters are missing.")
 [L 31] unmodifiableList(new ArrayList<Object>(parameters))
 [L 49] name.hashCode()
 [L 50] testClass.hashCode()
 [L 51] parameters.hashCode()
 [L 62] getClass()
 [L 62] obj.getClass()
 [L 66] name.equals(other.name)
 [L 67] parameters.equals(other.parameters)
 [L 68] testClass.equals(other.testClass)
 [L 73] testClass.getName()

/src/main/java/org/junit/runners/parameterized/BlockJUnit4ClassRunnerWithParameters.java
========================================================================================
 [L 32] test.getTestClass()
 [L 32] test.getTestClass().getJavaClass()
 [L 34] test.getParameters()
 [L 34] test.getParameters().size()
 [L 33] test.getParameters()
 [L 33] test.getParameters().toArray(new Object[test.getParameters().size()])
 [L 35] test.getName()
 [L 40] getInjectionType()
 [L 43] createTestUsingConstructorInjection()
 [L 45] createTestUsingFieldInjection()
 [L 53] getTestClass()
 [L 53] getTestClass().getOnlyConstructor()
 [L 53] getTestClass().getOnlyConstructor().newInstance(parameters)
 [L 57] getAnnotatedFieldsByParameter()
 [L 58] annotatedFieldsByParameter.size()
 [L 62] annotatedFieldsByParameter.size()
 [L 66] getTestClass()
 [L 66] getTestClass().getJavaClass()
 [L 66] getTestClass().getJavaClass().newInstance()
 [L 68] each.getField()
 [L 69] field.getAnnotation(Parameter.class)
 [L 70] annotation.value()
 [L 74] getTestClass()
 [L 74] getTestClass().getName()
 [L 75] field.getName()
 [L 78] parameters[index].getClass()
 [L 78] parameters[index].getClass().getSimpleName()
 [L 79] field.getType()
 [L 79] field.getType().getSimpleName()
 [L 72] field.set(testClassInstance, parameters[index])
 [L 93] method.getName()
 [L 93] getName()
 [L 98] validateOnlyOneConstructor(errors)
 [L 99] getInjectionType()
 [L 100] validateZeroArgConstructor(errors)
 [L 106] super.validateFields(errors)
 [L 107] getInjectionType()
 [L 108] getAnnotatedFieldsByParameter()
 [L 109] annotatedFieldsByParameter.size()
 [L 111] each.getField()
 [L 111] each.getField().getAnnotation(Parameter.class)
 [L 111] each.getField().getAnnotation(Parameter.class).value()
 [L 113] annotatedFieldsByParameter.size()
 [L 116] annotatedFieldsByParameter.size()
 [L 118] annotatedFieldsByParameter.size()
 [L 114] errors.add(new Exception("Invalid @Parameter value: " + index + ". @Parameter fields counted: " + annotatedFieldsByParameter.size() + ". Please use an index between 0 and " + (annotatedFieldsByParameter.size() - 1) + "."))
 [L 129] errors.add(new Exception("@Parameter(" + index + ") is used more than once (" + numberOfUse + ")."))
 [L 126] errors.add(new Exception("@Parameter(" + index + ") is never used."))
 [L 138] childrenInvoker(notifier)
 [L 143] super.getRunnerAnnotations()
 [L 147] annotation.annotationType()
 [L 147] annotation.annotationType().equals(RunWith.class)
 [L 156] getTestClass()
 [L 156] getTestClass().getAnnotatedFields(Parameter.class)
 [L 160] fieldsAreAnnotated()
 [L 168] getAnnotatedFieldsByParameter()
 [L 168] getAnnotatedFieldsByParameter().isEmpty()

/src/main/java/org/junit/runners/Parameterized.java
===================================================
 [L 241] RunnersFactory.createRunnersForClass(klass)
 [L 251] new RunnersFactory(klass).createRunners()
 [L 259] getParametersMethod()
 [L 259] getParametersMethod().getAnnotation(Parameters.class)
 [L 262] allParameters()
 [L 262] parameters.name()
 [L 263] getParametersRunnerFactory()
 [L 261] createRunnersForParameters(allParameters(), parameters.name(), getParametersRunnerFactory())
 [L 261] Collections.unmodifiableList(createRunnersForParameters(allParameters(), parameters.name(), getParametersRunnerFactory()))
 [L 268] testClass.getAnnotation(UseParametersRunnerFactory.class)
 [L 273] annotation.value()
 [L 275] factoryClass.newInstance()
 [L 283] createTestWithParameters(testClass, pattern, index, parameters)
 [L 289] getParametersMethod()
 [L 289] getParametersMethod().invokeExplosively(null)
 [L 295] parametersMethodReturnedWrongType()
 [L 293] Arrays.asList((Object[]) parameters)
 [L 300] testClass.getAnnotatedMethods(Parameters.class)
 [L 303] each.isStatic()
 [L 303] each.isPublic()
 [L 309] testClass.getName()
 [L 325] parametersMethodReturnedWrongType()
 [L 316] createTestsForParameters(allParameters, namePattern)
 [L 320] runnerFactory.createRunnerForTestWithParameters(test)
 [L 320] runners.add(runnerFactory.createRunnerForTestWithParameters(test))
 [L 335] createTestWithNotNormalizedParameters(namePattern, i++, parametersOfSingleTest)
 [L 335] children.add(createTestWithNotNormalizedParameters(namePattern, i++, parametersOfSingleTest))
 [L 342] testClass.getName()
 [L 343] getParametersMethod()
 [L 343] getParametersMethod().getName()
 [L 344] MessageFormat.format("{0}.{1}() must return an Iterable of arrays.", className, methodName)
 [L 354] Integer.toString(index)
 [L 353] pattern.replaceAll("\\{index\\}", Integer.toString(index))
 [L 355] MessageFormat.format(finalPattern, parameters)
 [L 357] Arrays.asList(parameters)

/src/main/java/org/junit/runners/Suite.java
===========================================
 [L 54] klass.getAnnotation(SuiteClasses.class)
 [L 56] klass.getName()
 [L 56] String.format("class '%s' must have a SuiteClasses annotation", klass.getName())
 [L 58] annotation.value()
 [L 70] getAnnotatedClasses(klass)
 [L 81] builder.runners(null, classes)
 [L 102] builder.runners(klass, suiteClasses)
 [L 113] Collections.unmodifiableList(runners)
 [L 123] child.getDescription()
 [L 128] runner.run(notifier)

/src/main/java/org/junit/runners/model/TestClass.java
=====================================================
 [L 47] clazz.getConstructors()
 [L 57] scanAnnotatedMembers(methodsForAnnotations, fieldsForAnnotations)
 [L 59] makeDeeplyUnmodifiable(methodsForAnnotations)
 [L 60] makeDeeplyUnmodifiable(fieldsForAnnotations)
 [L 66] addToAnnotationLists(new FrameworkMethod(eachMethod), methodsForAnnotations)
 [L 65] MethodSorter.getDeclaredMethods(eachClass)
 [L 71] addToAnnotationLists(new FrameworkField(eachField), fieldsForAnnotations)
 [L 70] getSortedDeclaredFields(eachClass)
 [L 64] getSuperClasses(clazz)
 [L 77] clazz.getDeclaredFields()
 [L 78] Arrays.sort(declaredFields, FIELD_COMPARATOR)
 [L 85] each.annotationType()
 [L 86] getAnnotatedMembers(map, type, true)
 [L 87] member.isShadowedBy(members)
 [L 90] runsTopToBottom(type)
 [L 93] members.add(member)
 [L 91] members.add(0, member)
 [L 84] member.getAnnotations()
 [L 103] entry.getKey()
 [L 103] entry.getValue()
 [L 103] Collections.unmodifiableList(entry.getValue())
 [L 103] copy.put(entry.getKey(), Collections.unmodifiableList(entry.getValue()))
 [L 102] source.entrySet()
 [L 105] Collections.unmodifiableMap(copy)
 [L 115] collectValues(methodsForAnnotations)
 [L 116] Collections.sort(methods, METHOD_COMPARATOR)
 [L 126] getAnnotatedMembers(methodsForAnnotations, annotationClass, false)
 [L 126] Collections.unmodifiableList(getAnnotatedMembers(methodsForAnnotations, annotationClass, false))
 [L 136] collectValues(fieldsForAnnotations)
 [L 145] getAnnotatedMembers(fieldsForAnnotations, annotationClass, false)
 [L 145] Collections.unmodifiableList(getAnnotatedMembers(fieldsForAnnotations, annotationClass, false))
 [L 151] values.addAll(additionalValues)
 [L 150] map.values()
 [L 158] map.containsKey(type)
 [L 159] map.put(type, new ArrayList<T>())
 [L 161] map.get(type)
 [L 162] Collections.<T>emptyList()
 [L 166] annotation.equals(Before.class)
 [L 167] annotation.equals(BeforeClass.class)
 [L 174] results.add(current)
 [L 175] current.getSuperclass()
 [L 194] clazz.getName()
 [L 203] clazz.getConstructors()
 [L 204] Assert.assertEquals(1, constructors.length)
 [L 215] clazz.getAnnotations()
 [L 222] clazz.getAnnotation(annotationType)
 [L 230] each.get(test)
 [L 231] valueClass.isInstance(fieldValue)
 [L 232] valueClass.cast(fieldValue)
 [L 232] results.add(valueClass.cast(fieldValue))
 [L 228] getAnnotatedFields(annotationClass)
 [L 261] each.getName()
 [L 255] each.getReturnType()
 [L 255] valueClass.isAssignableFrom(each.getReturnType())
 [L 256] each.invokeExplosively(test)
 [L 257] valueClass.cast(fieldValue)
 [L 257] results.add(valueClass.cast(fieldValue))
 [L 245] getAnnotatedMethods(annotationClass)
 [L 268] clazz.getModifiers()
 [L 268] Modifier.isPublic(clazz.getModifiers())
 [L 272] clazz.isMemberClass()
 [L 272] clazz.getModifiers()
 [L 272] isStatic(clazz.getModifiers())
 [L 277] clazz.hashCode()
 [L 288] getClass()
 [L 288] obj.getClass()
 [L 300] right.getName()
 [L 300] left.getName()
 [L 300] left.getName().compareTo(right.getName())
 [L 310] left.getMethod()
 [L 310] right.getMethod()
 [L 310] NAME_ASCENDING.compare(left.getMethod(), right.getMethod())

/src/main/java/org/junit/runners/model/FrameworkMember.java
===========================================================
 [L 17] isShadowedBy(each)
 [L 30] getModifiers()
 [L 30] Modifier.isStatic(getModifiers())
 [L 37] getModifiers()
 [L 37] Modifier.isPublic(getModifiers())

/src/main/java/org/junit/runners/model/Statement.java
=====================================================

/src/main/java/org/junit/runners/model/Annotatable.java
=======================================================

/src/main/java/org/junit/runners/model/FrameworkField.java
==========================================================
 [L 27] getField()
 [L 27] getField().getName()
 [L 31] field.getAnnotations()
 [L 35] field.getAnnotation(annotationType)
 [L 40] getName()
 [L 40] otherMember.getName()
 [L 40] otherMember.getName().equals(getName())
 [L 45] field.getModifiers()
 [L 61] field.getType()
 [L 66] field.getDeclaringClass()
 [L 73] field.get(target)
 [L 78] field.toString()

/src/main/java/org/junit/runners/model/FrameworkMethod.java
===========================================================
 [L 50] method.invoke(target, params)
 [L 47] new ReflectiveCallable() {

    @Override
    protected Object runReflectiveCall() throws Throwable {
        return method.invoke(target, params);
    }
}.run()
 [L 60] method.getName()
 [L 74] validatePublicVoid(isStatic, errors)
 [L 75] method.getParameterTypes()
 [L 76] method.getName()
 [L 76] errors.add(new Exception("Method " + method.getName() + " should have no parameters"))
 [L 91] isStatic()
 [L 93] method.getName()
 [L 93] errors.add(new Exception("Method " + method.getName() + "() " + state + " be static"))
 [L 95] isPublic()
 [L 96] method.getName()
 [L 96] errors.add(new Exception("Method " + method.getName() + "() should be public"))
 [L 98] method.getReturnType()
 [L 99] method.getName()
 [L 99] errors.add(new Exception("Method " + method.getName() + "() should be void"))
 [L 105] method.getModifiers()
 [L 112] method.getReturnType()
 [L 120] getReturnType()
 [L 128] method.getDeclaringClass()
 [L 132] new NoGenericTypeParametersValidator(method).validate(errors)
 [L 137] getName()
 [L 137] other.getName()
 [L 137] other.getName().equals(getName())
 [L 140] other.getParameterTypes()
 [L 140] getParameterTypes()
 [L 144] getParameterTypes()
 [L 144] other.getParameterTypes()
 [L 144] other.getParameterTypes()[i].equals(getParameterTypes()[i])
 [L 143] other.getParameterTypes()
 [L 153] FrameworkMethod.class.isInstance(obj)
 [L 156] ((FrameworkMethod) obj).method.equals(method)
 [L 161] method.hashCode()
 [L 175] getParameterTypes()
 [L 176] method.getReturnType()
 [L 176] ((Class<?>) type).isAssignableFrom(method.getReturnType())
 [L 180] method.getParameterTypes()
 [L 187] method.getAnnotations()
 [L 195] method.getAnnotation(annotationType)
 [L 200] method.toString()

/src/main/java/org/junit/runners/model/InitializationError.java
===============================================================
 [L 30] Arrays.asList(error)

/src/main/java/org/junit/runners/model/RunnerBuilder.java
=========================================================
 [L 59] runnerForClass(testClass)
 [L 66] parents.add(parent)
 [L 67] parent.getName()
 [L 67] String.format("class '%s' (possibly indirectly) contains itself as a SuiteClass", parent.getName())
 [L 73] parents.remove(klass)
 [L 84] addParent(parent)
 [L 89] removeParent(parent)
 [L 87] runners(children)
 [L 95] children.toArray(new Class<?>[0])
 [L 95] runners(parent, children.toArray(new Class<?>[0]))
 [L 101] safeRunnerForClass(each)
 [L 103] runners.add(childRunner)

/src/main/java/org/junit/runners/model/NoGenericTypeParametersValidator.java
============================================================================
 [L 20] validateNoTypeParameterOnType(each, errors)
 [L 19] method.getGenericParameterTypes()
 [L 33] validateNoTypeParameterOnGenericArrayType((GenericArrayType) type, errors)
 [L 31] validateNoTypeParameterOnWildcardType((WildcardType) type, errors)
 [L 29] validateNoTypeParameterOnParameterizedType((ParameterizedType) type, errors)
 [L 26] method.getName()
 [L 26] errors.add(new Exception("Method " + method.getName() + "() contains unresolved type variable " + type))
 [L 40] validateNoTypeParameterOnType(each, errors)
 [L 39] parameterized.getActualTypeArguments()
 [L 47] validateNoTypeParameterOnType(each, errors)
 [L 46] wildcard.getUpperBounds()
 [L 50] validateNoTypeParameterOnType(each, errors)
 [L 49] wildcard.getLowerBounds()
 [L 56] arrayType.getGenericComponentType()
 [L 56] validateNoTypeParameterOnType(arrayType.getGenericComponentType(), errors)

/src/main/java/org/junit/runners/model/RunnerScheduler.java
===========================================================

/src/main/java/org/junit/runners/model/TestTimedOutException.java
=================================================================
 [L 26] timeUnit.name()
 [L 26] timeUnit.name().toLowerCase()
 [L 25] String.format("test timed out after %d %s", timeout, timeUnit.name().toLowerCase())

/src/main/java/org/junit/runners/model/MultipleFailureException.java
====================================================================
 [L 29] Collections.unmodifiableList(fErrors)
 [L 35] fErrors.size()
 [L 35] String.format("There were %d errors:", fErrors.size())
 [L 37] e.getClass()
 [L 37] e.getClass().getName()
 [L 37] e.getMessage()
 [L 37] String.format("\n  %s(%s)", e.getClass().getName(), e.getMessage())
 [L 37] sb.append(String.format("\n  %s(%s)", e.getClass().getName(), e.getMessage()))
 [L 39] sb.toString()
 [L 53] errors.isEmpty()
 [L 56] errors.size()
 [L 57] errors.get(0)
 [L 57] Throwables.rethrowAsException(errors.get(0))

/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
============================================================
 [L 77] describeChild(method)
 [L 78] isIgnored(method)
 [L 83] methodBlock(method)
 [L 88] runLeaf(statement, description, notifier)
 [L 79] notifier.fireTestIgnored(description)
 [L 98] child.getAnnotation(Ignore.class)
 [L 103] methodDescriptions.get(method)
 [L 106] getTestClass()
 [L 106] getTestClass().getJavaClass()
 [L 107] testName(method)
 [L 107] method.getAnnotations()
 [L 106] Description.createTestDescription(getTestClass().getJavaClass(), testName(method), method.getAnnotations())
 [L 108] methodDescriptions.putIfAbsent(method, description)
 [L 116] computeTestMethods()
 [L 129] getTestClass()
 [L 129] getTestClass().getAnnotatedMethods(Test.class)
 [L 134] super.collectInitializationErrors(errors)
 [L 136] validateNoNonStaticInnerClass(errors)
 [L 137] validateConstructor(errors)
 [L 138] validateInstanceMethods(errors)
 [L 139] validateFields(errors)
 [L 140] validateMethods(errors)
 [L 144] getTestClass()
 [L 144] getTestClass().isANonStaticInnerClass()
 [L 145] getTestClass()
 [L 145] getTestClass().getName()
 [L 147] errors.add(new Exception(gripe))
 [L 157] validateOnlyOneConstructor(errors)
 [L 158] validateZeroArgConstructor(errors)
 [L 166] hasOneConstructor()
 [L 168] errors.add(new Exception(gripe))
 [L 177] getTestClass()
 [L 177] getTestClass().isANonStaticInnerClass()
 [L 178] hasOneConstructor()
 [L 179] getTestClass()
 [L 179] getTestClass().getOnlyConstructor()
 [L 179] getTestClass().getOnlyConstructor().getParameterTypes()
 [L 181] errors.add(new Exception(gripe))
 [L 186] getTestClass()
 [L 186] getTestClass().getJavaClass()
 [L 186] getTestClass().getJavaClass().getConstructors()
 [L 197] validatePublicVoidNoArgMethods(After.class, false, errors)
 [L 198] validatePublicVoidNoArgMethods(Before.class, false, errors)
 [L 199] validateTestMethods(errors)
 [L 201] computeTestMethods()
 [L 201] computeTestMethods().isEmpty()
 [L 202] errors.add(new Exception("No runnable methods"))
 [L 207] getTestClass()
 [L 207] RULE_VALIDATOR.validate(getTestClass(), errors)
 [L 211] getTestClass()
 [L 211] RULE_METHOD_VALIDATOR.validate(getTestClass(), errors)
 [L 219] validatePublicVoidNoArgMethods(Test.class, false, errors)
 [L 228] getTestClass()
 [L 228] getTestClass().getOnlyConstructor()
 [L 228] getTestClass().getOnlyConstructor().newInstance()
 [L 238] createTest()
 [L 246] method.getName()
 [L 287] createTest(method)
 [L 284] new ReflectiveCallable() {

    @Override
    protected Object runReflectiveCall() throws Throwable {
        return createTest(method);
    }
}.run()
 [L 294] methodInvoker(method, test)
 [L 295] possiblyExpectingExceptions(method, test, statement)
 [L 296] withPotentialTimeout(method, test, statement)
 [L 297] withBefores(method, test, statement)
 [L 298] withAfters(method, test, statement)
 [L 299] withRules(method, test, statement)
 [L 322] method.getAnnotation(Test.class)
 [L 323] expectsException(annotation)
 [L 324] getExpectedException(annotation)
 [L 336] method.getAnnotation(Test.class)
 [L 336] getTimeout(method.getAnnotation(Test.class))
 [L 340] FailOnTimeout.builder()
 [L 340] FailOnTimeout.builder().withTimeout(timeout, TimeUnit.MILLISECONDS)
 [L 340] FailOnTimeout.builder().withTimeout(timeout, TimeUnit.MILLISECONDS).build(next)
 [L 352] getTestClass()
 [L 352] getTestClass().getAnnotatedMethods(Before.class)
 [L 354] befores.isEmpty()
 [L 367] getTestClass()
 [L 367] getTestClass().getAnnotatedMethods(After.class)
 [L 369] afters.isEmpty()
 [L 375] getTestRules(target)
 [L 377] withMethodRules(method, testRules, target, result)
 [L 378] withTestRules(method, testRules, result)
 [L 387] testRules.contains(each)
 [L 388] each.apply(withMethodRules, method, target)
 [L 386] getMethodRules(target)
 [L 395] rules(target)
 [L 404] getTestClass()
 [L 404] getTestClass().getAnnotatedMethodValues(target, Rule.class, MethodRule.class)
 [L 407] getTestClass()
 [L 407] getTestClass().getAnnotatedFieldValues(target, Rule.class, MethodRule.class)
 [L 407] rules.addAll(getTestClass().getAnnotatedFieldValues(target, Rule.class, MethodRule.class))
 [L 423] testRules.isEmpty()
 [L 424] describeChild(method)
 [L 433] getTestClass()
 [L 433] getTestClass().getAnnotatedMethodValues(target, Rule.class, TestRule.class)
 [L 436] getTestClass()
 [L 436] getTestClass().getAnnotatedFieldValues(target, Rule.class, TestRule.class)
 [L 436] result.addAll(getTestClass().getAnnotatedFieldValues(target, Rule.class, TestRule.class))
 [L 443] annotation.expected()
 [L 446] annotation.expected()
 [L 451] getExpectedException(annotation)
 [L 458] annotation.timeout()

/src/main/java/org/junit/runners/ParentRunner.java
==================================================
 [L 60] Arrays.asList(new AnnotationsValidator(), new PublicClassValidator())
 [L 71] childStatement.run()
 [L 83] createTestClass(testClass)
 [L 84] validate()
 [L 125] validatePublicVoidNoArgMethods(BeforeClass.class, true, errors)
 [L 126] validatePublicVoidNoArgMethods(AfterClass.class, true, errors)
 [L 127] validateClassRules(errors)
 [L 128] applyValidators(errors)
 [L 132] getTestClass()
 [L 132] getTestClass().getJavaClass()
 [L 134] getTestClass()
 [L 134] each.validateTestClass(getTestClass())
 [L 134] errors.addAll(each.validateTestClass(getTestClass()))
 [L 152] getTestClass()
 [L 152] getTestClass().getAnnotatedMethods(annotation)
 [L 155] eachTestMethod.validatePublicVoidNoArg(isStatic, errors)
 [L 160] getTestClass()
 [L 160] CLASS_RULE_VALIDATOR.validate(getTestClass(), errors)
 [L 161] getTestClass()
 [L 161] CLASS_RULE_METHOD_VALIDATOR.validate(getTestClass(), errors)
 [L 190] childrenInvoker(notifier)
 [L 191] areAllChildrenIgnored()
 [L 192] withBeforeClasses(statement)
 [L 193] withAfterClasses(statement)
 [L 194] withClassRules(statement)
 [L 201] isIgnored(child)
 [L 200] getFilteredChildren()
 [L 214] testClass.getAnnotatedMethods(BeforeClass.class)
 [L 216] befores.isEmpty()
 [L 228] testClass.getAnnotatedMethods(AfterClass.class)
 [L 230] afters.isEmpty()
 [L 244] classRules()
 [L 245] classRules.isEmpty()
 [L 246] getDescription()
 [L 254] testClass.getAnnotatedMethodValues(null, ClassRule.class, TestRule.class)
 [L 255] testClass.getAnnotatedFieldValues(null, ClassRule.class, TestRule.class)
 [L 255] result.addAll(testClass.getAnnotatedFieldValues(null, ClassRule.class, TestRule.class))
 [L 268] runChildren(notifier)
 [L 295] currentScheduler.finished()
 [L 290] ParentRunner.this.runChild(each, notifier)
 [L 288] currentScheduler.schedule(new Runnable() {

    public void run() {
        ParentRunner.this.runChild(each, notifier);
    }
})
 [L 287] getFilteredChildren()
 [L 303] testClass.getName()
 [L 323] eachNotifier.fireTestStarted()
 [L 327] eachNotifier.addFailedAssumption(e)
 [L 329] eachNotifier.addFailure(e)
 [L 331] eachNotifier.fireTestFinished()
 [L 325] statement.evaluate()
 [L 340] testClass.getAnnotations()
 [L 349] getName()
 [L 350] getRunnerAnnotations()
 [L 349] Description.createSuiteDescription(getName(), getRunnerAnnotations())
 [L 352] describeChild(child)
 [L 352] description.addChild(describeChild(child))
 [L 351] getFilteredChildren()
 [L 360] getDescription()
 [L 365] testNotifier.addFailedAssumption(e)
 [L 369] testNotifier.addFailure(e)
 [L 362] classBlock(notifier)
 [L 363] statement.evaluate()
 [L 379] getFilteredChildren()
 [L 381] iter.next()
 [L 382] shouldRun(filter, each)
 [L 389] iter.remove()
 [L 386] iter.remove()
 [L 384] filter.apply(each)
 [L 380] iter.hasNext()
 [L 380] children.iterator()
 [L 392] Collections.unmodifiableCollection(children)
 [L 393] filteredChildren.isEmpty()
 [L 402] sorter.apply(each)
 [L 401] getFilteredChildren()
 [L 404] getFilteredChildren()
 [L 405] comparator(sorter)
 [L 405] Collections.sort(sortedChildren, comparator(sorter))
 [L 406] Collections.unmodifiableCollection(sortedChildren)
 [L 416] collectInitializationErrors(errors)
 [L 417] errors.isEmpty()
 [L 426] getChildren()
 [L 426] Collections.unmodifiableCollection(getChildren())
 [L 434] describeChild(each)
 [L 434] filter.shouldRun(describeChild(each))
 [L 440] describeChild(o1)
 [L 440] describeChild(o2)
 [L 440] sorter.compare(describeChild(o1), describeChild(o2))

/src/main/java/org/junit/runners/MethodSorters.java
===================================================

/src/main/java/org/junit/runners/JUnit4.java
============================================

/src/main/java/org/junit/runners/package-info.java
==================================================

/src/main/java/org/junit/matchers/JUnitMatchers.java
====================================================
 [L 24] CoreMatchers.hasItem(element)
 [L 33] CoreMatchers.<T>hasItem(elementMatcher)
 [L 42] CoreMatchers.hasItems(elements)
 [L 53] CoreMatchers.hasItems(elementMatchers)
 [L 62] CoreMatchers.everyItem(elementMatcher)
 [L 71] CoreMatchers.containsString(substring)
 [L 84] CoreMatchers.both(matcher)
 [L 97] CoreMatchers.either(matcher)
 [L 105] StacktracePrintingMatcher.isThrowable(throwableMatcher)
 [L 113] StacktracePrintingMatcher.isException(exceptionMatcher)

/src/main/java/org/junit/matchers/package-info.java
===================================================

/src/main/java/org/junit/AfterClass.java
========================================

/src/main/java/org/junit/Rule.java
==================================

/src/main/java/org/junit/package-info.java
==========================================

/src/main/java/org/junit/Before.java
====================================

